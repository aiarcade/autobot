
autobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00002caa  00002d3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002caa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800236  00800236  00002d74  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000067e  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018d6  00000000  00000000  000034d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084f  00000000  00000000  00004da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000144f  00000000  00000000  000055f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  00006a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000638  00000000  00000000  00006eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ef  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00007edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
       8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
       c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      10:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      14:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_5>
      18:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_6>
      1c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      20:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      24:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      28:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      2c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      30:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      34:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      38:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      3c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      40:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      44:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      48:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      4c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      50:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      54:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      58:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      5c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      60:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      64:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      68:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      6c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      70:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      74:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      78:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      7c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      80:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      84:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      88:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      8c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      90:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      94:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      98:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      9c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      a0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      a4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      a8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      ac:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      b0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      b4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_45>
      b8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      bc:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      c0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      c4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      c8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      cc:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__vector_51>
      d0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      d4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      d8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      dc:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      e0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_wr_char+0x36>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__c.1778>:
     166:	6e 61 6e 00                                         nan.

0000016a <__c.1776>:
     16a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     17a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     18a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     19a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     20a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     21a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     22a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     23a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     24a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     25a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d1 e2       	ldi	r29, 0x21	; 33
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0c bf       	out	0x3c, r16	; 60

00000278 <__do_copy_data>:
     278:	12 e0       	ldi	r17, 0x02	; 2
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	ea ea       	ldi	r30, 0xAA	; 170
     280:	fc e2       	ldi	r31, 0x2C	; 44
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a6 33       	cpi	r26, 0x36	; 54
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	12 e0       	ldi	r17, 0x02	; 2
     294:	a6 e3       	ldi	r26, 0x36	; 54
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a6 3a       	cpi	r26, 0xA6	; 166
     29e:	b1 07       	cpc	r27, r17
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <main>
     2a6:	0c 94 29 10 	jmp	0x2052	; 0x2052 <exit>

000002aa <__bad_interrupt>:
     2aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ae <Timer4_Init>:



void Timer4_Init(void)
{
	TCCR4B = 0x00; //stop
     2ae:	e1 ea       	ldi	r30, 0xA1	; 161
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	10 82       	st	Z, r1
 	TCNT4H = 0x1F; //Counter higher 8 bit value
     2b4:	8f e1       	ldi	r24, 0x1F	; 31
     2b6:	80 93 a5 00 	sts	0x00A5, r24
 	TCNT4L = 0x01; //Counter lower 8 bit value
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	90 93 a4 00 	sts	0x00A4, r25
 	OCR4AH = 0x00; //Output Compair Register (OCR)- Not used
     2c0:	10 92 a9 00 	sts	0x00A9, r1
 	OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
     2c4:	10 92 a8 00 	sts	0x00A8, r1
 	OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
     2c8:	10 92 ab 00 	sts	0x00AB, r1
 	OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
     2cc:	10 92 aa 00 	sts	0x00AA, r1
 	OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
     2d0:	10 92 ad 00 	sts	0x00AD, r1
 	OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
     2d4:	10 92 ac 00 	sts	0x00AC, r1
 	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     2d8:	10 92 a7 00 	sts	0x00A7, r1
 	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     2dc:	10 92 a6 00 	sts	0x00A6, r1
 	TCCR4A = 0x00; 
     2e0:	10 92 a0 00 	sts	0x00A0, r1
 	TCCR4C = 0x00;
     2e4:	10 92 a2 00 	sts	0x00A2, r1
 	TCCR4B = 0x04; //start Timer
     2e8:	84 e0       	ldi	r24, 0x04	; 4
     2ea:	80 83       	st	Z, r24
     TIMSK4 = 0x01; //timer4 overflow interrupt enable
     2ec:	90 93 72 00 	sts	0x0072, r25


}
     2f0:	08 95       	ret

000002f2 <__vector_45>:

}


ISR(TIMER4_OVF_vect)
{
     2f2:	1f 92       	push	r1
     2f4:	0f 92       	push	r0
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	0f 92       	push	r0
     2fa:	11 24       	eor	r1, r1
     2fc:	8f 93       	push	r24
     2fe:	9f 93       	push	r25
     300:	af 93       	push	r26
     302:	bf 93       	push	r27
	 TCNT4H = 0x1F; //reload counter high value
     304:	8f e1       	ldi	r24, 0x1F	; 31
     306:	80 93 a5 00 	sts	0x00A5, r24
 	 TCNT4L = 0x01; //reload counter low value
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	80 93 a4 00 	sts	0x00A4, r24

	ms++;
     310:	80 91 6e 02 	lds	r24, 0x026E
     314:	90 91 6f 02 	lds	r25, 0x026F
     318:	a0 91 70 02 	lds	r26, 0x0270
     31c:	b0 91 71 02 	lds	r27, 0x0271
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	a1 1d       	adc	r26, r1
     324:	b1 1d       	adc	r27, r1
     326:	80 93 6e 02 	sts	0x026E, r24
     32a:	90 93 6f 02 	sts	0x026F, r25
     32e:	a0 93 70 02 	sts	0x0270, r26
     332:	b0 93 71 02 	sts	0x0271, r27
}
     336:	bf 91       	pop	r27
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <millis>:

unsigned long int millis(void) 
{ 
     348:	60 91 6e 02 	lds	r22, 0x026E
     34c:	70 91 6f 02 	lds	r23, 0x026F
    return ms; 
} 
     350:	80 91 70 02 	lds	r24, 0x0270
     354:	90 91 71 02 	lds	r25, 0x0271
     358:	08 95       	ret

0000035a <reset_odometry>:
}

void reset_odometry()
{

	odo_points[0]=0;
     35a:	10 92 3d 02 	sts	0x023D, r1
     35e:	10 92 3c 02 	sts	0x023C, r1
	odo_points[1]=0;
     362:	10 92 3f 02 	sts	0x023F, r1
     366:	10 92 3e 02 	sts	0x023E, r1
	clearPosCounters();
     36a:	0e 94 a4 06 	call	0xd48	; 0xd48 <clearPosCounters>

		
}
     36e:	08 95       	ret

00000370 <exec_motion_cmd>:

int exec_motion_cmd(char cmd, int duration)
{
     370:	6f 92       	push	r6
     372:	7f 92       	push	r7
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	18 2f       	mov	r17, r24
     38a:	7b 01       	movw	r14, r22
	int no_command=0;
	lcd_home();
     38c:	0e 94 b6 04 	call	0x96c	; 0x96c <lcd_home>
	lcd_wr_char(cmd);
     390:	81 2f       	mov	r24, r17
     392:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
	ms++;
}

unsigned long int millis(void) 
{ 
    return ms; 
     396:	60 90 6e 02 	lds	r6, 0x026E
     39a:	70 90 6f 02 	lds	r7, 0x026F
     39e:	80 90 70 02 	lds	r8, 0x0270
     3a2:	90 90 71 02 	lds	r9, 0x0271
{
	int no_command=0;
	lcd_home();
	lcd_wr_char(cmd);
	unsigned long int mills=millis();
	switch(cmd)
     3a6:	1c 34       	cpi	r17, 0x4C	; 76
     3a8:	a1 f0       	breq	.+40     	; 0x3d2 <exec_motion_cmd+0x62>
     3aa:	1d 34       	cpi	r17, 0x4D	; 77
     3ac:	30 f4       	brcc	.+12     	; 0x3ba <exec_motion_cmd+0x4a>
     3ae:	12 34       	cpi	r17, 0x42	; 66
     3b0:	69 f0       	breq	.+26     	; 0x3cc <exec_motion_cmd+0x5c>
     3b2:	16 34       	cpi	r17, 0x46	; 70
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <exec_motion_cmd+0x48>
     3b6:	79 c0       	rjmp	.+242    	; 0x4aa <exec_motion_cmd+0x13a>
     3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <exec_motion_cmd+0x56>
     3ba:	1f 34       	cpi	r17, 0x4F	; 79
     3bc:	81 f0       	breq	.+32     	; 0x3de <exec_motion_cmd+0x6e>
     3be:	12 35       	cpi	r17, 0x52	; 82
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <exec_motion_cmd+0x54>
     3c2:	73 c0       	rjmp	.+230    	; 0x4aa <exec_motion_cmd+0x13a>
     3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <exec_motion_cmd+0x68>
	{
		case 'F':
			forward();
     3c6:	0e 94 ef 05 	call	0xbde	; 0xbde <forward>
     3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <exec_motion_cmd+0x74>
			break;
		case 'B':
			back();
     3cc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <back>
     3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <exec_motion_cmd+0x74>
			break;
		case 'L':
			left();
     3d2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <left>
     3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <exec_motion_cmd+0x74>
			break;
		case 'R':
			right();
     3d8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <right>
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <exec_motion_cmd+0x74>
			break;
		case 'O':
			reset_odometry();
     3de:	0e 94 ad 01 	call	0x35a	; 0x35a <reset_odometry>
     3e2:	63 c0       	rjmp	.+198    	; 0x4aa <exec_motion_cmd+0x13a>
			break;


	}
	if(no_command==0){
		_delay_ms(duration);
     3e4:	b7 01       	movw	r22, r14
     3e6:	88 27       	eor	r24, r24
     3e8:	77 fd       	sbrc	r23, 7
     3ea:	80 95       	com	r24
     3ec:	98 2f       	mov	r25, r24
     3ee:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
     3f2:	5b 01       	movw	r10, r22
     3f4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3f6:	26 e6       	ldi	r18, 0x66	; 102
     3f8:	36 e6       	ldi	r19, 0x66	; 102
     3fa:	46 e6       	ldi	r20, 0x66	; 102
     3fc:	55 e4       	ldi	r21, 0x45	; 69
     3fe:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
     402:	7b 01       	movw	r14, r22
     404:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e8       	ldi	r20, 0x80	; 128
     40c:	5f e3       	ldi	r21, 0x3F	; 63
     40e:	0e 94 35 12 	call	0x246a	; 0x246a <__cmpsf2>
     412:	88 23       	and	r24, r24
     414:	1c f4       	brge	.+6      	; 0x41c <exec_motion_cmd+0xac>
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	24 c0       	rjmp	.+72     	; 0x464 <exec_motion_cmd+0xf4>
		__ticks = 1;
	else if (__tmp > 65535)
     41c:	c8 01       	movw	r24, r16
     41e:	b7 01       	movw	r22, r14
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	3f ef       	ldi	r19, 0xFF	; 255
     424:	4f e7       	ldi	r20, 0x7F	; 127
     426:	57 e4       	ldi	r21, 0x47	; 71
     428:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__gesf2>
     42c:	18 16       	cp	r1, r24
     42e:	b4 f4       	brge	.+44     	; 0x45c <exec_motion_cmd+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     430:	c6 01       	movw	r24, r12
     432:	b5 01       	movw	r22, r10
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e2       	ldi	r20, 0x20	; 32
     43a:	51 e4       	ldi	r21, 0x41	; 65
     43c:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
     440:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     444:	80 e7       	ldi	r24, 0x70	; 112
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	05 c0       	rjmp	.+10     	; 0x454 <exec_motion_cmd+0xe4>
     44a:	fc 01       	movw	r30, r24
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <exec_motion_cmd+0xdc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     450:	61 50       	subi	r22, 0x01	; 1
     452:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     454:	61 15       	cp	r22, r1
     456:	71 05       	cpc	r23, r1
     458:	c1 f7       	brne	.-16     	; 0x44a <exec_motion_cmd+0xda>
     45a:	07 c0       	rjmp	.+14     	; 0x46a <exec_motion_cmd+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     45c:	c8 01       	movw	r24, r16
     45e:	b7 01       	movw	r22, r14
     460:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fixunssfsi>
     464:	cb 01       	movw	r24, r22
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <exec_motion_cmd+0xf6>
		  current_time= current_time+millis()-mills; 
     46a:	80 91 6e 02 	lds	r24, 0x026E
     46e:	90 91 6f 02 	lds	r25, 0x026F
     472:	a0 91 70 02 	lds	r26, 0x0270
     476:	b0 91 71 02 	lds	r27, 0x0271
     47a:	20 91 40 02 	lds	r18, 0x0240
     47e:	30 91 41 02 	lds	r19, 0x0241
     482:	40 91 42 02 	lds	r20, 0x0242
     486:	50 91 43 02 	lds	r21, 0x0243
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
     48e:	a4 1f       	adc	r26, r20
     490:	b5 1f       	adc	r27, r21
     492:	86 19       	sub	r24, r6
     494:	97 09       	sbc	r25, r7
     496:	a8 09       	sbc	r26, r8
     498:	b9 09       	sbc	r27, r9
     49a:	80 93 40 02 	sts	0x0240, r24
     49e:	90 93 41 02 	sts	0x0241, r25
     4a2:	a0 93 42 02 	sts	0x0242, r26
     4a6:	b0 93 43 02 	sts	0x0243, r27
	}
     

}
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	08 95       	ret

000004c4 <command_data>:
	
}


int command_data(char *str)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <command_data+0x6>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <command_data+0x8>
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	fc 01       	movw	r30, r24

	char data[6];
		
	data[0]=str[1];
     4d2:	81 81       	ldd	r24, Z+1	; 0x01
     4d4:	89 83       	std	Y+1, r24	; 0x01
	data[1]=str[2];
     4d6:	82 81       	ldd	r24, Z+2	; 0x02
     4d8:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=str[3];
     4da:	83 81       	ldd	r24, Z+3	; 0x03
     4dc:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=str[4];
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=str[5];
     4e2:	85 81       	ldd	r24, Z+5	; 0x05
     4e4:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0;
     4e6:	1e 82       	std	Y+6, r1	; 0x06
	

	return atoi(data);
     4e8:	ce 01       	movw	r24, r28
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	0e 94 0b 10 	call	0x2016	; 0x2016 <atoi>

}
     4f0:	26 96       	adiw	r28, 0x06	; 6
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	08 95       	ret

00000502 <test_partcle_filter>:
}



int test_partcle_filter()
{
     502:	8f 92       	push	r8
     504:	9f 92       	push	r9
     506:	af 92       	push	r10
     508:	bf 92       	push	r11
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	2c 97       	sbiw	r28, 0x0c	; 12
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
	int i;
	float total_weight = 0;
	float measurement_ref[REFERENCE_POINTS];
	create_particles();
     52a:	0e 94 cc 09 	call	0x1398	; 0x1398 <create_particles>
	memset(measurement_ref, 0.0, sizeof(measurement_ref));
     52e:	fe 01       	movw	r30, r28
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	8c e0       	ldi	r24, 0x0C	; 12
     534:	df 01       	movw	r26, r30
     536:	1d 92       	st	X+, r1
     538:	8a 95       	dec	r24
     53a:	e9 f7       	brne	.-6      	; 0x536 <test_partcle_filter+0x34>
     53c:	ee 24       	eor	r14, r14
     53e:	ff 24       	eor	r15, r15
     540:	cc 24       	eor	r12, r12
     542:	dd 24       	eor	r13, r13
//	sense(1, 1, 1, measurement_ref,sense_points);
	int h=0;
	char output[10];
	//printf("sensed value is %f, %f, %f\n", measurement_ref[0], measurement_ref[1], measurement_ref[2]);
	for(i=0; i<NUM_PARTICLE; i++){
		float weight = calculate_weight(particles[i], measurement_ref);
     544:	4f 01       	movw	r8, r30
     546:	90 e7       	ldi	r25, 0x70	; 112
     548:	a9 2e       	mov	r10, r25
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	b9 2e       	mov	r11, r25
{
	int i;
	float total_weight = 0;
	float measurement_ref[REFERENCE_POINTS];
	create_particles();
	memset(measurement_ref, 0.0, sizeof(measurement_ref));
     54e:	87 01       	movw	r16, r14
     550:	00 0f       	add	r16, r16
     552:	11 1f       	adc	r17, r17
//	sense(1, 1, 1, measurement_ref,sense_points);
	int h=0;
	char output[10];
	//printf("sensed value is %f, %f, %f\n", measurement_ref[0], measurement_ref[1], measurement_ref[2]);
	for(i=0; i<NUM_PARTICLE; i++){
		float weight = calculate_weight(particles[i], measurement_ref);
     554:	e0 91 72 02 	lds	r30, 0x0272
     558:	f0 91 73 02 	lds	r31, 0x0273
     55c:	e0 0f       	add	r30, r16
     55e:	f1 1f       	adc	r31, r17
     560:	80 81       	ld	r24, Z
     562:	91 81       	ldd	r25, Z+1	; 0x01
     564:	b4 01       	movw	r22, r8
     566:	0e 94 ae 0a 	call	0x155c	; 0x155c <calculate_weight>
		particles[i]->weight = weight;
     56a:	e0 91 72 02 	lds	r30, 0x0272
     56e:	f0 91 73 02 	lds	r31, 0x0273
     572:	e0 0f       	add	r30, r16
     574:	f1 1f       	adc	r31, r17
     576:	01 90       	ld	r0, Z+
     578:	f0 81       	ld	r31, Z
     57a:	e0 2d       	mov	r30, r0
     57c:	64 8b       	std	Z+20, r22	; 0x14
     57e:	75 8b       	std	Z+21, r23	; 0x15
     580:	86 8b       	std	Z+22, r24	; 0x16
     582:	97 8b       	std	Z+23, r25	; 0x17
		total_weight += weight;
		
		if(weight > 0.01)
     584:	2a e0       	ldi	r18, 0x0A	; 10
     586:	37 ed       	ldi	r19, 0xD7	; 215
     588:	43 e2       	ldi	r20, 0x23	; 35
     58a:	5c e3       	ldi	r21, 0x3C	; 60
     58c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__gesf2>
     590:	18 16       	cp	r1, r24
     592:	8c f4       	brge	.+34     	; 0x5b6 <test_partcle_filter+0xb4>
		{
			lcd_print(2,14,i,3);
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	6e e0       	ldi	r22, 0x0E	; 14
     598:	a7 01       	movw	r20, r14
     59a:	23 e0       	ldi	r18, 0x03	; 3
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <lcd_print>
     5a2:	88 ee       	ldi	r24, 0xE8	; 232
     5a4:	93 e0       	ldi	r25, 0x03	; 3
     5a6:	f5 01       	movw	r30, r10
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <test_partcle_filter+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ae:	d9 f7       	brne	.-10     	; 0x5a6 <test_partcle_filter+0xa4>
			h=h+1;
     5b0:	08 94       	sec
     5b2:	c1 1c       	adc	r12, r1
     5b4:	d1 1c       	adc	r13, r1
	memset(measurement_ref, 0.0, sizeof(measurement_ref));
//	sense(1, 1, 1, measurement_ref,sense_points);
	int h=0;
	char output[10];
	//printf("sensed value is %f, %f, %f\n", measurement_ref[0], measurement_ref[1], measurement_ref[2]);
	for(i=0; i<NUM_PARTICLE; i++){
     5b6:	08 94       	sec
     5b8:	e1 1c       	adc	r14, r1
     5ba:	f1 1c       	adc	r15, r1
     5bc:	b4 e6       	ldi	r27, 0x64	; 100
     5be:	eb 16       	cp	r14, r27
     5c0:	f1 04       	cpc	r15, r1
     5c2:	29 f6       	brne	.-118    	; 0x54e <test_partcle_filter+0x4c>

		}
	//send_particle_over_serial(particles[i]->x,particles[i]->y,particles[i]->vx,particles[i]->vy,particles[i]->direction,particles[i]->weight);
		//	printf("main: particles[%d]->weight=%f\n", i, particles[i]->weight);	
	}
	lcd_print(2,1,h,3);
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	a6 01       	movw	r20, r12
     5ca:	23 e0       	ldi	r18, 0x03	; 3
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <lcd_print>
//	printf("main: total_weight=%f\n", total_weight);
	
}
     5d2:	2c 96       	adiw	r28, 0x0c	; 12
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	cf 91       	pop	r28
     5e0:	df 91       	pop	r29
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	bf 90       	pop	r11
     5f0:	af 90       	pop	r10
     5f2:	9f 90       	pop	r9
     5f4:	8f 90       	pop	r8
     5f6:	08 95       	ret

000005f8 <motor_test>:


void motor_test()
{

		forward(); //both wheels forward
     5f8:	0e 94 ef 05 	call	0xbde	; 0xbde <forward>
     5fc:	80 e1       	ldi	r24, 0x10	; 16
     5fe:	97 e2       	ldi	r25, 0x27	; 39
     600:	20 e7       	ldi	r18, 0x70	; 112
     602:	31 e0       	ldi	r19, 0x01	; 1
     604:	f9 01       	movw	r30, r18
     606:	31 97       	sbiw	r30, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <motor_test+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     60a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     60c:	d9 f7       	brne	.-10     	; 0x604 <motor_test+0xc>
		_delay_ms(1000);

		stop();						
     60e:	0e 94 17 06 	call	0xc2e	; 0xc2e <stop>
     612:	88 e8       	ldi	r24, 0x88	; 136
     614:	93 e1       	ldi	r25, 0x13	; 19
     616:	20 e7       	ldi	r18, 0x70	; 112
     618:	31 e0       	ldi	r19, 0x01	; 1
     61a:	f9 01       	movw	r30, r18
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <motor_test+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     620:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     622:	d9 f7       	brne	.-10     	; 0x61a <motor_test+0x22>
		_delay_ms(500);
	
		back(); //bpth wheels backward						
     624:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <back>
     628:	80 e1       	ldi	r24, 0x10	; 16
     62a:	97 e2       	ldi	r25, 0x27	; 39
     62c:	20 e7       	ldi	r18, 0x70	; 112
     62e:	31 e0       	ldi	r19, 0x01	; 1
     630:	f9 01       	movw	r30, r18
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <motor_test+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     636:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     638:	d9 f7       	brne	.-10     	; 0x630 <motor_test+0x38>
		_delay_ms(1000);

		stop();
     63a:	0e 94 17 06 	call	0xc2e	; 0xc2e <stop>

}
     63e:	08 95       	ret

00000640 <sense_obstacles>:

unsigned int sense_obstacles(){

    unsigned char sharp; 
	unsigned int value;
    sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     640:	8b e0       	ldi	r24, 0x0B	; 11
     642:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <ADC_Conversion>
    value = Sharp_GP2D12_estimation(sharp);
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 a4 05 	call	0xb48	; 0xb48 <Sharp_GP2D12_estimation>
	return value;


}
     64c:	08 95       	ret

0000064e <sense_objects>:

void sense_objects()
{
	
	
	left();
     64e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <left>
     652:	8c ed       	ldi	r24, 0xDC	; 220
     654:	95 e0       	ldi	r25, 0x05	; 5
     656:	20 e7       	ldi	r18, 0x70	; 112
     658:	31 e0       	ldi	r19, 0x01	; 1
     65a:	f9 01       	movw	r30, r18
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <sense_objects+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     660:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     662:	d9 f7       	brne	.-10     	; 0x65a <sense_objects+0xc>
	_delay_ms(150);
	range_points[0]=sense_obstacles();
     664:	0e 94 20 03 	call	0x640	; 0x640 <sense_obstacles>
     668:	90 93 37 02 	sts	0x0237, r25
     66c:	80 93 36 02 	sts	0x0236, r24
	right();
     670:	0e 94 fe 05 	call	0xbfc	; 0xbfc <right>
     674:	8c ed       	ldi	r24, 0xDC	; 220
     676:	95 e0       	ldi	r25, 0x05	; 5
     678:	20 e7       	ldi	r18, 0x70	; 112
     67a:	31 e0       	ldi	r19, 0x01	; 1
     67c:	f9 01       	movw	r30, r18
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <sense_objects+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     682:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     684:	d9 f7       	brne	.-10     	; 0x67c <sense_objects+0x2e>
	_delay_ms(150);
	range_points[1]=sense_obstacles();
     686:	0e 94 20 03 	call	0x640	; 0x640 <sense_obstacles>
     68a:	90 93 39 02 	sts	0x0239, r25
     68e:	80 93 38 02 	sts	0x0238, r24
	right();
     692:	0e 94 fe 05 	call	0xbfc	; 0xbfc <right>
     696:	8c ed       	ldi	r24, 0xDC	; 220
     698:	95 e0       	ldi	r25, 0x05	; 5
     69a:	20 e7       	ldi	r18, 0x70	; 112
     69c:	31 e0       	ldi	r19, 0x01	; 1
     69e:	f9 01       	movw	r30, r18
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <sense_objects+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a6:	d9 f7       	brne	.-10     	; 0x69e <sense_objects+0x50>
    _delay_ms(150);
	range_points[2]=sense_obstacles();
     6a8:	0e 94 20 03 	call	0x640	; 0x640 <sense_obstacles>
     6ac:	90 93 3b 02 	sts	0x023B, r25
     6b0:	80 93 3a 02 	sts	0x023A, r24
	left();
     6b4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <left>
     6b8:	8c ed       	ldi	r24, 0xDC	; 220
     6ba:	95 e0       	ldi	r25, 0x05	; 5
     6bc:	20 e7       	ldi	r18, 0x70	; 112
     6be:	31 e0       	ldi	r19, 0x01	; 1
     6c0:	f9 01       	movw	r30, r18
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <sense_objects+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c8:	d9 f7       	brne	.-10     	; 0x6c0 <sense_objects+0x72>
	_delay_ms(150);
	stop();
     6ca:	0e 94 17 06 	call	0xc2e	; 0xc2e <stop>
	clearPosCounters();
     6ce:	0e 94 a4 06 	call	0xd48	; 0xd48 <clearPosCounters>



		
}
     6d2:	08 95       	ret

000006d4 <send_data_over_serial>:
} 


void send_data_over_serial()

{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	c1 54       	subi	r28, 0x41	; 65
     6e2:	d0 40       	sbci	r29, 0x00	; 0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61

		char output[65];
		sprintf(output, "%u;%u;%u;%u;%u;%u;\n",range_points[0],range_points[1],range_points[2],odo_points[0],odo_points[1],current_time );
     6ee:	8d b7       	in	r24, 0x3d	; 61
     6f0:	9e b7       	in	r25, 0x3e	; 62
     6f2:	42 97       	sbiw	r24, 0x12	; 18
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	9e bf       	out	0x3e, r25	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	8d bf       	out	0x3d, r24	; 61
     6fe:	ed b7       	in	r30, 0x3d	; 61
     700:	fe b7       	in	r31, 0x3e	; 62
     702:	31 96       	adiw	r30, 0x01	; 1
     704:	8e 01       	movw	r16, r28
     706:	0f 5f       	subi	r16, 0xFF	; 255
     708:	1f 4f       	sbci	r17, 0xFF	; 255
     70a:	ad b7       	in	r26, 0x3d	; 61
     70c:	be b7       	in	r27, 0x3e	; 62
     70e:	12 96       	adiw	r26, 0x02	; 2
     710:	1c 93       	st	X, r17
     712:	0e 93       	st	-X, r16
     714:	11 97       	sbiw	r26, 0x01	; 1
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	93 83       	std	Z+3, r25	; 0x03
     71c:	82 83       	std	Z+2, r24	; 0x02
     71e:	80 91 36 02 	lds	r24, 0x0236
     722:	90 91 37 02 	lds	r25, 0x0237
     726:	95 83       	std	Z+5, r25	; 0x05
     728:	84 83       	std	Z+4, r24	; 0x04
     72a:	80 91 38 02 	lds	r24, 0x0238
     72e:	90 91 39 02 	lds	r25, 0x0239
     732:	97 83       	std	Z+7, r25	; 0x07
     734:	86 83       	std	Z+6, r24	; 0x06
     736:	80 91 3a 02 	lds	r24, 0x023A
     73a:	90 91 3b 02 	lds	r25, 0x023B
     73e:	91 87       	std	Z+9, r25	; 0x09
     740:	80 87       	std	Z+8, r24	; 0x08
     742:	80 91 3c 02 	lds	r24, 0x023C
     746:	90 91 3d 02 	lds	r25, 0x023D
     74a:	93 87       	std	Z+11, r25	; 0x0b
     74c:	82 87       	std	Z+10, r24	; 0x0a
     74e:	80 91 3e 02 	lds	r24, 0x023E
     752:	90 91 3f 02 	lds	r25, 0x023F
     756:	95 87       	std	Z+13, r25	; 0x0d
     758:	84 87       	std	Z+12, r24	; 0x0c
     75a:	80 91 40 02 	lds	r24, 0x0240
     75e:	90 91 41 02 	lds	r25, 0x0241
     762:	a0 91 42 02 	lds	r26, 0x0242
     766:	b0 91 43 02 	lds	r27, 0x0243
     76a:	86 87       	std	Z+14, r24	; 0x0e
     76c:	97 87       	std	Z+15, r25	; 0x0f
     76e:	a0 8b       	std	Z+16, r26	; 0x10
     770:	b1 8b       	std	Z+17, r27	; 0x11
     772:	0e 94 4e 11 	call	0x229c	; 0x229c <sprintf>
		uart2_puts(output);
     776:	8d b7       	in	r24, 0x3d	; 61
     778:	9e b7       	in	r25, 0x3e	; 62
     77a:	42 96       	adiw	r24, 0x12	; 18
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	9e bf       	out	0x3e, r25	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	8d bf       	out	0x3d, r24	; 61
     786:	c8 01       	movw	r24, r16
     788:	0e 94 ce 06 	call	0xd9c	; 0xd9c <uart2_puts>





}
     78c:	cf 5b       	subi	r28, 0xBF	; 191
     78e:	df 4f       	sbci	r29, 0xFF	; 255
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	cf 91       	pop	r28
     79c:	df 91       	pop	r29
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <port_init>:

}

void port_init()
{
	lcd_port_config();
     7a4:	0e 94 27 04 	call	0x84e	; 0x84e <lcd_port_config>
	adc_pin_config();
     7a8:	0e 94 73 05 	call	0xae6	; 0xae6 <adc_pin_config>
	motion_pin_config();
     7ac:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motion_pin_config>
	posencoder_init();
     7b0:	0e 94 21 06 	call	0xc42	; 0xc42 <posencoder_init>
	Timer4_Init();
     7b4:	0e 94 57 01 	call	0x2ae	; 0x2ae <Timer4_Init>
	
 
}
     7b8:	08 95       	ret

000007ba <init_devices>:
void init_devices (void)
{
 cli(); //Clears the global interrupts
     7ba:	f8 94       	cli
 port_init();
     7bc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <port_init>

 sei();   //Enables the global interrupts
     7c0:	78 94       	sei
}		
     7c2:	08 95       	ret

000007c4 <main>:
     

}

int main(void)
{ 
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
	
	init_devices();
     7c8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <init_devices>
	lcd_set_4bit();
     7cc:	0e 94 2e 04 	call	0x85c	; 0x85c <lcd_set_4bit>
	lcd_init();
     7d0:	0e 94 81 04 	call	0x902	; 0x902 <lcd_init>
	adc_init();
     7d4:	0e 94 97 05 	call	0xb2e	; 0xb2e <adc_init>
	 uart2_init();
     7d8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <uart2_init>
	//motor_test();
	unsigned char sharp, distance, adc_reading;
	unsigned int value;
	current_time=0;
     7dc:	10 92 40 02 	sts	0x0240, r1
     7e0:	10 92 41 02 	sts	0x0241, r1
     7e4:	10 92 42 02 	sts	0x0242, r1
     7e8:	10 92 43 02 	sts	0x0243, r1
	
	while(1)
	{
	
	
		char * cin=get_data();
     7ec:	0e 94 12 07 	call	0xe24	; 0xe24 <get_data>
     7f0:	8c 01       	movw	r16, r24
		int duration=command_data(cin);
     7f2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <command_data>
     7f6:	bc 01       	movw	r22, r24
		exec_motion_cmd(cin[0],duration);
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 81       	ld	r24, Z
     7fc:	0e 94 b8 01 	call	0x370	; 0x370 <exec_motion_cmd>

 
		odo_points[0]= odo_points[0]+getPosLeftCount();
     800:	00 91 3c 02 	lds	r16, 0x023C
     804:	10 91 3d 02 	lds	r17, 0x023D
     808:	0e 94 92 06 	call	0xd24	; 0xd24 <getPosLeftCount>
     80c:	06 0f       	add	r16, r22
     80e:	17 1f       	adc	r17, r23
     810:	10 93 3d 02 	sts	0x023D, r17
     814:	00 93 3c 02 	sts	0x023C, r16
		odo_points[1]= odo_points[1]+getPosRightCount();
     818:	00 91 3e 02 	lds	r16, 0x023E
     81c:	10 91 3f 02 	lds	r17, 0x023F
     820:	0e 94 9b 06 	call	0xd36	; 0xd36 <getPosRightCount>
     824:	06 0f       	add	r16, r22
     826:	17 1f       	adc	r17, r23
     828:	10 93 3f 02 	sts	0x023F, r17
     82c:	00 93 3e 02 	sts	0x023E, r16
		sense_objects();
     830:	0e 94 27 03 	call	0x64e	; 0x64e <sense_objects>
		
		
		send_data_over_serial();
     834:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <send_data_over_serial>
		
		lcd_print(2,2,  current_time,5);
     838:	40 91 40 02 	lds	r20, 0x0240
     83c:	50 91 41 02 	lds	r21, 0x0241
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	25 e0       	ldi	r18, 0x05	; 5
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <lcd_print>
     84c:	cf cf       	rjmp	.-98     	; 0x7ec <main+0x28>

0000084e <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     84e:	87 b1       	in	r24, 0x07	; 7
     850:	87 6f       	ori	r24, 0xF7	; 247
     852:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     854:	88 b1       	in	r24, 0x08	; 8
     856:	80 78       	andi	r24, 0x80	; 128
     858:	88 b9       	out	0x08, r24	; 8
}
     85a:	08 95       	ret

0000085c <lcd_set_4bit>:
     85c:	26 e6       	ldi	r18, 0x66	; 102
     85e:	3e e0       	ldi	r19, 0x0E	; 14
     860:	c9 01       	movw	r24, r18
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     866:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     868:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     86a:	40 e3       	ldi	r20, 0x30	; 48
     86c:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     86e:	42 9a       	sbi	0x08, 2	; 8
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	98 e4       	ldi	r25, 0x48	; 72
     874:	fc 01       	movw	r30, r24
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     87a:	42 98       	cbi	0x08, 2	; 8
     87c:	f9 01       	movw	r30, r18
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     882:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     884:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     886:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     888:	42 9a       	sbi	0x08, 2	; 8
     88a:	fc 01       	movw	r30, r24
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     890:	42 98       	cbi	0x08, 2	; 8
     892:	f9 01       	movw	r30, r18
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     898:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     89a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     89c:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     89e:	42 9a       	sbi	0x08, 2	; 8
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <lcd_set_4bit+0x44>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8a4:	42 98       	cbi	0x08, 2	; 8
     8a6:	c9 01       	movw	r24, r18
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8ac:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     8ae:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     8b0:	80 e2       	ldi	r24, 0x20	; 32
     8b2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     8b4:	42 9a       	sbi	0x08, 2	; 8
     8b6:	c9 01       	movw	r24, r18
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <lcd_set_4bit+0x5c>
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8bc:	42 98       	cbi	0x08, 2	; 8

	
}
     8be:	08 95       	ret

000008c0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     8c0:	98 b1       	in	r25, 0x08	; 8
     8c2:	9f 70       	andi	r25, 0x0F	; 15
     8c4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     8c6:	28 b1       	in	r18, 0x08	; 8
     8c8:	98 2f       	mov	r25, r24
     8ca:	90 7f       	andi	r25, 0xF0	; 240
     8cc:	92 2b       	or	r25, r18
     8ce:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     8d0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     8d2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     8d4:	42 9a       	sbi	0x08, 2	; 8
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	38 e4       	ldi	r19, 0x48	; 72
     8da:	f9 01       	movw	r30, r18
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     8e0:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     8e2:	98 b1       	in	r25, 0x08	; 8
     8e4:	9f 70       	andi	r25, 0x0F	; 15
     8e6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     8e8:	98 b1       	in	r25, 0x08	; 8
     8ea:	82 95       	swap	r24
     8ec:	80 7f       	andi	r24, 0xF0	; 240
     8ee:	98 2b       	or	r25, r24
     8f0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     8f2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     8f4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     8f6:	42 9a       	sbi	0x08, 2	; 8
     8f8:	c9 01       	movw	r24, r18
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     8fe:	42 98       	cbi	0x08, 2	; 8
}
     900:	08 95       	ret

00000902 <lcd_init>:
     902:	86 e6       	ldi	r24, 0x66	; 102
     904:	9e e0       	ldi	r25, 0x0E	; 14
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     90a:	88 e2       	ldi	r24, 0x28	; 40
     90c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
	lcd_wr_command(0x01);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
	lcd_wr_command(0x06);
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     91c:	8e e0       	ldi	r24, 0x0E	; 14
     91e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
	lcd_wr_command(0x80);
     922:	80 e8       	ldi	r24, 0x80	; 128
     924:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
		
}
     928:	08 95       	ret

0000092a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     92a:	98 b1       	in	r25, 0x08	; 8
     92c:	9f 70       	andi	r25, 0x0F	; 15
     92e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     930:	28 b1       	in	r18, 0x08	; 8
     932:	98 2f       	mov	r25, r24
     934:	90 7f       	andi	r25, 0xF0	; 240
     936:	92 2b       	or	r25, r18
     938:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     93a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     93c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     93e:	42 9a       	sbi	0x08, 2	; 8
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	38 e4       	ldi	r19, 0x48	; 72
     944:	f9 01       	movw	r30, r18
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     94a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     94c:	98 b1       	in	r25, 0x08	; 8
     94e:	9f 70       	andi	r25, 0x0F	; 15
     950:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     952:	98 b1       	in	r25, 0x08	; 8
     954:	82 95       	swap	r24
     956:	80 7f       	andi	r24, 0xF0	; 240
     958:	98 2b       	or	r25, r24
     95a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     95c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     95e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     960:	42 9a       	sbi	0x08, 2	; 8
     962:	c9 01       	movw	r24, r18
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     968:	42 98       	cbi	0x08, 2	; 8
}
     96a:	08 95       	ret

0000096c <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
}
     972:	08 95       	ret

00000974 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
     97a:	03 c0       	rjmp	.+6      	; 0x982 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     97c:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
		str++;
     980:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     982:	88 81       	ld	r24, Y
     984:	88 23       	and	r24, r24
     986:	d1 f7       	brne	.-12     	; 0x97c <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	69 f0       	breq	.+26     	; 0x9ac <lcd_cursor+0x1e>
     992:	83 30       	cpi	r24, 0x03	; 3
     994:	18 f4       	brcc	.+6      	; 0x99c <lcd_cursor+0xe>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	a9 f4       	brne	.+42     	; 0x9c4 <lcd_cursor+0x36>
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <lcd_cursor+0x18>
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	49 f0       	breq	.+18     	; 0x9b2 <lcd_cursor+0x24>
     9a0:	84 30       	cpi	r24, 0x04	; 4
     9a2:	81 f4       	brne	.+32     	; 0x9c4 <lcd_cursor+0x36>
     9a4:	0b c0       	rjmp	.+22     	; 0x9bc <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     9a6:	86 2f       	mov	r24, r22
     9a8:	81 58       	subi	r24, 0x81	; 129
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     9ac:	86 2f       	mov	r24, r22
     9ae:	81 54       	subi	r24, 0x41	; 65
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     9b2:	86 2f       	mov	r24, r22
     9b4:	8d 56       	subi	r24, 0x6D	; 109
     9b6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
     9ba:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     9bc:	86 2f       	mov	r24, r22
     9be:	8d 52       	subi	r24, 0x2D	; 45
     9c0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <lcd_wr_command>
     9c4:	08 95       	ret

000009c6 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	8a 01       	movw	r16, r20
     9d0:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     9d2:	88 23       	and	r24, r24
     9d4:	11 f0       	breq	.+4      	; 0x9da <lcd_print+0x14>
     9d6:	66 23       	and	r22, r22
     9d8:	19 f4       	brne	.+6      	; 0x9e0 <lcd_print+0x1a>
	{
		lcd_home();
     9da:	0e 94 b6 04 	call	0x96c	; 0x96c <lcd_home>
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     9e0:	0e 94 c7 04 	call	0x98e	; 0x98e <lcd_cursor>
	}
	if(digits==5 || flag==1)
     9e4:	c5 30       	cpi	r28, 0x05	; 5
     9e6:	d1 05       	cpc	r29, r1
     9e8:	71 f4       	brne	.+28     	; 0xa06 <lcd_print+0x40>
	{
		million=value/10000+48;
     9ea:	c8 01       	movw	r24, r16
     9ec:	60 e1       	ldi	r22, 0x10	; 16
     9ee:	77 e2       	ldi	r23, 0x27	; 39
     9f0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     9f4:	cb 01       	movw	r24, r22
     9f6:	c0 96       	adiw	r24, 0x30	; 48
     9f8:	90 93 75 02 	sts	0x0275, r25
     9fc:	80 93 74 02 	sts	0x0274, r24
		lcd_wr_char(million);
     a00:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     a06:	c4 30       	cpi	r28, 0x04	; 4
     a08:	d1 05       	cpc	r29, r1
     a0a:	11 f0       	breq	.+4      	; 0xa10 <lcd_print+0x4a>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	16 c0       	rjmp	.+44     	; 0xa3c <lcd_print+0x76>
	{
		temp = value/1000;
     a10:	c8 01       	movw	r24, r16
     a12:	68 ee       	ldi	r22, 0xE8	; 232
     a14:	73 e0       	ldi	r23, 0x03	; 3
     a16:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     a1a:	cb 01       	movw	r24, r22
     a1c:	60 93 76 02 	sts	0x0276, r22
     a20:	90 93 77 02 	sts	0x0277, r25
		thousand = temp%10 + 48;
     a24:	6a e0       	ldi	r22, 0x0A	; 10
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     a2c:	c0 96       	adiw	r24, 0x30	; 48
     a2e:	90 93 7f 02 	sts	0x027F, r25
     a32:	80 93 7e 02 	sts	0x027E, r24
		lcd_wr_char(thousand);
     a36:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     a3c:	c3 30       	cpi	r28, 0x03	; 3
     a3e:	d1 05       	cpc	r29, r1
     a40:	21 f0       	breq	.+8      	; 0xa4a <lcd_print+0x84>
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	11 f0       	breq	.+4      	; 0xa4a <lcd_print+0x84>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	16 c0       	rjmp	.+44     	; 0xa76 <lcd_print+0xb0>
	{
		temp = value/100;
     a4a:	c8 01       	movw	r24, r16
     a4c:	64 e6       	ldi	r22, 0x64	; 100
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     a54:	cb 01       	movw	r24, r22
     a56:	60 93 76 02 	sts	0x0276, r22
     a5a:	90 93 77 02 	sts	0x0277, r25
		hundred = temp%10 + 48;
     a5e:	6a e0       	ldi	r22, 0x0A	; 10
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     a66:	c0 96       	adiw	r24, 0x30	; 48
     a68:	90 93 7b 02 	sts	0x027B, r25
     a6c:	80 93 7a 02 	sts	0x027A, r24
		lcd_wr_char(hundred);
     a70:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
     a74:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     a76:	c2 30       	cpi	r28, 0x02	; 2
     a78:	d1 05       	cpc	r29, r1
     a7a:	21 f0       	breq	.+8      	; 0xa84 <lcd_print+0xbe>
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	11 f0       	breq	.+4      	; 0xa84 <lcd_print+0xbe>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	16 c0       	rjmp	.+44     	; 0xab0 <lcd_print+0xea>
	{
		temp = value/10;
     a84:	c8 01       	movw	r24, r16
     a86:	6a e0       	ldi	r22, 0x0A	; 10
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     a8e:	cb 01       	movw	r24, r22
     a90:	60 93 76 02 	sts	0x0276, r22
     a94:	90 93 77 02 	sts	0x0277, r25
		tens = temp%10 + 48;
     a98:	6a e0       	ldi	r22, 0x0A	; 10
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     aa0:	c0 96       	adiw	r24, 0x30	; 48
     aa2:	90 93 79 02 	sts	0x0279, r25
     aa6:	80 93 78 02 	sts	0x0278, r24
		lcd_wr_char(tens);
     aaa:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
     aae:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     ab0:	c1 30       	cpi	r28, 0x01	; 1
     ab2:	d1 05       	cpc	r29, r1
     ab4:	11 f0       	breq	.+4      	; 0xaba <lcd_print+0xf4>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	61 f4       	brne	.+24     	; 0xad2 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     aba:	c8 01       	movw	r24, r16
     abc:	6a e0       	ldi	r22, 0x0A	; 10
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodhi4>
     ac4:	c0 96       	adiw	r24, 0x30	; 48
     ac6:	90 93 7d 02 	sts	0x027D, r25
     aca:	80 93 7c 02 	sts	0x027C, r24
		lcd_wr_char(unit);
     ace:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
	}
	if(digits>5)
     ad2:	26 97       	sbiw	r28, 0x06	; 6
     ad4:	1c f0       	brlt	.+6      	; 0xadc <lcd_print+0x116>
	{
		lcd_wr_char('E');
     ad6:	85 e4       	ldi	r24, 0x45	; 69
     ad8:	0e 94 95 04 	call	0x92a	; 0x92a <lcd_wr_char>
	}
	
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <adc_pin_config>:
float BATT_Voltage, BATT_V;


void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
     ae6:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     ae8:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
     aea:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     aee:	10 92 08 01 	sts	0x0108, r1
}
     af2:	08 95       	ret

00000af4 <ADC_Conversion>:


//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
     af4:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     af6:	88 30       	cpi	r24, 0x08	; 8
     af8:	18 f0       	brcs	.+6      	; 0xb00 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     b00:	97 70       	andi	r25, 0x07	; 7
     b02:	90 62       	ori	r25, 0x20	; 32
     b04:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     b08:	80 91 7a 00 	lds	r24, 0x007A
     b0c:	80 64       	ori	r24, 0x40	; 64
     b0e:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     b12:	80 91 7a 00 	lds	r24, 0x007A
     b16:	84 ff       	sbrs	r24, 4
     b18:	fc cf       	rjmp	.-8      	; 0xb12 <ADC_Conversion+0x1e>
	a=ADCH;
     b1a:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     b1e:	90 91 7a 00 	lds	r25, 0x007A
     b22:	90 61       	ori	r25, 0x10	; 16
     b24:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     b28:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     b2c:	08 95       	ret

00000b2e <adc_init>:
	return distanceInt;
}
//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
     b2e:	ea e7       	ldi	r30, 0x7A	; 122
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     b34:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     b38:	80 e2       	ldi	r24, 0x20	; 32
     b3a:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     b3e:	80 e8       	ldi	r24, 0x80	; 128
     b40:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     b42:	86 e8       	ldi	r24, 0x86	; 134
     b44:	80 83       	st	Z, r24
}
     b46:	08 95       	ret

00000b48 <Sharp_GP2D12_estimation>:
}
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 03 13 	call	0x2606	; 0x2606 <__floatunsisf>
     b56:	2f ee       	ldi	r18, 0xEF	; 239
     b58:	39 ec       	ldi	r19, 0xC9	; 201
     b5a:	43 e9       	ldi	r20, 0x93	; 147
     b5c:	5f e3       	ldi	r21, 0x3F	; 63
     b5e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <pow>
     b62:	9b 01       	movw	r18, r22
     b64:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	80 e8       	ldi	r24, 0x80	; 128
     b6c:	9f e3       	ldi	r25, 0x3F	; 63
     b6e:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
     b72:	2a e9       	ldi	r18, 0x9A	; 154
     b74:	39 ef       	ldi	r19, 0xF9	; 249
     b76:	4e e2       	ldi	r20, 0x2E	; 46
     b78:	55 e4       	ldi	r21, 0x45	; 69
     b7a:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e2       	ldi	r20, 0x20	; 32
     b84:	51 e4       	ldi	r21, 0x41	; 65
     b86:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
     b8a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <__fixsfsi>
     b8e:	88 27       	eor	r24, r24
     b90:	77 fd       	sbrc	r23, 7
     b92:	80 95       	com	r24
     b94:	98 2f       	mov	r25, r24
     b96:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
     b9a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <__fixsfsi>
     b9e:	9b 01       	movw	r18, r22
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	61 32       	cpi	r22, 0x21	; 33
     ba4:	78 07       	cpc	r23, r24
     ba6:	10 f0       	brcs	.+4      	; 0xbac <Sharp_GP2D12_estimation+0x64>
     ba8:	20 e2       	ldi	r18, 0x20	; 32
     baa:	33 e0       	ldi	r19, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
     bac:	c9 01       	movw	r24, r18
     bae:	08 95       	ret

00000bb0 <motion_pin_config>:
#include  "motor.h"

void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     bb0:	81 b1       	in	r24, 0x01	; 1
     bb2:	8f 60       	ori	r24, 0x0F	; 15
     bb4:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     bb6:	82 b1       	in	r24, 0x02	; 2
     bb8:	80 7f       	andi	r24, 0xF0	; 240
     bba:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     bbc:	ea e0       	ldi	r30, 0x0A	; 10
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	80 81       	ld	r24, Z
     bc2:	88 61       	ori	r24, 0x18	; 24
     bc4:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     bc6:	eb e0       	ldi	r30, 0x0B	; 11
     bc8:	f1 e0       	ldi	r31, 0x01	; 1
     bca:	80 81       	ld	r24, Z
     bcc:	88 61       	ori	r24, 0x18	; 24
     bce:	80 83       	st	Z, r24
}
     bd0:	08 95       	ret

00000bd2 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     bd2:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     bd4:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     bd6:	8f 70       	andi	r24, 0x0F	; 15
     bd8:	89 2b       	or	r24, r25
 PORTA = PortARestore; 			// setting the command to the port
     bda:	82 b9       	out	0x02, r24	; 2
}
     bdc:	08 95       	ret

00000bde <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     bde:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     be0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     be2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     be4:	82 b9       	out	0x02, r24	; 2


void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     be6:	08 95       	ret

00000be8 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     be8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     bea:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     bec:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     bee:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     bf0:	08 95       	ret

00000bf2 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     bf2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     bf4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     bf6:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 			// setting the command to the port
     bf8:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     bfa:	08 95       	ret

00000bfc <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     bfc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     bfe:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     c00:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 			// setting the command to the port
     c02:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     c04:	08 95       	ret

00000c06 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     c06:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     c08:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     c0a:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 			// setting the command to the port
     c0c:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     c0e:	08 95       	ret

00000c10 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     c10:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     c12:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     c14:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 			// setting the command to the port
     c16:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     c18:	08 95       	ret

00000c1a <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     c1a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     c1c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     c1e:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 			// setting the command to the port
     c20:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     c22:	08 95       	ret

00000c24 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     c24:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     c26:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     c28:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 			// setting the command to the port
     c2a:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     c2c:	08 95       	ret

00000c2e <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     c2e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     c30:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     c32:	82 b9       	out	0x02, r24	; 2
}

void stop (void) //hard stop
{
  motion_set(0x00);
}
     c34:	08 95       	ret

00000c36 <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     c36:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     c38:	74 9a       	sbi	0x0e, 4	; 14
}
     c3a:	08 95       	ret

00000c3c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     c3c:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     c3e:	75 9a       	sbi	0x0e, 5	; 14
}
     c40:	08 95       	ret

00000c42 <posencoder_init>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     c42:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     c44:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     c46:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     c48:	75 9a       	sbi	0x0e, 5	; 14

}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     c4a:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     c4c:	ea e6       	ldi	r30, 0x6A	; 106
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     c56:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     c58:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     c5a:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     c5c:	ea e6       	ldi	r30, 0x6A	; 106
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 60       	ori	r24, 0x08	; 8
     c64:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     c66:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     c68:	78 94       	sei
 left_encoder_pin_config(); //left encoder pin config
 right_encoder_pin_config(); //right encoder pin config	
 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();

}
     c6a:	08 95       	ret

00000c6c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     c6c:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     c6e:	ea e6       	ldi	r30, 0x6A	; 106
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	82 60       	ori	r24, 0x02	; 2
     c76:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     c78:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     c7a:	78 94       	sei
}
     c7c:	08 95       	ret

00000c7e <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     c7e:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     c80:	ea e6       	ldi	r30, 0x6A	; 106
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	88 60       	ori	r24, 0x08	; 8
     c88:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     c8a:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     c8c:	78 94       	sei
}
     c8e:	08 95       	ret

00000c90 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     ca2:	80 91 48 02 	lds	r24, 0x0248
     ca6:	90 91 49 02 	lds	r25, 0x0249
     caa:	a0 91 4a 02 	lds	r26, 0x024A
     cae:	b0 91 4b 02 	lds	r27, 0x024B
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	a1 1d       	adc	r26, r1
     cb6:	b1 1d       	adc	r27, r1
     cb8:	80 93 48 02 	sts	0x0248, r24
     cbc:	90 93 49 02 	sts	0x0249, r25
     cc0:	a0 93 4a 02 	sts	0x024A, r26
     cc4:	b0 93 4b 02 	sts	0x024B, r27
}
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     cec:	80 91 44 02 	lds	r24, 0x0244
     cf0:	90 91 45 02 	lds	r25, 0x0245
     cf4:	a0 91 46 02 	lds	r26, 0x0246
     cf8:	b0 91 47 02 	lds	r27, 0x0247
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	a1 1d       	adc	r26, r1
     d00:	b1 1d       	adc	r27, r1
     d02:	80 93 44 02 	sts	0x0244, r24
     d06:	90 93 45 02 	sts	0x0245, r25
     d0a:	a0 93 46 02 	sts	0x0246, r26
     d0e:	b0 93 47 02 	sts	0x0247, r27
}
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <getPosLeftCount>:

unsigned long int getPosLeftCount()
{
     d24:	60 91 44 02 	lds	r22, 0x0244
     d28:	70 91 45 02 	lds	r23, 0x0245
	return  ShaftCountLeft;
}
     d2c:	80 91 46 02 	lds	r24, 0x0246
     d30:	90 91 47 02 	lds	r25, 0x0247
     d34:	08 95       	ret

00000d36 <getPosRightCount>:

unsigned long int getPosRightCount()
{
     d36:	60 91 48 02 	lds	r22, 0x0248
     d3a:	70 91 49 02 	lds	r23, 0x0249
	return  ShaftCountRight;
}
     d3e:	80 91 4a 02 	lds	r24, 0x024A
     d42:	90 91 4b 02 	lds	r25, 0x024B
     d46:	08 95       	ret

00000d48 <clearPosCounters>:

void clearPosCounters()
{
	ShaftCountLeft=0;
     d48:	10 92 44 02 	sts	0x0244, r1
     d4c:	10 92 45 02 	sts	0x0245, r1
     d50:	10 92 46 02 	sts	0x0246, r1
     d54:	10 92 47 02 	sts	0x0247, r1
	ShaftCountRight=0;
     d58:	10 92 48 02 	sts	0x0248, r1
     d5c:	10 92 49 02 	sts	0x0249, r1
     d60:	10 92 4a 02 	sts	0x024A, r1
     d64:	10 92 4b 02 	sts	0x024B, r1
}
     d68:	08 95       	ret

00000d6a <travelledDistance>:

unsigned long int travelledDistance()
{

	
}
     d6a:	08 95       	ret

00000d6c <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     d6c:	e1 ed       	ldi	r30, 0xD1	; 209
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     d72:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     d76:	86 e0       	ldi	r24, 0x06	; 6
     d78:	80 93 d2 00 	sts	0x00D2, r24
 //UBRR2L = 0x5F; //set baud rate lo
 UBRR2L = 0x07;
     d7c:	87 e0       	ldi	r24, 0x07	; 7
     d7e:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     d82:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     d86:	88 e9       	ldi	r24, 0x98	; 152
     d88:	80 83       	st	Z, r24
}
     d8a:	08 95       	ret

00000d8c <send_char>:


void send_char(char c)
{
     d8c:	98 2f       	mov	r25, r24
	while ((UCSR2A & (1 << UDRE2)) == 0) {};
     d8e:	80 91 d0 00 	lds	r24, 0x00D0
     d92:	85 ff       	sbrs	r24, 5
     d94:	fc cf       	rjmp	.-8      	; 0xd8e <send_char+0x2>
	UDR2 = c;
     d96:	90 93 d6 00 	sts	0x00D6, r25
}
     d9a:	08 95       	ret

00000d9c <uart2_puts>:


void uart2_puts(char s[])
{
     d9c:	fc 01       	movw	r30, r24
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <uart2_puts+0x12>
}


void send_char(char c)
{
	while ((UCSR2A & (1 << UDRE2)) == 0) {};
     da0:	80 91 d0 00 	lds	r24, 0x00D0
     da4:	85 ff       	sbrs	r24, 5
     da6:	fc cf       	rjmp	.-8      	; 0xda0 <uart2_puts+0x4>
	UDR2 = c;
     da8:	90 93 d6 00 	sts	0x00D6, r25
     dac:	31 96       	adiw	r30, 0x01	; 1

void uart2_puts(char s[])
{
	int i =0;
	
	while (s[i] != 0x00)
     dae:	90 81       	ld	r25, Z
     db0:	99 23       	and	r25, r25
     db2:	b1 f7       	brne	.-20     	; 0xda0 <uart2_puts+0x4>
	{
		send_char(s[i]);
		i++;
	}
}
     db4:	08 95       	ret

00000db6 <__vector_51>:


SIGNAL(SIG_USART2_RECV)
 {
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	0b b6       	in	r0, 0x3b	; 59
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
	   // Get data from the USART in register
	   data_in[data_count] = UDR2;
     dd0:	20 91 4c 02 	lds	r18, 0x024C
     dd4:	30 91 4d 02 	lds	r19, 0x024D
     dd8:	80 91 d6 00 	lds	r24, 0x00D6
     ddc:	f9 01       	movw	r30, r18
     dde:	e2 57       	subi	r30, 0x72	; 114
     de0:	fd 4f       	sbci	r31, 0xFD	; 253
     de2:	80 83       	st	Z, r24

	   if (data_in[data_count] == '\n')
     de4:	8a 30       	cpi	r24, 0x0A	; 10
     de6:	59 f4       	brne	.+22     	; 0xdfe <__vector_51+0x48>
	    {
		   
		   
		   
		   command_ready = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	90 93 4f 02 	sts	0x024F, r25
     df0:	80 93 4e 02 	sts	0x024E, r24
		   // Reset to 0, ready to go again

		   data_count = 0;
     df4:	10 92 4d 02 	sts	0x024D, r1
     df8:	10 92 4c 02 	sts	0x024C, r1
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <__vector_51+0x54>
		} 
		   else 
		   {
		   data_count++;
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	30 93 4d 02 	sts	0x024D, r19
     e06:	20 93 4c 02 	sts	0x024C, r18
	       }
 }
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	3f 91       	pop	r19
     e14:	2f 91       	pop	r18
     e16:	0f 90       	pop	r0
     e18:	0b be       	out	0x3b, r0	; 59
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <get_data>:
 
 
char *get_data()
{
	if(command_ready==1)
     e24:	80 91 4e 02 	lds	r24, 0x024E
     e28:	90 91 4f 02 	lds	r25, 0x024F
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	19 f0       	breq	.+6      	; 0xe36 <get_data+0x12>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <get_data+0x1e>
	{

		command_ready=0;
     e36:	10 92 4f 02 	sts	0x024F, r1
     e3a:	10 92 4e 02 	sts	0x024E, r1
     e3e:	2e e8       	ldi	r18, 0x8E	; 142
     e40:	32 e0       	ldi	r19, 0x02	; 2

	}
	else
		return '\0';

}        
     e42:	c9 01       	movw	r24, r18
     e44:	08 95       	ret

00000e46 <normalize_weight>:

}



void normalize_weight(particle** particles, float total_weight){
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	5c 01       	movw	r10, r24
     e5c:	6a 01       	movw	r12, r20
     e5e:	7b 01       	movw	r14, r22
     e60:	c0 e0       	ldi	r28, 0x00	; 0
     e62:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0; i<NUM_PARTICLE; i++){
		particles[i]->weight = particles[i]->weight/total_weight;
     e64:	f5 01       	movw	r30, r10
     e66:	ec 0f       	add	r30, r28
     e68:	fd 1f       	adc	r31, r29
     e6a:	00 81       	ld	r16, Z
     e6c:	11 81       	ldd	r17, Z+1	; 0x01
     e6e:	f8 01       	movw	r30, r16
     e70:	64 89       	ldd	r22, Z+20	; 0x14
     e72:	75 89       	ldd	r23, Z+21	; 0x15
     e74:	86 89       	ldd	r24, Z+22	; 0x16
     e76:	97 89       	ldd	r25, Z+23	; 0x17
     e78:	a7 01       	movw	r20, r14
     e7a:	96 01       	movw	r18, r12
     e7c:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
     e80:	f8 01       	movw	r30, r16
     e82:	64 8b       	std	Z+20, r22	; 0x14
     e84:	75 8b       	std	Z+21, r23	; 0x15
     e86:	86 8b       	std	Z+22, r24	; 0x16
     e88:	97 8b       	std	Z+23, r25	; 0x17
     e8a:	22 96       	adiw	r28, 0x02	; 2



void normalize_weight(particle** particles, float total_weight){
	int i;
	for(i=0; i<NUM_PARTICLE; i++){
     e8c:	c8 3c       	cpi	r28, 0xC8	; 200
     e8e:	d1 05       	cpc	r29, r1
     e90:	49 f7       	brne	.-46     	; 0xe64 <normalize_weight+0x1e>
		particles[i]->weight = particles[i]->weight/total_weight;
	}

}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	08 95       	ret

00000ea8 <copy_particle>:
	//printf("returning X from gaussrand=%f\n", X);
	return X;
}

int copy_particle(particle* dst, particle* src)
{
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	ec 01       	movw	r28, r24
     eae:	fb 01       	movw	r30, r22
	if(dst == NULL || src == NULL)
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	b1 f1       	breq	.+108    	; 0xf20 <copy_particle+0x78>
     eb4:	61 15       	cp	r22, r1
     eb6:	71 05       	cpc	r23, r1
     eb8:	99 f1       	breq	.+102    	; 0xf20 <copy_particle+0x78>
	{
		//printf("copy_particle: either src or dst pointer is null.\n");
		return NULL_POINTER_ENCOUNTERED;
	}
	dst->x = src->x;
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	a2 81       	ldd	r26, Z+2	; 0x02
     ec0:	b3 81       	ldd	r27, Z+3	; 0x03
     ec2:	88 83       	st	Y, r24
     ec4:	99 83       	std	Y+1, r25	; 0x01
     ec6:	aa 83       	std	Y+2, r26	; 0x02
     ec8:	bb 83       	std	Y+3, r27	; 0x03
	dst->y = src->y;
     eca:	84 81       	ldd	r24, Z+4	; 0x04
     ecc:	95 81       	ldd	r25, Z+5	; 0x05
     ece:	a6 81       	ldd	r26, Z+6	; 0x06
     ed0:	b7 81       	ldd	r27, Z+7	; 0x07
     ed2:	8c 83       	std	Y+4, r24	; 0x04
     ed4:	9d 83       	std	Y+5, r25	; 0x05
     ed6:	ae 83       	std	Y+6, r26	; 0x06
     ed8:	bf 83       	std	Y+7, r27	; 0x07
	dst->vx = src->vx;
     eda:	80 85       	ldd	r24, Z+8	; 0x08
     edc:	91 85       	ldd	r25, Z+9	; 0x09
     ede:	a2 85       	ldd	r26, Z+10	; 0x0a
     ee0:	b3 85       	ldd	r27, Z+11	; 0x0b
     ee2:	88 87       	std	Y+8, r24	; 0x08
     ee4:	99 87       	std	Y+9, r25	; 0x09
     ee6:	aa 87       	std	Y+10, r26	; 0x0a
     ee8:	bb 87       	std	Y+11, r27	; 0x0b
	dst->vy = src->vy;
     eea:	84 85       	ldd	r24, Z+12	; 0x0c
     eec:	95 85       	ldd	r25, Z+13	; 0x0d
     eee:	a6 85       	ldd	r26, Z+14	; 0x0e
     ef0:	b7 85       	ldd	r27, Z+15	; 0x0f
     ef2:	8c 87       	std	Y+12, r24	; 0x0c
     ef4:	9d 87       	std	Y+13, r25	; 0x0d
     ef6:	ae 87       	std	Y+14, r26	; 0x0e
     ef8:	bf 87       	std	Y+15, r27	; 0x0f
	dst->direction = src->direction;
     efa:	80 89       	ldd	r24, Z+16	; 0x10
     efc:	91 89       	ldd	r25, Z+17	; 0x11
     efe:	a2 89       	ldd	r26, Z+18	; 0x12
     f00:	b3 89       	ldd	r27, Z+19	; 0x13
     f02:	88 8b       	std	Y+16, r24	; 0x10
     f04:	99 8b       	std	Y+17, r25	; 0x11
     f06:	aa 8b       	std	Y+18, r26	; 0x12
     f08:	bb 8b       	std	Y+19, r27	; 0x13
	dst->weight = src->weight;
     f0a:	84 89       	ldd	r24, Z+20	; 0x14
     f0c:	95 89       	ldd	r25, Z+21	; 0x15
     f0e:	a6 89       	ldd	r26, Z+22	; 0x16
     f10:	b7 89       	ldd	r27, Z+23	; 0x17
     f12:	8c 8b       	std	Y+20, r24	; 0x14
     f14:	9d 8b       	std	Y+21, r25	; 0x15
     f16:	ae 8b       	std	Y+22, r26	; 0x16
     f18:	bf 8b       	std	Y+23, r27	; 0x17
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <copy_particle+0x7c>
	return SUCCESS;
     f20:	26 e0       	ldi	r18, 0x06	; 6
     f22:	30 e0       	ldi	r19, 0x00	; 0
}
     f24:	c9 01       	movw	r24, r18
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <print_particles>:
		//	printf("%d    %f    %f    %f    %f    %f    %f\n", i, particles[i]->x, particles[i]->y, particles[i]->vx, particles[i]->vy, particles[i]->direction, particles[i]->weight);
		}
	
	}

}
     f2c:	08 95       	ret

00000f2e <free_particles>:
	return SUCCESS;
}


int free_particles(particle** particles)
{
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	8c 01       	movw	r16, r24
	int i;
	if(particles == NULL)
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	19 f4       	brne	.+6      	; 0xf42 <free_particles+0x14>
     f3c:	26 e0       	ldi	r18, 0x06	; 6
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <free_particles+0x3c>
     f42:	c0 e0       	ldi	r28, 0x00	; 0
     f44:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("free_particles: particles pointer is null.\n");
		return NULL_POINTER_ENCOUNTERED;
	}
	for(i=0; i<NUM_PARTICLE; i++)
	{
		if(particles[i])
     f46:	f8 01       	movw	r30, r16
     f48:	ec 0f       	add	r30, r28
     f4a:	fd 1f       	adc	r31, r29
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	11 f0       	breq	.+4      	; 0xf58 <free_particles+0x2a>
		{
			free(particles[i]);
     f54:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <free>
     f58:	22 96       	adiw	r28, 0x02	; 2
	if(particles == NULL)
	{
		//printf("free_particles: particles pointer is null.\n");
		return NULL_POINTER_ENCOUNTERED;
	}
	for(i=0; i<NUM_PARTICLE; i++)
     f5a:	c8 3c       	cpi	r28, 0xC8	; 200
     f5c:	d1 05       	cpc	r29, r1
     f5e:	99 f7       	brne	.-26     	; 0xf46 <free_particles+0x18>
		if(particles[i])
		{
			free(particles[i]);
		}
	}
	free(particles);
     f60:	c8 01       	movw	r24, r16
     f62:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <free>
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
	return SUCCESS;
}
     f6a:	c9 01       	movw	r24, r18
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <gaussrand>:
	//printf("calculate_weight going out\n");
	return weight;
}

double gaussrand()
{
     f76:	6f 92       	push	r6
     f78:	7f 92       	push	r7
     f7a:	8f 92       	push	r8
     f7c:	9f 92       	push	r9
     f7e:	af 92       	push	r10
     f80:	bf 92       	push	r11
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
	static double V1, V2, S;
	static int phase = 0;
	double X;

	if(phase == 0) {
     f8e:	80 91 60 02 	lds	r24, 0x0260
     f92:	90 91 61 02 	lds	r25, 0x0261
     f96:	89 2b       	or	r24, r25
     f98:	09 f0       	breq	.+2      	; 0xf9c <gaussrand+0x26>
     f9a:	90 c0       	rjmp	.+288    	; 0x10bc <gaussrand+0x146>
		do {
			double U1 = (double)rand() / RAND_MAX;
     f9c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <rand>
     fa0:	7c 01       	movw	r14, r24
			double U2 = (double)rand() / RAND_MAX;
     fa2:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <rand>
     fa6:	5c 01       	movw	r10, r24

			V1 = 2 * U1 - 1;
     fa8:	00 27       	eor	r16, r16
     faa:	f7 fc       	sbrc	r15, 7
     fac:	00 95       	com	r16
     fae:	10 2f       	mov	r17, r16
     fb0:	c8 01       	movw	r24, r16
     fb2:	b7 01       	movw	r22, r14
     fb4:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	3e ef       	ldi	r19, 0xFE	; 254
     fbc:	4f ef       	ldi	r20, 0xFF	; 255
     fbe:	56 e4       	ldi	r21, 0x46	; 70
     fc0:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	5f e3       	ldi	r21, 0x3F	; 63
     fd4:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
     fd8:	3b 01       	movw	r6, r22
     fda:	4c 01       	movw	r8, r24
     fdc:	60 93 6a 02 	sts	0x026A, r22
     fe0:	70 93 6b 02 	sts	0x026B, r23
     fe4:	80 93 6c 02 	sts	0x026C, r24
     fe8:	90 93 6d 02 	sts	0x026D, r25
			V2 = 2 * U2 - 1;
     fec:	cc 24       	eor	r12, r12
     fee:	b7 fc       	sbrc	r11, 7
     ff0:	c0 94       	com	r12
     ff2:	dc 2c       	mov	r13, r12
     ff4:	c6 01       	movw	r24, r12
     ff6:	b5 01       	movw	r22, r10
     ff8:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	3e ef       	ldi	r19, 0xFE	; 254
    1000:	4f ef       	ldi	r20, 0xFF	; 255
    1002:	56 e4       	ldi	r21, 0x46	; 70
    1004:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
    101c:	7b 01       	movw	r14, r22
    101e:	8c 01       	movw	r16, r24
    1020:	60 93 66 02 	sts	0x0266, r22
    1024:	70 93 67 02 	sts	0x0267, r23
    1028:	80 93 68 02 	sts	0x0268, r24
    102c:	90 93 69 02 	sts	0x0269, r25
			S = V1 * V1 + V2 * V2;
    1030:	c4 01       	movw	r24, r8
    1032:	b3 01       	movw	r22, r6
    1034:	a4 01       	movw	r20, r8
    1036:	93 01       	movw	r18, r6
    1038:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    103c:	5b 01       	movw	r10, r22
    103e:	6c 01       	movw	r12, r24
    1040:	c8 01       	movw	r24, r16
    1042:	b7 01       	movw	r22, r14
    1044:	a8 01       	movw	r20, r16
    1046:	97 01       	movw	r18, r14
    1048:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	c6 01       	movw	r24, r12
    1052:	b5 01       	movw	r22, r10
    1054:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
    1058:	7b 01       	movw	r14, r22
    105a:	8c 01       	movw	r16, r24
    105c:	60 93 62 02 	sts	0x0262, r22
    1060:	70 93 63 02 	sts	0x0263, r23
    1064:	80 93 64 02 	sts	0x0264, r24
    1068:	90 93 65 02 	sts	0x0265, r25
			} while(S >= 1 || S == 0);
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__gesf2>
    1078:	87 ff       	sbrs	r24, 7
    107a:	90 cf       	rjmp	.-224    	; 0xf9c <gaussrand+0x26>
    107c:	c8 01       	movw	r24, r16
    107e:	b7 01       	movw	r22, r14
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	0e 94 35 12 	call	0x246a	; 0x246a <__cmpsf2>
    108c:	88 23       	and	r24, r24
    108e:	09 f4       	brne	.+2      	; 0x1092 <gaussrand+0x11c>
    1090:	85 cf       	rjmp	.-246    	; 0xf9c <gaussrand+0x26>

		X = V1 * sqrt(-2 * log(S) / S);
    1092:	c8 01       	movw	r24, r16
    1094:	b7 01       	movw	r22, r14
    1096:	0e 94 20 14 	call	0x2840	; 0x2840 <log>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 ec       	ldi	r21, 0xC0	; 192
    10a2:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    10a6:	a8 01       	movw	r20, r16
    10a8:	97 01       	movw	r18, r14
    10aa:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    10ae:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <sqrt>
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	c4 01       	movw	r24, r8
    10b8:	b3 01       	movw	r22, r6
    10ba:	20 c0       	rjmp	.+64     	; 0x10fc <gaussrand+0x186>
	} else
		X = V2 * sqrt(-2 * log(S) / S);
    10bc:	e0 90 62 02 	lds	r14, 0x0262
    10c0:	f0 90 63 02 	lds	r15, 0x0263
    10c4:	00 91 64 02 	lds	r16, 0x0264
    10c8:	10 91 65 02 	lds	r17, 0x0265
    10cc:	c8 01       	movw	r24, r16
    10ce:	b7 01       	movw	r22, r14
    10d0:	0e 94 20 14 	call	0x2840	; 0x2840 <log>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 ec       	ldi	r21, 0xC0	; 192
    10dc:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    10e0:	a8 01       	movw	r20, r16
    10e2:	97 01       	movw	r18, r14
    10e4:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    10e8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <sqrt>
    10ec:	20 91 66 02 	lds	r18, 0x0266
    10f0:	30 91 67 02 	lds	r19, 0x0267
    10f4:	40 91 68 02 	lds	r20, 0x0268
    10f8:	50 91 69 02 	lds	r21, 0x0269
    10fc:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    1100:	f6 2f       	mov	r31, r22
    1102:	e7 2f       	mov	r30, r23
    1104:	78 2f       	mov	r23, r24
    1106:	69 2f       	mov	r22, r25

	phase = 1 - phase;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	20 91 60 02 	lds	r18, 0x0260
    1110:	30 91 61 02 	lds	r19, 0x0261
    1114:	82 1b       	sub	r24, r18
    1116:	93 0b       	sbc	r25, r19
    1118:	90 93 61 02 	sts	0x0261, r25
    111c:	80 93 60 02 	sts	0x0260, r24
	//printf("returning X from gaussrand=%f\n", X);
	return X;
}
    1120:	2f 2f       	mov	r18, r31
    1122:	3e 2f       	mov	r19, r30
    1124:	47 2f       	mov	r20, r23
    1126:	56 2f       	mov	r21, r22
    1128:	b9 01       	movw	r22, r18
    112a:	ca 01       	movw	r24, r20
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	7f 90       	pop	r7
    1142:	6f 90       	pop	r6
    1144:	08 95       	ret

00001146 <sense>:
	free_particles(particles);
	particles = resampled;
	//print_particles(particles);
}

void sense(float x, float y, float direction, float* measurement_ref,unsigned int  ** sensed){
    1146:	2f 92       	push	r2
    1148:	3f 92       	push	r3
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <sense+0x26>
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	1b 01       	movw	r2, r22
    1174:	2c 01       	movw	r4, r24
    1176:	39 01       	movw	r6, r18
    1178:	4a 01       	movw	r8, r20
    117a:	ba 82       	std	Y+2, r11	; 0x02
    117c:	a9 82       	std	Y+1, r10	; 0x01
    117e:	56 01       	movw	r10, r12
    1180:	1c 82       	std	Y+4, r1	; 0x04
    1182:	1b 82       	std	Y+3, r1	; 0x03
	int i;
	
	for(i=0; i<REFERENCE_POINTS; i++){
		float dist_from_ref = sqrt(pow((x-sensed[i][0]), 2) + pow((y-sensed[i][1]), 2));
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	e8 0f       	add	r30, r24
    118e:	f9 1f       	adc	r31, r25
    1190:	c0 80       	ld	r12, Z
    1192:	d1 80       	ldd	r13, Z+1	; 0x01
    1194:	d6 01       	movw	r26, r12
    1196:	6d 91       	ld	r22, X+
    1198:	7c 91       	ld	r23, X
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 03 13 	call	0x2606	; 0x2606 <__floatunsisf>
    11a2:	9b 01       	movw	r18, r22
    11a4:	ac 01       	movw	r20, r24
    11a6:	c2 01       	movw	r24, r4
    11a8:	b1 01       	movw	r22, r2
    11aa:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    11b6:	7b 01       	movw	r14, r22
    11b8:	8c 01       	movw	r16, r24
    11ba:	f6 01       	movw	r30, r12
    11bc:	62 81       	ldd	r22, Z+2	; 0x02
    11be:	73 81       	ldd	r23, Z+3	; 0x03
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 03 13 	call	0x2606	; 0x2606 <__floatunsisf>
    11c8:	9b 01       	movw	r18, r22
    11ca:	ac 01       	movw	r20, r24
    11cc:	c4 01       	movw	r24, r8
    11ce:	b3 01       	movw	r22, r6
    11d0:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
    11d4:	9b 01       	movw	r18, r22
    11d6:	ac 01       	movw	r20, r24
    11d8:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    11dc:	9b 01       	movw	r18, r22
    11de:	ac 01       	movw	r20, r24
    11e0:	c8 01       	movw	r24, r16
    11e2:	b7 01       	movw	r22, r14
    11e4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
    11e8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <sqrt>
		measurement_ref[i] = dist_from_ref; //+ gaussrand();
    11ec:	d5 01       	movw	r26, r10
    11ee:	6d 93       	st	X+, r22
    11f0:	7d 93       	st	X+, r23
    11f2:	8d 93       	st	X+, r24
    11f4:	9d 93       	st	X+, r25
    11f6:	5d 01       	movw	r10, r26
    11f8:	eb 81       	ldd	r30, Y+3	; 0x03
    11fa:	fc 81       	ldd	r31, Y+4	; 0x04
    11fc:	32 96       	adiw	r30, 0x02	; 2
    11fe:	fc 83       	std	Y+4, r31	; 0x04
    1200:	eb 83       	std	Y+3, r30	; 0x03
}

void sense(float x, float y, float direction, float* measurement_ref,unsigned int  ** sensed){
	int i;
	
	for(i=0; i<REFERENCE_POINTS; i++){
    1202:	36 97       	sbiw	r30, 0x06	; 6
    1204:	09 f0       	breq	.+2      	; 0x1208 <sense+0xc2>
    1206:	be cf       	rjmp	.-132    	; 0x1184 <sense+0x3e>
		float dist_from_ref = sqrt(pow((x-sensed[i][0]), 2) + pow((y-sensed[i][1]), 2));
		measurement_ref[i] = dist_from_ref; //+ gaussrand();
	}
	return;
	
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    1220:	bf 90       	pop	r11
    1222:	af 90       	pop	r10
    1224:	9f 90       	pop	r9
    1226:	8f 90       	pop	r8
    1228:	7f 90       	pop	r7
    122a:	6f 90       	pop	r6
    122c:	5f 90       	pop	r5
    122e:	4f 90       	pop	r4
    1230:	3f 90       	pop	r3
    1232:	2f 90       	pop	r2
    1234:	08 95       	ret

00001236 <resample_particles>:

}



int resample_particles(particle** particles, double max_weight){
    1236:	2f 92       	push	r2
    1238:	3f 92       	push	r3
    123a:	4f 92       	push	r4
    123c:	5f 92       	push	r5
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <resample_particles+0x26>
    125c:	00 d0       	rcall	.+0      	; 0x125e <resample_particles+0x28>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	1a 01       	movw	r2, r20
    1268:	2b 01       	movw	r4, r22
		}
	}*/

	//Resample the particles
	int i;
	int index = (int)rand()%NUM_PARTICLE;
    126a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <rand>
    126e:	64 e6       	ldi	r22, 0x64	; 100
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__divmodhi4>
    1276:	3c 01       	movw	r6, r24
	double beta = 0;
	//printf("index=%d\n", index);
	//int num0 = 0;
	//int num1 = 0;
	particle** resampled = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
    1278:	88 ec       	ldi	r24, 0xC8	; 200
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <malloc>
    1280:	4c 01       	movw	r8, r24
    1282:	0f 2e       	mov	r0, r31
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	af 2e       	mov	r10, r31
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	bf 2e       	mov	r11, r31
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	cf 2e       	mov	r12, r31
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	df 2e       	mov	r13, r31
    1294:	f0 2d       	mov	r31, r0
	for(i=0; i<NUM_PARTICLE; i++)
    1296:	9c 01       	movw	r18, r24
    1298:	28 53       	subi	r18, 0x38	; 56
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	3c 83       	std	Y+4, r19	; 0x04
    129e:	2b 83       	std	Y+3, r18	; 0x03
	{

		beta += ((float)rand()/RAND_MAX)*2.0*max_weight;
    12a0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <rand>
    12a4:	aa 27       	eor	r26, r26
    12a6:	97 fd       	sbrc	r25, 7
    12a8:	a0 95       	com	r26
    12aa:	ba 2f       	mov	r27, r26
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	3e ef       	ldi	r19, 0xFE	; 254
    12b8:	4f ef       	ldi	r20, 0xFF	; 255
    12ba:	56 e4       	ldi	r21, 0x46	; 70
    12bc:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
    12c8:	a2 01       	movw	r20, r4
    12ca:	91 01       	movw	r18, r2
    12cc:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	c6 01       	movw	r24, r12
    12d6:	b5 01       	movw	r22, r10
    12d8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
    12dc:	5b 01       	movw	r10, r22
    12de:	6c 01       	movw	r12, r24
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <resample_particles+0xca>
		//printf("beta=%f, particles[%d]->weight=%f\n", beta, index, particles[index]->weight);
		while(beta>particles[index]->weight)
		{
			beta = beta-particles[index]->weight;
    12e2:	c6 01       	movw	r24, r12
    12e4:	b5 01       	movw	r22, r10
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
    12ee:	5b 01       	movw	r10, r22
    12f0:	6c 01       	movw	r12, r24
			//printf("beta=%f\n", beta);
			index = (index+1)%NUM_PARTICLE;
    12f2:	c3 01       	movw	r24, r6
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	64 e6       	ldi	r22, 0x64	; 100
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__divmodhi4>
    12fe:	3c 01       	movw	r6, r24
	for(i=0; i<NUM_PARTICLE; i++)
	{

		beta += ((float)rand()/RAND_MAX)*2.0*max_weight;
		//printf("beta=%f, particles[%d]->weight=%f\n", beta, index, particles[index]->weight);
		while(beta>particles[index]->weight)
    1300:	c3 01       	movw	r24, r6
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	a9 81       	ldd	r26, Y+1	; 0x01
    1308:	ba 81       	ldd	r27, Y+2	; 0x02
    130a:	8a 0f       	add	r24, r26
    130c:	9b 1f       	adc	r25, r27
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	dc 01       	movw	r26, r24
    1314:	ed 91       	ld	r30, X+
    1316:	fc 91       	ld	r31, X
    1318:	e4 88       	ldd	r14, Z+20	; 0x14
    131a:	f5 88       	ldd	r15, Z+21	; 0x15
    131c:	06 89       	ldd	r16, Z+22	; 0x16
    131e:	17 89       	ldd	r17, Z+23	; 0x17
    1320:	c6 01       	movw	r24, r12
    1322:	b5 01       	movw	r22, r10
    1324:	a8 01       	movw	r20, r16
    1326:	97 01       	movw	r18, r14
    1328:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__gesf2>
    132c:	18 16       	cp	r1, r24
    132e:	cc f2       	brlt	.-78     	; 0x12e2 <resample_particles+0xac>
		{
			beta = beta-particles[index]->weight;
			//printf("beta=%f\n", beta);
			index = (index+1)%NUM_PARTICLE;
		}
		resampled[i] = (particle*)malloc(sizeof(particle));
    1330:	88 e1       	ldi	r24, 0x18	; 24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <malloc>
    1338:	f4 01       	movw	r30, r8
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
		copy_particle(resampled[i], particles[index]);
    133e:	ad 81       	ldd	r26, Y+5	; 0x05
    1340:	be 81       	ldd	r27, Y+6	; 0x06
    1342:	6d 91       	ld	r22, X+
    1344:	7c 91       	ld	r23, X
    1346:	0e 94 54 07 	call	0xea8	; 0xea8 <copy_particle>
    134a:	e2 e0       	ldi	r30, 0x02	; 2
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	8e 0e       	add	r8, r30
    1350:	9f 1e       	adc	r9, r31
	double beta = 0;
	//printf("index=%d\n", index);
	//int num0 = 0;
	//int num1 = 0;
	particle** resampled = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
	for(i=0; i<NUM_PARTICLE; i++)
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	82 16       	cp	r8, r18
    1358:	93 06       	cpc	r9, r19
    135a:	09 f0       	breq	.+2      	; 0x135e <resample_particles+0x128>
    135c:	a1 cf       	rjmp	.-190    	; 0x12a0 <resample_particles+0x6a>
			num0++;
		else if(index == 1)
			num1++;
		printf("selected index=%d, num0=%d, num1=%d\n", index, num0, num1);*/
	}
	free_particles(particles);
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	0e 94 97 07 	call	0xf2e	; 0xf2e <free_particles>
	particles = resampled;
	//print_particles(particles);
}
    1366:	26 96       	adiw	r28, 0x06	; 6
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	7f 90       	pop	r7
    138c:	6f 90       	pop	r6
    138e:	5f 90       	pop	r5
    1390:	4f 90       	pop	r4
    1392:	3f 90       	pop	r3
    1394:	2f 90       	pop	r2
    1396:	08 95       	ret

00001398 <create_particles>:


float state_vector[4] = {0,0,0,0};
float reference_points[3][2] = {{0,0}, {10, 10}, {10, 0}};

int create_particles(){
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
	int i;
	particles = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
    13a8:	88 ec       	ldi	r24, 0xC8	; 200
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <malloc>
    13b0:	80 93 72 02 	sts	0x0272, r24
    13b4:	90 93 73 02 	sts	0x0273, r25
    13b8:	c0 e0       	ldi	r28, 0x00	; 0
    13ba:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<NUM_PARTICLE; i++){
		particles[i] = (particle*)malloc(sizeof(particle));
		particles[i]->x = rand()%10;
		particles[i]->y = rand()%10;
		particles[i]->direction = (float)(rand()/RAND_MAX)*2*PI;
		particles[i]->weight = 1/(float)NUM_PARTICLE;
    13bc:	0f 2e       	mov	r0, r31
    13be:	fa e0       	ldi	r31, 0x0A	; 10
    13c0:	cf 2e       	mov	r12, r31
    13c2:	f7 ed       	ldi	r31, 0xD7	; 215
    13c4:	df 2e       	mov	r13, r31
    13c6:	f3 e2       	ldi	r31, 0x23	; 35
    13c8:	ef 2e       	mov	r14, r31
    13ca:	fc e3       	ldi	r31, 0x3C	; 60
    13cc:	ff 2e       	mov	r15, r31
    13ce:	f0 2d       	mov	r31, r0
int create_particles(){
	int i;
	particles = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
	//particles = malloc(NUM_PARTICLE * sizeof(particle));
	for(i=0; i<NUM_PARTICLE; i++){
		particles[i] = (particle*)malloc(sizeof(particle));
    13d0:	00 91 72 02 	lds	r16, 0x0272
    13d4:	10 91 73 02 	lds	r17, 0x0273
    13d8:	0c 0f       	add	r16, r28
    13da:	1d 1f       	adc	r17, r29
    13dc:	88 e1       	ldi	r24, 0x18	; 24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <malloc>
    13e4:	f8 01       	movw	r30, r16
    13e6:	80 83       	st	Z, r24
    13e8:	91 83       	std	Z+1, r25	; 0x01
		particles[i]->x = rand()%10;
    13ea:	e0 91 72 02 	lds	r30, 0x0272
    13ee:	f0 91 73 02 	lds	r31, 0x0273
    13f2:	ec 0f       	add	r30, r28
    13f4:	fd 1f       	adc	r31, r29
    13f6:	00 81       	ld	r16, Z
    13f8:	11 81       	ldd	r17, Z+1	; 0x01
    13fa:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <rand>
    13fe:	6a e0       	ldi	r22, 0x0A	; 10
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__divmodhi4>
    1406:	aa 27       	eor	r26, r26
    1408:	97 fd       	sbrc	r25, 7
    140a:	a0 95       	com	r26
    140c:	ba 2f       	mov	r27, r26
    140e:	bc 01       	movw	r22, r24
    1410:	cd 01       	movw	r24, r26
    1412:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
    1416:	f8 01       	movw	r30, r16
    1418:	60 83       	st	Z, r22
    141a:	71 83       	std	Z+1, r23	; 0x01
    141c:	82 83       	std	Z+2, r24	; 0x02
    141e:	93 83       	std	Z+3, r25	; 0x03
		particles[i]->y = rand()%10;
    1420:	e0 91 72 02 	lds	r30, 0x0272
    1424:	f0 91 73 02 	lds	r31, 0x0273
    1428:	ec 0f       	add	r30, r28
    142a:	fd 1f       	adc	r31, r29
    142c:	00 81       	ld	r16, Z
    142e:	11 81       	ldd	r17, Z+1	; 0x01
    1430:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <rand>
    1434:	6a e0       	ldi	r22, 0x0A	; 10
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__divmodhi4>
    143c:	aa 27       	eor	r26, r26
    143e:	97 fd       	sbrc	r25, 7
    1440:	a0 95       	com	r26
    1442:	ba 2f       	mov	r27, r26
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
    144c:	f8 01       	movw	r30, r16
    144e:	64 83       	std	Z+4, r22	; 0x04
    1450:	75 83       	std	Z+5, r23	; 0x05
    1452:	86 83       	std	Z+6, r24	; 0x06
    1454:	97 83       	std	Z+7, r25	; 0x07
		particles[i]->direction = (float)(rand()/RAND_MAX)*2*PI;
    1456:	e0 91 72 02 	lds	r30, 0x0272
    145a:	f0 91 73 02 	lds	r31, 0x0273
    145e:	ec 0f       	add	r30, r28
    1460:	fd 1f       	adc	r31, r29
    1462:	00 81       	ld	r16, Z
    1464:	11 81       	ldd	r17, Z+1	; 0x01
    1466:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <rand>
    146a:	6f ef       	ldi	r22, 0xFF	; 255
    146c:	7f e7       	ldi	r23, 0x7F	; 127
    146e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__divmodhi4>
    1472:	88 27       	eor	r24, r24
    1474:	77 fd       	sbrc	r23, 7
    1476:	80 95       	com	r24
    1478:	98 2f       	mov	r25, r24
    147a:	0e 94 05 13 	call	0x260a	; 0x260a <__floatsisf>
    147e:	9b 01       	movw	r18, r22
    1480:	ac 01       	movw	r20, r24
    1482:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
    1486:	2b ed       	ldi	r18, 0xDB	; 219
    1488:	3f e0       	ldi	r19, 0x0F	; 15
    148a:	49 e4       	ldi	r20, 0x49	; 73
    148c:	50 e4       	ldi	r21, 0x40	; 64
    148e:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    1492:	f8 01       	movw	r30, r16
    1494:	60 8b       	std	Z+16, r22	; 0x10
    1496:	71 8b       	std	Z+17, r23	; 0x11
    1498:	82 8b       	std	Z+18, r24	; 0x12
    149a:	93 8b       	std	Z+19, r25	; 0x13
		particles[i]->weight = 1/(float)NUM_PARTICLE;
    149c:	e0 91 72 02 	lds	r30, 0x0272
    14a0:	f0 91 73 02 	lds	r31, 0x0273
    14a4:	ec 0f       	add	r30, r28
    14a6:	fd 1f       	adc	r31, r29
    14a8:	01 90       	ld	r0, Z+
    14aa:	f0 81       	ld	r31, Z
    14ac:	e0 2d       	mov	r30, r0
    14ae:	c4 8a       	std	Z+20, r12	; 0x14
    14b0:	d5 8a       	std	Z+21, r13	; 0x15
    14b2:	e6 8a       	std	Z+22, r14	; 0x16
    14b4:	f7 8a       	std	Z+23, r15	; 0x17
    14b6:	22 96       	adiw	r28, 0x02	; 2

int create_particles(){
	int i;
	particles = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
	//particles = malloc(NUM_PARTICLE * sizeof(particle));
	for(i=0; i<NUM_PARTICLE; i++){
    14b8:	c8 3c       	cpi	r28, 0xC8	; 200
    14ba:	d1 05       	cpc	r29, r1
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <create_particles+0x128>
    14be:	88 cf       	rjmp	.-240    	; 0x13d0 <create_particles+0x38>
		particles[i]->y = rand()%10;
		particles[i]->direction = (float)(rand()/RAND_MAX)*2*PI;
		particles[i]->weight = 1/(float)NUM_PARTICLE;
		//printf("create_particles: particles[%d]->x,y=%f, %f\n", i, particles[i]->x, particles[i]->y);
	}
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	08 95       	ret

000014d2 <calculate_gaussian_probability>:


float calculate_gaussian_probability(float mean, float sigma, float x){
    14d2:	af 92       	push	r10
    14d4:	bf 92       	push	r11
    14d6:	cf 92       	push	r12
    14d8:	df 92       	push	r13
    14da:	ef 92       	push	r14
    14dc:	ff 92       	push	r15
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	59 01       	movw	r10, r18
    14e4:	6a 01       	movw	r12, r20
    14e6:	a8 01       	movw	r20, r16
    14e8:	97 01       	movw	r18, r14
	float value = exp(- (pow((mean - x), 2) / (pow(sigma, 2)) / 2.0)) / sqrt(2.0 * PI * (pow(sigma, 2)));
    14ea:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    14f6:	7b 01       	movw	r14, r22
    14f8:	8c 01       	movw	r16, r24
    14fa:	c6 01       	movw	r24, r12
    14fc:	b5 01       	movw	r22, r10
    14fe:	a6 01       	movw	r20, r12
    1500:	95 01       	movw	r18, r10
    1502:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    1506:	5b 01       	movw	r10, r22
    1508:	6c 01       	movw	r12, r24
    150a:	c8 01       	movw	r24, r16
    150c:	b7 01       	movw	r22, r14
    150e:	a6 01       	movw	r20, r12
    1510:	95 01       	movw	r18, r10
    1512:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	5f eb       	ldi	r21, 0xBF	; 191
    151e:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    1522:	0e 94 a6 12 	call	0x254c	; 0x254c <exp>
    1526:	7b 01       	movw	r14, r22
    1528:	8c 01       	movw	r16, r24
    152a:	c6 01       	movw	r24, r12
    152c:	b5 01       	movw	r22, r10
    152e:	2b ed       	ldi	r18, 0xDB	; 219
    1530:	3f e0       	ldi	r19, 0x0F	; 15
    1532:	49 ec       	ldi	r20, 0xC9	; 201
    1534:	50 e4       	ldi	r21, 0x40	; 64
    1536:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    153a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <sqrt>
    153e:	9b 01       	movw	r18, r22
    1540:	ac 01       	movw	r20, r24
    1542:	c8 01       	movw	r24, r16
    1544:	b7 01       	movw	r22, r14
    1546:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
	//value = exp(value);
	//printf("value is %f\n", value);
	return value;

}
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	bf 90       	pop	r11
    1558:	af 90       	pop	r10
    155a:	08 95       	ret

0000155c <calculate_weight>:
	return;
	
}


float calculate_weight(particle* p, float* measurement_ref){
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	3c 01       	movw	r6, r24
    157a:	c4 e1       	ldi	r28, 0x14	; 20
    157c:	d2 e0       	ldi	r29, 0x02	; 2
    157e:	4b 01       	movw	r8, r22
    1580:	0f 2e       	mov	r0, r31
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	af 2e       	mov	r10, r31
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	bf 2e       	mov	r11, r31
    158a:	f0 e8       	ldi	r31, 0x80	; 128
    158c:	cf 2e       	mov	r12, r31
    158e:	ff e3       	ldi	r31, 0x3F	; 63
    1590:	df 2e       	mov	r13, r31
    1592:	f0 2d       	mov	r31, r0
	int i;
	float weight = 1;
	//printf("calculate_weight entered\n");
	for(i=0; i<REFERENCE_POINTS; i++){
		float dist_from_ref = sqrt(pow((p->x - reference_points[i][0]), 2) + pow((p->y - reference_points[i][1]), 2));
    1594:	f3 01       	movw	r30, r6
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	28 81       	ld	r18, Y
    15a0:	39 81       	ldd	r19, Y+1	; 0x01
    15a2:	4a 81       	ldd	r20, Y+2	; 0x02
    15a4:	5b 81       	ldd	r21, Y+3	; 0x03
    15a6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    15b2:	7b 01       	movw	r14, r22
    15b4:	8c 01       	movw	r16, r24
    15b6:	f3 01       	movw	r30, r6
    15b8:	64 81       	ldd	r22, Z+4	; 0x04
    15ba:	75 81       	ldd	r23, Z+5	; 0x05
    15bc:	86 81       	ldd	r24, Z+6	; 0x06
    15be:	97 81       	ldd	r25, Z+7	; 0x07
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	4e 81       	ldd	r20, Y+6	; 0x06
    15c6:	5f 81       	ldd	r21, Y+7	; 0x07
    15c8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__subsf3>
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    15d4:	9b 01       	movw	r18, r22
    15d6:	ac 01       	movw	r20, r24
    15d8:	c8 01       	movw	r24, r16
    15da:	b7 01       	movw	r22, r14
    15dc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__addsf3>
    15e0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <sqrt>
		//printf("calculate_weight calculated dist\n");
		//printf("dist_from_ref=%f\n", dist_from_ref);
		//printf("measurement_ref=%f\n", measurement_ref[i]);
		weight = weight * calculate_gaussian_probability(dist_from_ref, 0.5, measurement_ref[i]);
    15e4:	f4 01       	movw	r30, r8
    15e6:	e1 90       	ld	r14, Z+
    15e8:	f1 90       	ld	r15, Z+
    15ea:	01 91       	ld	r16, Z+
    15ec:	11 91       	ld	r17, Z+
    15ee:	4f 01       	movw	r8, r30
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <calculate_gaussian_probability>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	c6 01       	movw	r24, r12
    1602:	b5 01       	movw	r22, r10
    1604:	0e 94 93 14 	call	0x2926	; 0x2926 <__mulsf3>
    1608:	5b 01       	movw	r10, r22
    160a:	6c 01       	movw	r12, r24
    160c:	28 96       	adiw	r28, 0x08	; 8

float calculate_weight(particle* p, float* measurement_ref){
	int i;
	float weight = 1;
	//printf("calculate_weight entered\n");
	for(i=0; i<REFERENCE_POINTS; i++){
    160e:	f2 e0       	ldi	r31, 0x02	; 2
    1610:	cc 32       	cpi	r28, 0x2C	; 44
    1612:	df 07       	cpc	r29, r31
    1614:	09 f0       	breq	.+2      	; 0x1618 <calculate_weight+0xbc>
    1616:	be cf       	rjmp	.-132    	; 0x1594 <calculate_weight+0x38>
		weight = weight * calculate_gaussian_probability(dist_from_ref, 0.5, measurement_ref[i]);
		//printf("calculate_weight=%f\n", weight);
	}
	//printf("calculate_weight going out\n");
	return weight;
}
    1618:	c6 01       	movw	r24, r12
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	bf 90       	pop	r11
    162c:	af 90       	pop	r10
    162e:	9f 90       	pop	r9
    1630:	8f 90       	pop	r8
    1632:	7f 90       	pop	r7
    1634:	6f 90       	pop	r6
    1636:	08 95       	ret

00001638 <vfprintf>:
    1638:	a1 e1       	ldi	r26, 0x11	; 17
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e2 e2       	ldi	r30, 0x22	; 34
    163e:	fb e0       	ldi	r31, 0x0B	; 11
    1640:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__>
    1644:	3c 01       	movw	r6, r24
    1646:	7f 87       	std	Y+15, r23	; 0x0f
    1648:	6e 87       	std	Y+14, r22	; 0x0e
    164a:	6a 01       	movw	r12, r20
    164c:	fc 01       	movw	r30, r24
    164e:	17 82       	std	Z+7, r1	; 0x07
    1650:	16 82       	std	Z+6, r1	; 0x06
    1652:	83 81       	ldd	r24, Z+3	; 0x03
    1654:	81 fd       	sbrc	r24, 1
    1656:	03 c0       	rjmp	.+6      	; 0x165e <vfprintf+0x26>
    1658:	6f ef       	ldi	r22, 0xFF	; 255
    165a:	7f ef       	ldi	r23, 0xFF	; 255
    165c:	71 c3       	rjmp	.+1762   	; 0x1d40 <vfprintf+0x708>
    165e:	9e 01       	movw	r18, r28
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	39 8b       	std	Y+17, r19	; 0x11
    1666:	28 8b       	std	Y+16, r18	; 0x10
    1668:	f3 01       	movw	r30, r6
    166a:	23 81       	ldd	r18, Z+3	; 0x03
    166c:	ee 85       	ldd	r30, Y+14	; 0x0e
    166e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1670:	23 fd       	sbrc	r18, 3
    1672:	85 91       	lpm	r24, Z+
    1674:	23 ff       	sbrs	r18, 3
    1676:	81 91       	ld	r24, Z+
    1678:	ff 87       	std	Y+15, r31	; 0x0f
    167a:	ee 87       	std	Y+14, r30	; 0x0e
    167c:	88 23       	and	r24, r24
    167e:	09 f4       	brne	.+2      	; 0x1682 <vfprintf+0x4a>
    1680:	5c c3       	rjmp	.+1720   	; 0x1d3a <vfprintf+0x702>
    1682:	85 32       	cpi	r24, 0x25	; 37
    1684:	51 f4       	brne	.+20     	; 0x169a <vfprintf+0x62>
    1686:	ee 85       	ldd	r30, Y+14	; 0x0e
    1688:	ff 85       	ldd	r31, Y+15	; 0x0f
    168a:	23 fd       	sbrc	r18, 3
    168c:	85 91       	lpm	r24, Z+
    168e:	23 ff       	sbrs	r18, 3
    1690:	81 91       	ld	r24, Z+
    1692:	ff 87       	std	Y+15, r31	; 0x0f
    1694:	ee 87       	std	Y+14, r30	; 0x0e
    1696:	85 32       	cpi	r24, 0x25	; 37
    1698:	29 f4       	brne	.+10     	; 0x16a4 <vfprintf+0x6c>
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	b3 01       	movw	r22, r6
    169e:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    16a2:	e2 cf       	rjmp	.-60     	; 0x1668 <vfprintf+0x30>
    16a4:	98 2f       	mov	r25, r24
    16a6:	10 e0       	ldi	r17, 0x00	; 0
    16a8:	88 24       	eor	r8, r8
    16aa:	99 24       	eor	r9, r9
    16ac:	10 32       	cpi	r17, 0x20	; 32
    16ae:	b0 f4       	brcc	.+44     	; 0x16dc <vfprintf+0xa4>
    16b0:	9b 32       	cpi	r25, 0x2B	; 43
    16b2:	69 f0       	breq	.+26     	; 0x16ce <vfprintf+0x96>
    16b4:	9c 32       	cpi	r25, 0x2C	; 44
    16b6:	28 f4       	brcc	.+10     	; 0x16c2 <vfprintf+0x8a>
    16b8:	90 32       	cpi	r25, 0x20	; 32
    16ba:	51 f0       	breq	.+20     	; 0x16d0 <vfprintf+0x98>
    16bc:	93 32       	cpi	r25, 0x23	; 35
    16be:	71 f4       	brne	.+28     	; 0x16dc <vfprintf+0xa4>
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <vfprintf+0xa0>
    16c2:	9d 32       	cpi	r25, 0x2D	; 45
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <vfprintf+0x9c>
    16c6:	90 33       	cpi	r25, 0x30	; 48
    16c8:	49 f4       	brne	.+18     	; 0x16dc <vfprintf+0xa4>
    16ca:	11 60       	ori	r17, 0x01	; 1
    16cc:	28 c0       	rjmp	.+80     	; 0x171e <vfprintf+0xe6>
    16ce:	12 60       	ori	r17, 0x02	; 2
    16d0:	14 60       	ori	r17, 0x04	; 4
    16d2:	25 c0       	rjmp	.+74     	; 0x171e <vfprintf+0xe6>
    16d4:	18 60       	ori	r17, 0x08	; 8
    16d6:	23 c0       	rjmp	.+70     	; 0x171e <vfprintf+0xe6>
    16d8:	10 61       	ori	r17, 0x10	; 16
    16da:	21 c0       	rjmp	.+66     	; 0x171e <vfprintf+0xe6>
    16dc:	17 fd       	sbrc	r17, 7
    16de:	2a c0       	rjmp	.+84     	; 0x1734 <vfprintf+0xfc>
    16e0:	89 2f       	mov	r24, r25
    16e2:	80 53       	subi	r24, 0x30	; 48
    16e4:	8a 30       	cpi	r24, 0x0A	; 10
    16e6:	78 f4       	brcc	.+30     	; 0x1706 <vfprintf+0xce>
    16e8:	16 ff       	sbrs	r17, 6
    16ea:	06 c0       	rjmp	.+12     	; 0x16f8 <vfprintf+0xc0>
    16ec:	fa e0       	ldi	r31, 0x0A	; 10
    16ee:	9f 9e       	mul	r9, r31
    16f0:	90 2c       	mov	r9, r0
    16f2:	11 24       	eor	r1, r1
    16f4:	98 0e       	add	r9, r24
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <vfprintf+0xe6>
    16f8:	3a e0       	ldi	r19, 0x0A	; 10
    16fa:	83 9e       	mul	r8, r19
    16fc:	80 2c       	mov	r8, r0
    16fe:	11 24       	eor	r1, r1
    1700:	88 0e       	add	r8, r24
    1702:	10 62       	ori	r17, 0x20	; 32
    1704:	0c c0       	rjmp	.+24     	; 0x171e <vfprintf+0xe6>
    1706:	9e 32       	cpi	r25, 0x2E	; 46
    1708:	21 f4       	brne	.+8      	; 0x1712 <vfprintf+0xda>
    170a:	16 fd       	sbrc	r17, 6
    170c:	16 c3       	rjmp	.+1580   	; 0x1d3a <vfprintf+0x702>
    170e:	10 64       	ori	r17, 0x40	; 64
    1710:	06 c0       	rjmp	.+12     	; 0x171e <vfprintf+0xe6>
    1712:	9c 36       	cpi	r25, 0x6C	; 108
    1714:	11 f4       	brne	.+4      	; 0x171a <vfprintf+0xe2>
    1716:	10 68       	ori	r17, 0x80	; 128
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0xe6>
    171a:	98 36       	cpi	r25, 0x68	; 104
    171c:	59 f4       	brne	.+22     	; 0x1734 <vfprintf+0xfc>
    171e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1720:	ff 85       	ldd	r31, Y+15	; 0x0f
    1722:	23 fd       	sbrc	r18, 3
    1724:	95 91       	lpm	r25, Z+
    1726:	23 ff       	sbrs	r18, 3
    1728:	91 91       	ld	r25, Z+
    172a:	ff 87       	std	Y+15, r31	; 0x0f
    172c:	ee 87       	std	Y+14, r30	; 0x0e
    172e:	99 23       	and	r25, r25
    1730:	09 f0       	breq	.+2      	; 0x1734 <vfprintf+0xfc>
    1732:	bc cf       	rjmp	.-136    	; 0x16ac <vfprintf+0x74>
    1734:	89 2f       	mov	r24, r25
    1736:	85 54       	subi	r24, 0x45	; 69
    1738:	83 30       	cpi	r24, 0x03	; 3
    173a:	20 f4       	brcc	.+8      	; 0x1744 <vfprintf+0x10c>
    173c:	81 2f       	mov	r24, r17
    173e:	80 61       	ori	r24, 0x10	; 16
    1740:	90 5e       	subi	r25, 0xE0	; 224
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <vfprintf+0x11a>
    1744:	89 2f       	mov	r24, r25
    1746:	85 56       	subi	r24, 0x65	; 101
    1748:	83 30       	cpi	r24, 0x03	; 3
    174a:	08 f0       	brcs	.+2      	; 0x174e <vfprintf+0x116>
    174c:	a1 c1       	rjmp	.+834    	; 0x1a90 <vfprintf+0x458>
    174e:	81 2f       	mov	r24, r17
    1750:	8f 7e       	andi	r24, 0xEF	; 239
    1752:	86 fd       	sbrc	r24, 6
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x122>
    1756:	76 e0       	ldi	r23, 0x06	; 6
    1758:	97 2e       	mov	r9, r23
    175a:	6f e3       	ldi	r22, 0x3F	; 63
    175c:	f6 2e       	mov	r15, r22
    175e:	f8 22       	and	r15, r24
    1760:	95 36       	cpi	r25, 0x65	; 101
    1762:	19 f4       	brne	.+6      	; 0x176a <vfprintf+0x132>
    1764:	f0 e4       	ldi	r31, 0x40	; 64
    1766:	ff 2a       	or	r15, r31
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <vfprintf+0x140>
    176a:	96 36       	cpi	r25, 0x66	; 102
    176c:	19 f4       	brne	.+6      	; 0x1774 <vfprintf+0x13c>
    176e:	20 e8       	ldi	r18, 0x80	; 128
    1770:	f2 2a       	or	r15, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x140>
    1774:	91 10       	cpse	r9, r1
    1776:	9a 94       	dec	r9
    1778:	f7 fe       	sbrs	r15, 7
    177a:	0b c0       	rjmp	.+22     	; 0x1792 <vfprintf+0x15a>
    177c:	3b e3       	ldi	r19, 0x3B	; 59
    177e:	39 15       	cp	r19, r9
    1780:	20 f4       	brcc	.+8      	; 0x178a <vfprintf+0x152>
    1782:	27 e0       	ldi	r18, 0x07	; 7
    1784:	5c e3       	ldi	r21, 0x3C	; 60
    1786:	b5 2e       	mov	r11, r21
    1788:	0e c0       	rjmp	.+28     	; 0x17a6 <vfprintf+0x16e>
    178a:	b9 2c       	mov	r11, r9
    178c:	b3 94       	inc	r11
    178e:	27 e0       	ldi	r18, 0x07	; 7
    1790:	0a c0       	rjmp	.+20     	; 0x17a6 <vfprintf+0x16e>
    1792:	47 e0       	ldi	r20, 0x07	; 7
    1794:	49 15       	cp	r20, r9
    1796:	28 f4       	brcc	.+10     	; 0x17a2 <vfprintf+0x16a>
    1798:	27 e0       	ldi	r18, 0x07	; 7
    179a:	bb 24       	eor	r11, r11
    179c:	47 e0       	ldi	r20, 0x07	; 7
    179e:	94 2e       	mov	r9, r20
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x16e>
    17a2:	29 2d       	mov	r18, r9
    17a4:	bb 24       	eor	r11, r11
    17a6:	c6 01       	movw	r24, r12
    17a8:	04 96       	adiw	r24, 0x04	; 4
    17aa:	9d 87       	std	Y+13, r25	; 0x0d
    17ac:	8c 87       	std	Y+12, r24	; 0x0c
    17ae:	f6 01       	movw	r30, r12
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	ae 01       	movw	r20, r28
    17ba:	4f 5f       	subi	r20, 0xFF	; 255
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	0b 2d       	mov	r16, r11
    17c0:	0e 94 2c 10 	call	0x2058	; 0x2058 <__ftoa_engine>
    17c4:	6c 01       	movw	r12, r24
    17c6:	09 81       	ldd	r16, Y+1	; 0x01
    17c8:	20 2e       	mov	r2, r16
    17ca:	33 24       	eor	r3, r3
    17cc:	00 ff       	sbrs	r16, 0
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <vfprintf+0x1a0>
    17d0:	03 fd       	sbrc	r16, 3
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <vfprintf+0x1a0>
    17d4:	1d e2       	ldi	r17, 0x2D	; 45
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <vfprintf+0x1b2>
    17d8:	f1 fe       	sbrs	r15, 1
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x1a8>
    17dc:	1b e2       	ldi	r17, 0x2B	; 43
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <vfprintf+0x1b2>
    17e0:	f2 fc       	sbrc	r15, 2
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vfprintf+0x1b0>
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <vfprintf+0x1b2>
    17e8:	10 e2       	ldi	r17, 0x20	; 32
    17ea:	c1 01       	movw	r24, r2
    17ec:	8c 70       	andi	r24, 0x0C	; 12
    17ee:	90 70       	andi	r25, 0x00	; 0
    17f0:	89 2b       	or	r24, r25
    17f2:	b9 f1       	breq	.+110    	; 0x1862 <vfprintf+0x22a>
    17f4:	11 23       	and	r17, r17
    17f6:	11 f4       	brne	.+4      	; 0x17fc <vfprintf+0x1c4>
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <vfprintf+0x1c6>
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	88 15       	cp	r24, r8
    1800:	10 f0       	brcs	.+4      	; 0x1806 <vfprintf+0x1ce>
    1802:	88 24       	eor	r8, r8
    1804:	0a c0       	rjmp	.+20     	; 0x181a <vfprintf+0x1e2>
    1806:	88 1a       	sub	r8, r24
    1808:	f3 fc       	sbrc	r15, 3
    180a:	07 c0       	rjmp	.+14     	; 0x181a <vfprintf+0x1e2>
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	b3 01       	movw	r22, r6
    1812:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1816:	8a 94       	dec	r8
    1818:	c9 f7       	brne	.-14     	; 0x180c <vfprintf+0x1d4>
    181a:	11 23       	and	r17, r17
    181c:	29 f0       	breq	.+10     	; 0x1828 <vfprintf+0x1f0>
    181e:	81 2f       	mov	r24, r17
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	b3 01       	movw	r22, r6
    1824:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1828:	23 fe       	sbrs	r2, 3
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <vfprintf+0x1fa>
    182c:	06 e6       	ldi	r16, 0x66	; 102
    182e:	11 e0       	ldi	r17, 0x01	; 1
    1830:	0e c0       	rjmp	.+28     	; 0x184e <vfprintf+0x216>
    1832:	0a e6       	ldi	r16, 0x6A	; 106
    1834:	11 e0       	ldi	r17, 0x01	; 1
    1836:	0b c0       	rjmp	.+22     	; 0x184e <vfprintf+0x216>
    1838:	e1 14       	cp	r14, r1
    183a:	f1 04       	cpc	r15, r1
    183c:	09 f0       	breq	.+2      	; 0x1840 <vfprintf+0x208>
    183e:	80 52       	subi	r24, 0x20	; 32
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	b3 01       	movw	r22, r6
    1844:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1848:	0f 5f       	subi	r16, 0xFF	; 255
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <vfprintf+0x220>
    184e:	ef 2c       	mov	r14, r15
    1850:	ff 24       	eor	r15, r15
    1852:	f0 e1       	ldi	r31, 0x10	; 16
    1854:	ef 22       	and	r14, r31
    1856:	ff 24       	eor	r15, r15
    1858:	f8 01       	movw	r30, r16
    185a:	84 91       	lpm	r24, Z+
    185c:	88 23       	and	r24, r24
    185e:	61 f7       	brne	.-40     	; 0x1838 <vfprintf+0x200>
    1860:	14 c1       	rjmp	.+552    	; 0x1a8a <vfprintf+0x452>
    1862:	f7 fe       	sbrs	r15, 7
    1864:	12 c0       	rjmp	.+36     	; 0x188a <vfprintf+0x252>
    1866:	bc 0c       	add	r11, r12
    1868:	24 fe       	sbrs	r2, 4
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <vfprintf+0x23c>
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	81 33       	cpi	r24, 0x31	; 49
    1870:	09 f4       	brne	.+2      	; 0x1874 <vfprintf+0x23c>
    1872:	ba 94       	dec	r11
    1874:	1b 14       	cp	r1, r11
    1876:	1c f0       	brlt	.+6      	; 0x187e <vfprintf+0x246>
    1878:	bb 24       	eor	r11, r11
    187a:	b3 94       	inc	r11
    187c:	2d c0       	rjmp	.+90     	; 0x18d8 <vfprintf+0x2a0>
    187e:	f8 e0       	ldi	r31, 0x08	; 8
    1880:	fb 15       	cp	r31, r11
    1882:	50 f5       	brcc	.+84     	; 0x18d8 <vfprintf+0x2a0>
    1884:	38 e0       	ldi	r19, 0x08	; 8
    1886:	b3 2e       	mov	r11, r19
    1888:	27 c0       	rjmp	.+78     	; 0x18d8 <vfprintf+0x2a0>
    188a:	f6 fc       	sbrc	r15, 6
    188c:	25 c0       	rjmp	.+74     	; 0x18d8 <vfprintf+0x2a0>
    188e:	89 2d       	mov	r24, r9
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	8c 15       	cp	r24, r12
    1894:	9d 05       	cpc	r25, r13
    1896:	4c f0       	brlt	.+18     	; 0x18aa <vfprintf+0x272>
    1898:	2c ef       	ldi	r18, 0xFC	; 252
    189a:	c2 16       	cp	r12, r18
    189c:	2f ef       	ldi	r18, 0xFF	; 255
    189e:	d2 06       	cpc	r13, r18
    18a0:	24 f0       	brlt	.+8      	; 0x18aa <vfprintf+0x272>
    18a2:	30 e8       	ldi	r19, 0x80	; 128
    18a4:	f3 2a       	or	r15, r19
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <vfprintf+0x272>
    18a8:	9a 94       	dec	r9
    18aa:	99 20       	and	r9, r9
    18ac:	49 f0       	breq	.+18     	; 0x18c0 <vfprintf+0x288>
    18ae:	e2 e0       	ldi	r30, 0x02	; 2
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	ec 0f       	add	r30, r28
    18b4:	fd 1f       	adc	r31, r29
    18b6:	e9 0d       	add	r30, r9
    18b8:	f1 1d       	adc	r31, r1
    18ba:	80 81       	ld	r24, Z
    18bc:	80 33       	cpi	r24, 0x30	; 48
    18be:	a1 f3       	breq	.-24     	; 0x18a8 <vfprintf+0x270>
    18c0:	f7 fe       	sbrs	r15, 7
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <vfprintf+0x2a0>
    18c4:	b9 2c       	mov	r11, r9
    18c6:	b3 94       	inc	r11
    18c8:	89 2d       	mov	r24, r9
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	c8 16       	cp	r12, r24
    18ce:	d9 06       	cpc	r13, r25
    18d0:	14 f0       	brlt	.+4      	; 0x18d6 <vfprintf+0x29e>
    18d2:	99 24       	eor	r9, r9
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <vfprintf+0x2a0>
    18d6:	9c 18       	sub	r9, r12
    18d8:	f7 fc       	sbrc	r15, 7
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <vfprintf+0x2aa>
    18dc:	25 e0       	ldi	r18, 0x05	; 5
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	09 c0       	rjmp	.+18     	; 0x18f4 <vfprintf+0x2bc>
    18e2:	1c 14       	cp	r1, r12
    18e4:	1d 04       	cpc	r1, r13
    18e6:	1c f0       	brlt	.+6      	; 0x18ee <vfprintf+0x2b6>
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <vfprintf+0x2bc>
    18ee:	96 01       	movw	r18, r12
    18f0:	2f 5f       	subi	r18, 0xFF	; 255
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	11 23       	and	r17, r17
    18f6:	11 f0       	breq	.+4      	; 0x18fc <vfprintf+0x2c4>
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	99 20       	and	r9, r9
    18fe:	29 f0       	breq	.+10     	; 0x190a <vfprintf+0x2d2>
    1900:	89 2d       	mov	r24, r9
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	28 0f       	add	r18, r24
    1908:	39 1f       	adc	r19, r25
    190a:	88 2d       	mov	r24, r8
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	14 f0       	brlt	.+4      	; 0x1918 <vfprintf+0x2e0>
    1914:	88 24       	eor	r8, r8
    1916:	01 c0       	rjmp	.+2      	; 0x191a <vfprintf+0x2e2>
    1918:	82 1a       	sub	r8, r18
    191a:	4f 2c       	mov	r4, r15
    191c:	55 24       	eor	r5, r5
    191e:	c2 01       	movw	r24, r4
    1920:	89 70       	andi	r24, 0x09	; 9
    1922:	90 70       	andi	r25, 0x00	; 0
    1924:	89 2b       	or	r24, r25
    1926:	39 f0       	breq	.+14     	; 0x1936 <vfprintf+0x2fe>
    1928:	08 c0       	rjmp	.+16     	; 0x193a <vfprintf+0x302>
    192a:	80 e2       	ldi	r24, 0x20	; 32
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	b3 01       	movw	r22, r6
    1930:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1934:	8a 94       	dec	r8
    1936:	88 20       	and	r8, r8
    1938:	c1 f7       	brne	.-16     	; 0x192a <vfprintf+0x2f2>
    193a:	11 23       	and	r17, r17
    193c:	29 f0       	breq	.+10     	; 0x1948 <vfprintf+0x310>
    193e:	81 2f       	mov	r24, r17
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	b3 01       	movw	r22, r6
    1944:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1948:	43 fe       	sbrs	r4, 3
    194a:	07 c0       	rjmp	.+14     	; 0x195a <vfprintf+0x322>
    194c:	08 c0       	rjmp	.+16     	; 0x195e <vfprintf+0x326>
    194e:	80 e3       	ldi	r24, 0x30	; 48
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	b3 01       	movw	r22, r6
    1954:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1958:	8a 94       	dec	r8
    195a:	88 20       	and	r8, r8
    195c:	c1 f7       	brne	.-16     	; 0x194e <vfprintf+0x316>
    195e:	f7 fe       	sbrs	r15, 7
    1960:	46 c0       	rjmp	.+140    	; 0x19ee <vfprintf+0x3b6>
    1962:	86 01       	movw	r16, r12
    1964:	d7 fe       	sbrs	r13, 7
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0x334>
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	10 e0       	ldi	r17, 0x00	; 0
    196c:	76 01       	movw	r14, r12
    196e:	08 94       	sec
    1970:	e1 1c       	adc	r14, r1
    1972:	f1 1c       	adc	r15, r1
    1974:	e0 1a       	sub	r14, r16
    1976:	f1 0a       	sbc	r15, r17
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	4c 0f       	add	r20, r28
    197e:	5d 1f       	adc	r21, r29
    1980:	e4 0e       	add	r14, r20
    1982:	f5 1e       	adc	r15, r21
    1984:	26 01       	movw	r4, r12
    1986:	4b 18       	sub	r4, r11
    1988:	51 08       	sbc	r5, r1
    198a:	89 2d       	mov	r24, r9
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	aa 24       	eor	r10, r10
    1990:	bb 24       	eor	r11, r11
    1992:	a8 1a       	sub	r10, r24
    1994:	b9 0a       	sbc	r11, r25
    1996:	5f ef       	ldi	r21, 0xFF	; 255
    1998:	0f 3f       	cpi	r16, 0xFF	; 255
    199a:	15 07       	cpc	r17, r21
    199c:	29 f4       	brne	.+10     	; 0x19a8 <vfprintf+0x370>
    199e:	8e e2       	ldi	r24, 0x2E	; 46
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	b3 01       	movw	r22, r6
    19a4:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    19a8:	c0 16       	cp	r12, r16
    19aa:	d1 06       	cpc	r13, r17
    19ac:	34 f0       	brlt	.+12     	; 0x19ba <vfprintf+0x382>
    19ae:	40 16       	cp	r4, r16
    19b0:	51 06       	cpc	r5, r17
    19b2:	1c f4       	brge	.+6      	; 0x19ba <vfprintf+0x382>
    19b4:	f7 01       	movw	r30, r14
    19b6:	80 81       	ld	r24, Z
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <vfprintf+0x384>
    19ba:	80 e3       	ldi	r24, 0x30	; 48
    19bc:	01 50       	subi	r16, 0x01	; 1
    19be:	10 40       	sbci	r17, 0x00	; 0
    19c0:	08 94       	sec
    19c2:	e1 1c       	adc	r14, r1
    19c4:	f1 1c       	adc	r15, r1
    19c6:	0a 15       	cp	r16, r10
    19c8:	1b 05       	cpc	r17, r11
    19ca:	2c f0       	brlt	.+10     	; 0x19d6 <vfprintf+0x39e>
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b3 01       	movw	r22, r6
    19d0:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    19d4:	e0 cf       	rjmp	.-64     	; 0x1996 <vfprintf+0x35e>
    19d6:	0c 15       	cp	r16, r12
    19d8:	1d 05       	cpc	r17, r13
    19da:	39 f4       	brne	.+14     	; 0x19ea <vfprintf+0x3b2>
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	96 33       	cpi	r25, 0x36	; 54
    19e0:	18 f4       	brcc	.+6      	; 0x19e8 <vfprintf+0x3b0>
    19e2:	95 33       	cpi	r25, 0x35	; 53
    19e4:	11 f4       	brne	.+4      	; 0x19ea <vfprintf+0x3b2>
    19e6:	24 fe       	sbrs	r2, 4
    19e8:	81 e3       	ldi	r24, 0x31	; 49
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	4b c0       	rjmp	.+150    	; 0x1a84 <vfprintf+0x44c>
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	81 33       	cpi	r24, 0x31	; 49
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <vfprintf+0x3be>
    19f4:	0f 7e       	andi	r16, 0xEF	; 239
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	b3 01       	movw	r22, r6
    19fa:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    19fe:	99 20       	and	r9, r9
    1a00:	a1 f0       	breq	.+40     	; 0x1a2a <vfprintf+0x3f2>
    1a02:	8e e2       	ldi	r24, 0x2E	; 46
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	b3 01       	movw	r22, r6
    1a08:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1a0c:	12 e0       	ldi	r17, 0x02	; 2
    1a0e:	e1 e0       	ldi	r30, 0x01	; 1
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	ec 0f       	add	r30, r28
    1a14:	fd 1f       	adc	r31, r29
    1a16:	e1 0f       	add	r30, r17
    1a18:	f1 1d       	adc	r31, r1
    1a1a:	1f 5f       	subi	r17, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	b3 01       	movw	r22, r6
    1a22:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1a26:	9a 94       	dec	r9
    1a28:	91 f7       	brne	.-28     	; 0x1a0e <vfprintf+0x3d6>
    1a2a:	44 fc       	sbrc	r4, 4
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <vfprintf+0x3fc>
    1a2e:	85 e6       	ldi	r24, 0x65	; 101
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <vfprintf+0x400>
    1a34:	85 e4       	ldi	r24, 0x45	; 69
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	b3 01       	movw	r22, r6
    1a3a:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1a3e:	d7 fc       	sbrc	r13, 7
    1a40:	05 c0       	rjmp	.+10     	; 0x1a4c <vfprintf+0x414>
    1a42:	c1 14       	cp	r12, r1
    1a44:	d1 04       	cpc	r13, r1
    1a46:	41 f4       	brne	.+16     	; 0x1a58 <vfprintf+0x420>
    1a48:	04 ff       	sbrs	r16, 4
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <vfprintf+0x420>
    1a4c:	d0 94       	com	r13
    1a4e:	c1 94       	neg	r12
    1a50:	d1 08       	sbc	r13, r1
    1a52:	d3 94       	inc	r13
    1a54:	8d e2       	ldi	r24, 0x2D	; 45
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <vfprintf+0x422>
    1a58:	8b e2       	ldi	r24, 0x2B	; 43
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	b3 01       	movw	r22, r6
    1a5e:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1a62:	80 e3       	ldi	r24, 0x30	; 48
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <vfprintf+0x438>
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
    1a68:	26 ef       	ldi	r18, 0xF6	; 246
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	c2 0e       	add	r12, r18
    1a6e:	d3 1e       	adc	r13, r19
    1a70:	3a e0       	ldi	r19, 0x0A	; 10
    1a72:	c3 16       	cp	r12, r19
    1a74:	d1 04       	cpc	r13, r1
    1a76:	bc f7       	brge	.-18     	; 0x1a66 <vfprintf+0x42e>
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	b3 01       	movw	r22, r6
    1a7c:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1a80:	c6 01       	movw	r24, r12
    1a82:	c0 96       	adiw	r24, 0x30	; 48
    1a84:	b3 01       	movw	r22, r6
    1a86:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1a8a:	cc 84       	ldd	r12, Y+12	; 0x0c
    1a8c:	dd 84       	ldd	r13, Y+13	; 0x0d
    1a8e:	52 c1       	rjmp	.+676    	; 0x1d34 <vfprintf+0x6fc>
    1a90:	93 36       	cpi	r25, 0x63	; 99
    1a92:	31 f0       	breq	.+12     	; 0x1aa0 <vfprintf+0x468>
    1a94:	93 37       	cpi	r25, 0x73	; 115
    1a96:	99 f0       	breq	.+38     	; 0x1abe <vfprintf+0x486>
    1a98:	93 35       	cpi	r25, 0x53	; 83
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <vfprintf+0x466>
    1a9c:	59 c0       	rjmp	.+178    	; 0x1b50 <vfprintf+0x518>
    1a9e:	23 c0       	rjmp	.+70     	; 0x1ae6 <vfprintf+0x4ae>
    1aa0:	f6 01       	movw	r30, r12
    1aa2:	80 81       	ld	r24, Z
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	5e 01       	movw	r10, r28
    1aa8:	08 94       	sec
    1aaa:	a1 1c       	adc	r10, r1
    1aac:	b1 1c       	adc	r11, r1
    1aae:	22 e0       	ldi	r18, 0x02	; 2
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	c2 0e       	add	r12, r18
    1ab4:	d3 1e       	adc	r13, r19
    1ab6:	21 e0       	ldi	r18, 0x01	; 1
    1ab8:	e2 2e       	mov	r14, r18
    1aba:	f1 2c       	mov	r15, r1
    1abc:	12 c0       	rjmp	.+36     	; 0x1ae2 <vfprintf+0x4aa>
    1abe:	f6 01       	movw	r30, r12
    1ac0:	a0 80       	ld	r10, Z
    1ac2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ac4:	16 fd       	sbrc	r17, 6
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <vfprintf+0x496>
    1ac8:	6f ef       	ldi	r22, 0xFF	; 255
    1aca:	7f ef       	ldi	r23, 0xFF	; 255
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfprintf+0x49a>
    1ace:	69 2d       	mov	r22, r9
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	22 e0       	ldi	r18, 0x02	; 2
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	c2 0e       	add	r12, r18
    1ad8:	d3 1e       	adc	r13, r19
    1ada:	c5 01       	movw	r24, r10
    1adc:	0e 94 0f 11 	call	0x221e	; 0x221e <strnlen>
    1ae0:	7c 01       	movw	r14, r24
    1ae2:	1f 77       	andi	r17, 0x7F	; 127
    1ae4:	13 c0       	rjmp	.+38     	; 0x1b0c <vfprintf+0x4d4>
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	a0 80       	ld	r10, Z
    1aea:	b1 80       	ldd	r11, Z+1	; 0x01
    1aec:	16 fd       	sbrc	r17, 6
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <vfprintf+0x4be>
    1af0:	6f ef       	ldi	r22, 0xFF	; 255
    1af2:	7f ef       	ldi	r23, 0xFF	; 255
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <vfprintf+0x4c2>
    1af6:	69 2d       	mov	r22, r9
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	22 e0       	ldi	r18, 0x02	; 2
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	c2 0e       	add	r12, r18
    1b00:	d3 1e       	adc	r13, r19
    1b02:	c5 01       	movw	r24, r10
    1b04:	0e 94 04 11 	call	0x2208	; 0x2208 <strnlen_P>
    1b08:	7c 01       	movw	r14, r24
    1b0a:	10 68       	ori	r17, 0x80	; 128
    1b0c:	13 ff       	sbrs	r17, 3
    1b0e:	07 c0       	rjmp	.+14     	; 0x1b1e <vfprintf+0x4e6>
    1b10:	1b c0       	rjmp	.+54     	; 0x1b48 <vfprintf+0x510>
    1b12:	80 e2       	ldi	r24, 0x20	; 32
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	b3 01       	movw	r22, r6
    1b18:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1b1c:	8a 94       	dec	r8
    1b1e:	88 2d       	mov	r24, r8
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	e8 16       	cp	r14, r24
    1b24:	f9 06       	cpc	r15, r25
    1b26:	a8 f3       	brcs	.-22     	; 0x1b12 <vfprintf+0x4da>
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <vfprintf+0x510>
    1b2a:	f5 01       	movw	r30, r10
    1b2c:	17 fd       	sbrc	r17, 7
    1b2e:	85 91       	lpm	r24, Z+
    1b30:	17 ff       	sbrs	r17, 7
    1b32:	81 91       	ld	r24, Z+
    1b34:	5f 01       	movw	r10, r30
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	b3 01       	movw	r22, r6
    1b3a:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1b3e:	81 10       	cpse	r8, r1
    1b40:	8a 94       	dec	r8
    1b42:	08 94       	sec
    1b44:	e1 08       	sbc	r14, r1
    1b46:	f1 08       	sbc	r15, r1
    1b48:	e1 14       	cp	r14, r1
    1b4a:	f1 04       	cpc	r15, r1
    1b4c:	71 f7       	brne	.-36     	; 0x1b2a <vfprintf+0x4f2>
    1b4e:	f2 c0       	rjmp	.+484    	; 0x1d34 <vfprintf+0x6fc>
    1b50:	94 36       	cpi	r25, 0x64	; 100
    1b52:	11 f0       	breq	.+4      	; 0x1b58 <vfprintf+0x520>
    1b54:	99 36       	cpi	r25, 0x69	; 105
    1b56:	89 f5       	brne	.+98     	; 0x1bba <vfprintf+0x582>
    1b58:	17 ff       	sbrs	r17, 7
    1b5a:	08 c0       	rjmp	.+16     	; 0x1b6c <vfprintf+0x534>
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	20 81       	ld	r18, Z
    1b60:	31 81       	ldd	r19, Z+1	; 0x01
    1b62:	42 81       	ldd	r20, Z+2	; 0x02
    1b64:	53 81       	ldd	r21, Z+3	; 0x03
    1b66:	84 e0       	ldi	r24, 0x04	; 4
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <vfprintf+0x548>
    1b6c:	f6 01       	movw	r30, r12
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	9c 01       	movw	r18, r24
    1b74:	44 27       	eor	r20, r20
    1b76:	37 fd       	sbrc	r19, 7
    1b78:	40 95       	com	r20
    1b7a:	54 2f       	mov	r21, r20
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	c8 0e       	add	r12, r24
    1b82:	d9 1e       	adc	r13, r25
    1b84:	9f e6       	ldi	r25, 0x6F	; 111
    1b86:	f9 2e       	mov	r15, r25
    1b88:	f1 22       	and	r15, r17
    1b8a:	57 ff       	sbrs	r21, 7
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <vfprintf+0x568>
    1b8e:	50 95       	com	r21
    1b90:	40 95       	com	r20
    1b92:	30 95       	com	r19
    1b94:	21 95       	neg	r18
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	4f 4f       	sbci	r20, 0xFF	; 255
    1b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9c:	90 e8       	ldi	r25, 0x80	; 128
    1b9e:	f9 2a       	or	r15, r25
    1ba0:	ca 01       	movw	r24, r20
    1ba2:	b9 01       	movw	r22, r18
    1ba4:	ae 01       	movw	r20, r28
    1ba6:	4f 5f       	subi	r20, 0xFF	; 255
    1ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    1baa:	2a e0       	ldi	r18, 0x0A	; 10
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__ultoa_invert>
    1bb2:	e8 2e       	mov	r14, r24
    1bb4:	e8 89       	ldd	r30, Y+16	; 0x10
    1bb6:	ee 1a       	sub	r14, r30
    1bb8:	41 c0       	rjmp	.+130    	; 0x1c3c <vfprintf+0x604>
    1bba:	95 37       	cpi	r25, 0x75	; 117
    1bbc:	21 f4       	brne	.+8      	; 0x1bc6 <vfprintf+0x58e>
    1bbe:	1f 7e       	andi	r17, 0xEF	; 239
    1bc0:	2a e0       	ldi	r18, 0x0A	; 10
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	1c c0       	rjmp	.+56     	; 0x1bfe <vfprintf+0x5c6>
    1bc6:	19 7f       	andi	r17, 0xF9	; 249
    1bc8:	9f 36       	cpi	r25, 0x6F	; 111
    1bca:	61 f0       	breq	.+24     	; 0x1be4 <vfprintf+0x5ac>
    1bcc:	90 37       	cpi	r25, 0x70	; 112
    1bce:	20 f4       	brcc	.+8      	; 0x1bd8 <vfprintf+0x5a0>
    1bd0:	98 35       	cpi	r25, 0x58	; 88
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <vfprintf+0x59e>
    1bd4:	b2 c0       	rjmp	.+356    	; 0x1d3a <vfprintf+0x702>
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <vfprintf+0x5be>
    1bd8:	90 37       	cpi	r25, 0x70	; 112
    1bda:	39 f0       	breq	.+14     	; 0x1bea <vfprintf+0x5b2>
    1bdc:	98 37       	cpi	r25, 0x78	; 120
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <vfprintf+0x5aa>
    1be0:	ac c0       	rjmp	.+344    	; 0x1d3a <vfprintf+0x702>
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <vfprintf+0x5b4>
    1be4:	28 e0       	ldi	r18, 0x08	; 8
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <vfprintf+0x5c6>
    1bea:	10 61       	ori	r17, 0x10	; 16
    1bec:	14 fd       	sbrc	r17, 4
    1bee:	14 60       	ori	r17, 0x04	; 4
    1bf0:	20 e1       	ldi	r18, 0x10	; 16
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <vfprintf+0x5c6>
    1bf6:	14 fd       	sbrc	r17, 4
    1bf8:	16 60       	ori	r17, 0x06	; 6
    1bfa:	20 e1       	ldi	r18, 0x10	; 16
    1bfc:	32 e0       	ldi	r19, 0x02	; 2
    1bfe:	17 ff       	sbrs	r17, 7
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <vfprintf+0x5da>
    1c02:	f6 01       	movw	r30, r12
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	44 e0       	ldi	r20, 0x04	; 4
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	08 c0       	rjmp	.+16     	; 0x1c22 <vfprintf+0x5ea>
    1c12:	f6 01       	movw	r30, r12
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	bc 01       	movw	r22, r24
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	42 e0       	ldi	r20, 0x02	; 2
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	c4 0e       	add	r12, r20
    1c24:	d5 1e       	adc	r13, r21
    1c26:	ae 01       	movw	r20, r28
    1c28:	4f 5f       	subi	r20, 0xFF	; 255
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__ultoa_invert>
    1c30:	e8 2e       	mov	r14, r24
    1c32:	58 89       	ldd	r21, Y+16	; 0x10
    1c34:	e5 1a       	sub	r14, r21
    1c36:	8f e7       	ldi	r24, 0x7F	; 127
    1c38:	f8 2e       	mov	r15, r24
    1c3a:	f1 22       	and	r15, r17
    1c3c:	f6 fe       	sbrs	r15, 6
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <vfprintf+0x61e>
    1c40:	8e ef       	ldi	r24, 0xFE	; 254
    1c42:	f8 22       	and	r15, r24
    1c44:	e9 14       	cp	r14, r9
    1c46:	38 f4       	brcc	.+14     	; 0x1c56 <vfprintf+0x61e>
    1c48:	f4 fe       	sbrs	r15, 4
    1c4a:	07 c0       	rjmp	.+14     	; 0x1c5a <vfprintf+0x622>
    1c4c:	f2 fc       	sbrc	r15, 2
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <vfprintf+0x622>
    1c50:	9f ee       	ldi	r25, 0xEF	; 239
    1c52:	f9 22       	and	r15, r25
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <vfprintf+0x622>
    1c56:	1e 2d       	mov	r17, r14
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <vfprintf+0x624>
    1c5a:	19 2d       	mov	r17, r9
    1c5c:	f4 fe       	sbrs	r15, 4
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <vfprintf+0x642>
    1c60:	fe 01       	movw	r30, r28
    1c62:	ee 0d       	add	r30, r14
    1c64:	f1 1d       	adc	r31, r1
    1c66:	80 81       	ld	r24, Z
    1c68:	80 33       	cpi	r24, 0x30	; 48
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <vfprintf+0x63a>
    1c6c:	e9 ee       	ldi	r30, 0xE9	; 233
    1c6e:	fe 22       	and	r15, r30
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <vfprintf+0x64a>
    1c72:	1f 5f       	subi	r17, 0xFF	; 255
    1c74:	f2 fe       	sbrs	r15, 2
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <vfprintf+0x64a>
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <vfprintf+0x648>
    1c7a:	8f 2d       	mov	r24, r15
    1c7c:	86 78       	andi	r24, 0x86	; 134
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <vfprintf+0x64a>
    1c80:	1f 5f       	subi	r17, 0xFF	; 255
    1c82:	0f 2d       	mov	r16, r15
    1c84:	f3 fc       	sbrc	r15, 3
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <vfprintf+0x678>
    1c88:	f0 fe       	sbrs	r15, 0
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <vfprintf+0x672>
    1c8c:	18 15       	cp	r17, r8
    1c8e:	10 f0       	brcs	.+4      	; 0x1c94 <vfprintf+0x65c>
    1c90:	9e 2c       	mov	r9, r14
    1c92:	0b c0       	rjmp	.+22     	; 0x1caa <vfprintf+0x672>
    1c94:	9e 2c       	mov	r9, r14
    1c96:	98 0c       	add	r9, r8
    1c98:	91 1a       	sub	r9, r17
    1c9a:	18 2d       	mov	r17, r8
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <vfprintf+0x672>
    1c9e:	80 e2       	ldi	r24, 0x20	; 32
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	b3 01       	movw	r22, r6
    1ca4:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1ca8:	1f 5f       	subi	r17, 0xFF	; 255
    1caa:	18 15       	cp	r17, r8
    1cac:	c0 f3       	brcs	.-16     	; 0x1c9e <vfprintf+0x666>
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <vfprintf+0x680>
    1cb0:	18 15       	cp	r17, r8
    1cb2:	10 f4       	brcc	.+4      	; 0x1cb8 <vfprintf+0x680>
    1cb4:	81 1a       	sub	r8, r17
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <vfprintf+0x682>
    1cb8:	88 24       	eor	r8, r8
    1cba:	04 ff       	sbrs	r16, 4
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <vfprintf+0x6a4>
    1cbe:	80 e3       	ldi	r24, 0x30	; 48
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	b3 01       	movw	r22, r6
    1cc4:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1cc8:	02 ff       	sbrs	r16, 2
    1cca:	1d c0       	rjmp	.+58     	; 0x1d06 <vfprintf+0x6ce>
    1ccc:	01 fd       	sbrc	r16, 1
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <vfprintf+0x69e>
    1cd0:	88 e7       	ldi	r24, 0x78	; 120
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e c0       	rjmp	.+28     	; 0x1cf2 <vfprintf+0x6ba>
    1cd6:	88 e5       	ldi	r24, 0x58	; 88
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0b c0       	rjmp	.+22     	; 0x1cf2 <vfprintf+0x6ba>
    1cdc:	80 2f       	mov	r24, r16
    1cde:	86 78       	andi	r24, 0x86	; 134
    1ce0:	91 f0       	breq	.+36     	; 0x1d06 <vfprintf+0x6ce>
    1ce2:	01 ff       	sbrs	r16, 1
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x6b2>
    1ce6:	8b e2       	ldi	r24, 0x2B	; 43
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <vfprintf+0x6b4>
    1cea:	80 e2       	ldi	r24, 0x20	; 32
    1cec:	f7 fc       	sbrc	r15, 7
    1cee:	8d e2       	ldi	r24, 0x2D	; 45
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	b3 01       	movw	r22, r6
    1cf4:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1cf8:	06 c0       	rjmp	.+12     	; 0x1d06 <vfprintf+0x6ce>
    1cfa:	80 e3       	ldi	r24, 0x30	; 48
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	b3 01       	movw	r22, r6
    1d00:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1d04:	9a 94       	dec	r9
    1d06:	e9 14       	cp	r14, r9
    1d08:	c0 f3       	brcs	.-16     	; 0x1cfa <vfprintf+0x6c2>
    1d0a:	ea 94       	dec	r14
    1d0c:	e1 e0       	ldi	r30, 0x01	; 1
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	ec 0f       	add	r30, r28
    1d12:	fd 1f       	adc	r31, r29
    1d14:	ee 0d       	add	r30, r14
    1d16:	f1 1d       	adc	r31, r1
    1d18:	80 81       	ld	r24, Z
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	b3 01       	movw	r22, r6
    1d1e:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1d22:	ee 20       	and	r14, r14
    1d24:	91 f7       	brne	.-28     	; 0x1d0a <vfprintf+0x6d2>
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <vfprintf+0x6fc>
    1d28:	80 e2       	ldi	r24, 0x20	; 32
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	b3 01       	movw	r22, r6
    1d2e:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1d32:	8a 94       	dec	r8
    1d34:	88 20       	and	r8, r8
    1d36:	c1 f7       	brne	.-16     	; 0x1d28 <vfprintf+0x6f0>
    1d38:	97 cc       	rjmp	.-1746   	; 0x1668 <vfprintf+0x30>
    1d3a:	f3 01       	movw	r30, r6
    1d3c:	66 81       	ldd	r22, Z+6	; 0x06
    1d3e:	77 81       	ldd	r23, Z+7	; 0x07
    1d40:	cb 01       	movw	r24, r22
    1d42:	61 96       	adiw	r28, 0x11	; 17
    1d44:	e2 e1       	ldi	r30, 0x12	; 18
    1d46:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__>

00001d4a <malloc>:
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	bc 01       	movw	r22, r24
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	91 05       	cpc	r25, r1
    1d54:	10 f4       	brcc	.+4      	; 0x1d5a <malloc+0x10>
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	a0 91 a4 02 	lds	r26, 0x02A4
    1d5e:	b0 91 a5 02 	lds	r27, 0x02A5
    1d62:	ed 01       	movw	r28, r26
    1d64:	e0 e0       	ldi	r30, 0x00	; 0
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	21 c0       	rjmp	.+66     	; 0x1db0 <malloc+0x66>
    1d6e:	88 81       	ld	r24, Y
    1d70:	99 81       	ldd	r25, Y+1	; 0x01
    1d72:	86 17       	cp	r24, r22
    1d74:	97 07       	cpc	r25, r23
    1d76:	69 f4       	brne	.+26     	; 0x1d92 <malloc+0x48>
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	30 97       	sbiw	r30, 0x00	; 0
    1d7e:	19 f0       	breq	.+6      	; 0x1d86 <malloc+0x3c>
    1d80:	93 83       	std	Z+3, r25	; 0x03
    1d82:	82 83       	std	Z+2, r24	; 0x02
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <malloc+0x44>
    1d86:	90 93 a5 02 	sts	0x02A5, r25
    1d8a:	80 93 a4 02 	sts	0x02A4, r24
    1d8e:	fe 01       	movw	r30, r28
    1d90:	34 c0       	rjmp	.+104    	; 0x1dfa <malloc+0xb0>
    1d92:	68 17       	cp	r22, r24
    1d94:	79 07       	cpc	r23, r25
    1d96:	38 f4       	brcc	.+14     	; 0x1da6 <malloc+0x5c>
    1d98:	41 15       	cp	r20, r1
    1d9a:	51 05       	cpc	r21, r1
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <malloc+0x5a>
    1d9e:	84 17       	cp	r24, r20
    1da0:	95 07       	cpc	r25, r21
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <malloc+0x5c>
    1da4:	ac 01       	movw	r20, r24
    1da6:	fe 01       	movw	r30, r28
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	9c 01       	movw	r18, r24
    1dae:	e9 01       	movw	r28, r18
    1db0:	20 97       	sbiw	r28, 0x00	; 0
    1db2:	e9 f6       	brne	.-70     	; 0x1d6e <malloc+0x24>
    1db4:	41 15       	cp	r20, r1
    1db6:	51 05       	cpc	r21, r1
    1db8:	a9 f1       	breq	.+106    	; 0x1e24 <malloc+0xda>
    1dba:	ca 01       	movw	r24, r20
    1dbc:	86 1b       	sub	r24, r22
    1dbe:	97 0b       	sbc	r25, r23
    1dc0:	04 97       	sbiw	r24, 0x04	; 4
    1dc2:	08 f4       	brcc	.+2      	; 0x1dc6 <malloc+0x7c>
    1dc4:	ba 01       	movw	r22, r20
    1dc6:	e0 e0       	ldi	r30, 0x00	; 0
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	2a c0       	rjmp	.+84     	; 0x1e20 <malloc+0xd6>
    1dcc:	8d 91       	ld	r24, X+
    1dce:	9c 91       	ld	r25, X
    1dd0:	11 97       	sbiw	r26, 0x01	; 1
    1dd2:	84 17       	cp	r24, r20
    1dd4:	95 07       	cpc	r25, r21
    1dd6:	f9 f4       	brne	.+62     	; 0x1e16 <malloc+0xcc>
    1dd8:	64 17       	cp	r22, r20
    1dda:	75 07       	cpc	r23, r21
    1ddc:	81 f4       	brne	.+32     	; 0x1dfe <malloc+0xb4>
    1dde:	12 96       	adiw	r26, 0x02	; 2
    1de0:	8d 91       	ld	r24, X+
    1de2:	9c 91       	ld	r25, X
    1de4:	13 97       	sbiw	r26, 0x03	; 3
    1de6:	30 97       	sbiw	r30, 0x00	; 0
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <malloc+0xa6>
    1dea:	93 83       	std	Z+3, r25	; 0x03
    1dec:	82 83       	std	Z+2, r24	; 0x02
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <malloc+0xae>
    1df0:	90 93 a5 02 	sts	0x02A5, r25
    1df4:	80 93 a4 02 	sts	0x02A4, r24
    1df8:	fd 01       	movw	r30, r26
    1dfa:	32 96       	adiw	r30, 0x02	; 2
    1dfc:	4f c0       	rjmp	.+158    	; 0x1e9c <malloc+0x152>
    1dfe:	ca 01       	movw	r24, r20
    1e00:	86 1b       	sub	r24, r22
    1e02:	97 0b       	sbc	r25, r23
    1e04:	fd 01       	movw	r30, r26
    1e06:	e8 0f       	add	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	61 93       	st	Z+, r22
    1e0c:	71 93       	st	Z+, r23
    1e0e:	02 97       	sbiw	r24, 0x02	; 2
    1e10:	8d 93       	st	X+, r24
    1e12:	9c 93       	st	X, r25
    1e14:	43 c0       	rjmp	.+134    	; 0x1e9c <malloc+0x152>
    1e16:	fd 01       	movw	r30, r26
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	9c 01       	movw	r18, r24
    1e1e:	d9 01       	movw	r26, r18
    1e20:	10 97       	sbiw	r26, 0x00	; 0
    1e22:	a1 f6       	brne	.-88     	; 0x1dcc <malloc+0x82>
    1e24:	80 91 a2 02 	lds	r24, 0x02A2
    1e28:	90 91 a3 02 	lds	r25, 0x02A3
    1e2c:	89 2b       	or	r24, r25
    1e2e:	41 f4       	brne	.+16     	; 0x1e40 <malloc+0xf6>
    1e30:	80 91 2e 02 	lds	r24, 0x022E
    1e34:	90 91 2f 02 	lds	r25, 0x022F
    1e38:	90 93 a3 02 	sts	0x02A3, r25
    1e3c:	80 93 a2 02 	sts	0x02A2, r24
    1e40:	40 91 30 02 	lds	r20, 0x0230
    1e44:	50 91 31 02 	lds	r21, 0x0231
    1e48:	41 15       	cp	r20, r1
    1e4a:	51 05       	cpc	r21, r1
    1e4c:	41 f4       	brne	.+16     	; 0x1e5e <malloc+0x114>
    1e4e:	4d b7       	in	r20, 0x3d	; 61
    1e50:	5e b7       	in	r21, 0x3e	; 62
    1e52:	80 91 2c 02 	lds	r24, 0x022C
    1e56:	90 91 2d 02 	lds	r25, 0x022D
    1e5a:	48 1b       	sub	r20, r24
    1e5c:	59 0b       	sbc	r21, r25
    1e5e:	20 91 a2 02 	lds	r18, 0x02A2
    1e62:	30 91 a3 02 	lds	r19, 0x02A3
    1e66:	24 17       	cp	r18, r20
    1e68:	35 07       	cpc	r19, r21
    1e6a:	b0 f4       	brcc	.+44     	; 0x1e98 <malloc+0x14e>
    1e6c:	ca 01       	movw	r24, r20
    1e6e:	82 1b       	sub	r24, r18
    1e70:	93 0b       	sbc	r25, r19
    1e72:	86 17       	cp	r24, r22
    1e74:	97 07       	cpc	r25, r23
    1e76:	80 f0       	brcs	.+32     	; 0x1e98 <malloc+0x14e>
    1e78:	ab 01       	movw	r20, r22
    1e7a:	4e 5f       	subi	r20, 0xFE	; 254
    1e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7e:	84 17       	cp	r24, r20
    1e80:	95 07       	cpc	r25, r21
    1e82:	50 f0       	brcs	.+20     	; 0x1e98 <malloc+0x14e>
    1e84:	42 0f       	add	r20, r18
    1e86:	53 1f       	adc	r21, r19
    1e88:	50 93 a3 02 	sts	0x02A3, r21
    1e8c:	40 93 a2 02 	sts	0x02A2, r20
    1e90:	f9 01       	movw	r30, r18
    1e92:	61 93       	st	Z+, r22
    1e94:	71 93       	st	Z+, r23
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <malloc+0x152>
    1e98:	e0 e0       	ldi	r30, 0x00	; 0
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	cf 01       	movw	r24, r30
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	08 95       	ret

00001ea4 <free>:
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <free+0xa>
    1eac:	50 c0       	rjmp	.+160    	; 0x1f4e <free+0xaa>
    1eae:	ec 01       	movw	r28, r24
    1eb0:	22 97       	sbiw	r28, 0x02	; 2
    1eb2:	1b 82       	std	Y+3, r1	; 0x03
    1eb4:	1a 82       	std	Y+2, r1	; 0x02
    1eb6:	a0 91 a4 02 	lds	r26, 0x02A4
    1eba:	b0 91 a5 02 	lds	r27, 0x02A5
    1ebe:	10 97       	sbiw	r26, 0x00	; 0
    1ec0:	09 f1       	breq	.+66     	; 0x1f04 <free+0x60>
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	ac 17       	cp	r26, r28
    1ec8:	bd 07       	cpc	r27, r29
    1eca:	08 f1       	brcs	.+66     	; 0x1f0e <free+0x6a>
    1ecc:	bb 83       	std	Y+3, r27	; 0x03
    1ece:	aa 83       	std	Y+2, r26	; 0x02
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	21 91       	ld	r18, Z+
    1ed4:	31 91       	ld	r19, Z+
    1ed6:	e2 0f       	add	r30, r18
    1ed8:	f3 1f       	adc	r31, r19
    1eda:	ae 17       	cp	r26, r30
    1edc:	bf 07       	cpc	r27, r31
    1ede:	79 f4       	brne	.+30     	; 0x1efe <free+0x5a>
    1ee0:	8d 91       	ld	r24, X+
    1ee2:	9c 91       	ld	r25, X
    1ee4:	11 97       	sbiw	r26, 0x01	; 1
    1ee6:	28 0f       	add	r18, r24
    1ee8:	39 1f       	adc	r19, r25
    1eea:	2e 5f       	subi	r18, 0xFE	; 254
    1eec:	3f 4f       	sbci	r19, 0xFF	; 255
    1eee:	39 83       	std	Y+1, r19	; 0x01
    1ef0:	28 83       	st	Y, r18
    1ef2:	12 96       	adiw	r26, 0x02	; 2
    1ef4:	8d 91       	ld	r24, X+
    1ef6:	9c 91       	ld	r25, X
    1ef8:	13 97       	sbiw	r26, 0x03	; 3
    1efa:	9b 83       	std	Y+3, r25	; 0x03
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	41 15       	cp	r20, r1
    1f00:	51 05       	cpc	r21, r1
    1f02:	71 f4       	brne	.+28     	; 0x1f20 <free+0x7c>
    1f04:	d0 93 a5 02 	sts	0x02A5, r29
    1f08:	c0 93 a4 02 	sts	0x02A4, r28
    1f0c:	20 c0       	rjmp	.+64     	; 0x1f4e <free+0xaa>
    1f0e:	12 96       	adiw	r26, 0x02	; 2
    1f10:	8d 91       	ld	r24, X+
    1f12:	9c 91       	ld	r25, X
    1f14:	13 97       	sbiw	r26, 0x03	; 3
    1f16:	ad 01       	movw	r20, r26
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	11 f0       	breq	.+4      	; 0x1f20 <free+0x7c>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	d3 cf       	rjmp	.-90     	; 0x1ec6 <free+0x22>
    1f20:	fa 01       	movw	r30, r20
    1f22:	d3 83       	std	Z+3, r29	; 0x03
    1f24:	c2 83       	std	Z+2, r28	; 0x02
    1f26:	21 91       	ld	r18, Z+
    1f28:	31 91       	ld	r19, Z+
    1f2a:	e2 0f       	add	r30, r18
    1f2c:	f3 1f       	adc	r31, r19
    1f2e:	ce 17       	cp	r28, r30
    1f30:	df 07       	cpc	r29, r31
    1f32:	69 f4       	brne	.+26     	; 0x1f4e <free+0xaa>
    1f34:	88 81       	ld	r24, Y
    1f36:	99 81       	ldd	r25, Y+1	; 0x01
    1f38:	28 0f       	add	r18, r24
    1f3a:	39 1f       	adc	r19, r25
    1f3c:	2e 5f       	subi	r18, 0xFE	; 254
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	fa 01       	movw	r30, r20
    1f42:	31 83       	std	Z+1, r19	; 0x01
    1f44:	20 83       	st	Z, r18
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	93 83       	std	Z+3, r25	; 0x03
    1f4c:	82 83       	std	Z+2, r24	; 0x02
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <do_rand>:
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__prologue_saves__+0x10>
    1f60:	ec 01       	movw	r28, r24
    1f62:	a8 80       	ld	r10, Y
    1f64:	b9 80       	ldd	r11, Y+1	; 0x01
    1f66:	ca 80       	ldd	r12, Y+2	; 0x02
    1f68:	db 80       	ldd	r13, Y+3	; 0x03
    1f6a:	a1 14       	cp	r10, r1
    1f6c:	b1 04       	cpc	r11, r1
    1f6e:	c1 04       	cpc	r12, r1
    1f70:	d1 04       	cpc	r13, r1
    1f72:	41 f4       	brne	.+16     	; 0x1f84 <do_rand+0x30>
    1f74:	84 e2       	ldi	r24, 0x24	; 36
    1f76:	a8 2e       	mov	r10, r24
    1f78:	89 ed       	ldi	r24, 0xD9	; 217
    1f7a:	b8 2e       	mov	r11, r24
    1f7c:	8b e5       	ldi	r24, 0x5B	; 91
    1f7e:	c8 2e       	mov	r12, r24
    1f80:	87 e0       	ldi	r24, 0x07	; 7
    1f82:	d8 2e       	mov	r13, r24
    1f84:	c6 01       	movw	r24, r12
    1f86:	b5 01       	movw	r22, r10
    1f88:	2d e1       	ldi	r18, 0x1D	; 29
    1f8a:	33 ef       	ldi	r19, 0xF3	; 243
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divmodsi4>
    1f94:	27 ea       	ldi	r18, 0xA7	; 167
    1f96:	31 e4       	ldi	r19, 0x41	; 65
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsi3>
    1fa0:	7b 01       	movw	r14, r22
    1fa2:	8c 01       	movw	r16, r24
    1fa4:	c6 01       	movw	r24, r12
    1fa6:	b5 01       	movw	r22, r10
    1fa8:	2d e1       	ldi	r18, 0x1D	; 29
    1faa:	33 ef       	ldi	r19, 0xF3	; 243
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divmodsi4>
    1fb4:	ca 01       	movw	r24, r20
    1fb6:	b9 01       	movw	r22, r18
    1fb8:	2c ee       	ldi	r18, 0xEC	; 236
    1fba:	34 ef       	ldi	r19, 0xF4	; 244
    1fbc:	4f ef       	ldi	r20, 0xFF	; 255
    1fbe:	5f ef       	ldi	r21, 0xFF	; 255
    1fc0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsi3>
    1fc4:	6e 0d       	add	r22, r14
    1fc6:	7f 1d       	adc	r23, r15
    1fc8:	80 1f       	adc	r24, r16
    1fca:	91 1f       	adc	r25, r17
    1fcc:	97 ff       	sbrs	r25, 7
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <do_rand+0x84>
    1fd0:	61 50       	subi	r22, 0x01	; 1
    1fd2:	70 40       	sbci	r23, 0x00	; 0
    1fd4:	80 40       	sbci	r24, 0x00	; 0
    1fd6:	90 48       	sbci	r25, 0x80	; 128
    1fd8:	68 83       	st	Y, r22
    1fda:	79 83       	std	Y+1, r23	; 0x01
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
    1fde:	9b 83       	std	Y+3, r25	; 0x03
    1fe0:	9b 01       	movw	r18, r22
    1fe2:	3f 77       	andi	r19, 0x7F	; 127
    1fe4:	c9 01       	movw	r24, r18
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	ea e0       	ldi	r30, 0x0A	; 10
    1fec:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__epilogue_restores__+0x10>

00001ff0 <rand_r>:
    1ff0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <do_rand>
    1ff4:	08 95       	ret

00001ff6 <rand>:
    1ff6:	82 e3       	ldi	r24, 0x32	; 50
    1ff8:	92 e0       	ldi	r25, 0x02	; 2
    1ffa:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <do_rand>
    1ffe:	08 95       	ret

00002000 <srand>:
    2000:	a0 e0       	ldi	r26, 0x00	; 0
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	80 93 32 02 	sts	0x0232, r24
    2008:	90 93 33 02 	sts	0x0233, r25
    200c:	a0 93 34 02 	sts	0x0234, r26
    2010:	b0 93 35 02 	sts	0x0235, r27
    2014:	08 95       	ret

00002016 <atoi>:
    2016:	fc 01       	movw	r30, r24
    2018:	88 27       	eor	r24, r24
    201a:	99 27       	eor	r25, r25
    201c:	e8 94       	clt
    201e:	21 91       	ld	r18, Z+
    2020:	20 32       	cpi	r18, 0x20	; 32
    2022:	e9 f3       	breq	.-6      	; 0x201e <atoi+0x8>
    2024:	29 30       	cpi	r18, 0x09	; 9
    2026:	10 f0       	brcs	.+4      	; 0x202c <atoi+0x16>
    2028:	2e 30       	cpi	r18, 0x0E	; 14
    202a:	c8 f3       	brcs	.-14     	; 0x201e <atoi+0x8>
    202c:	2b 32       	cpi	r18, 0x2B	; 43
    202e:	41 f0       	breq	.+16     	; 0x2040 <atoi+0x2a>
    2030:	2d 32       	cpi	r18, 0x2D	; 45
    2032:	39 f4       	brne	.+14     	; 0x2042 <atoi+0x2c>
    2034:	68 94       	set
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <atoi+0x2a>
    2038:	0e 94 1a 11 	call	0x2234	; 0x2234 <__mulhi_const_10>
    203c:	82 0f       	add	r24, r18
    203e:	91 1d       	adc	r25, r1
    2040:	21 91       	ld	r18, Z+
    2042:	20 53       	subi	r18, 0x30	; 48
    2044:	2a 30       	cpi	r18, 0x0A	; 10
    2046:	c0 f3       	brcs	.-16     	; 0x2038 <atoi+0x22>
    2048:	1e f4       	brtc	.+6      	; 0x2050 <atoi+0x3a>
    204a:	90 95       	com	r25
    204c:	81 95       	neg	r24
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	08 95       	ret

00002052 <exit>:
    2052:	f8 94       	cli
    2054:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <_exit>

00002058 <__ftoa_engine>:
    2058:	28 30       	cpi	r18, 0x08	; 8
    205a:	08 f0       	brcs	.+2      	; 0x205e <__ftoa_engine+0x6>
    205c:	27 e0       	ldi	r18, 0x07	; 7
    205e:	33 27       	eor	r19, r19
    2060:	da 01       	movw	r26, r20
    2062:	99 0f       	add	r25, r25
    2064:	31 1d       	adc	r19, r1
    2066:	87 fd       	sbrc	r24, 7
    2068:	91 60       	ori	r25, 0x01	; 1
    206a:	00 96       	adiw	r24, 0x00	; 0
    206c:	61 05       	cpc	r22, r1
    206e:	71 05       	cpc	r23, r1
    2070:	39 f4       	brne	.+14     	; 0x2080 <__ftoa_engine+0x28>
    2072:	32 60       	ori	r19, 0x02	; 2
    2074:	2e 5f       	subi	r18, 0xFE	; 254
    2076:	3d 93       	st	X+, r19
    2078:	30 e3       	ldi	r19, 0x30	; 48
    207a:	2a 95       	dec	r18
    207c:	e1 f7       	brne	.-8      	; 0x2076 <__ftoa_engine+0x1e>
    207e:	08 95       	ret
    2080:	9f 3f       	cpi	r25, 0xFF	; 255
    2082:	30 f0       	brcs	.+12     	; 0x2090 <__ftoa_engine+0x38>
    2084:	80 38       	cpi	r24, 0x80	; 128
    2086:	71 05       	cpc	r23, r1
    2088:	61 05       	cpc	r22, r1
    208a:	09 f0       	breq	.+2      	; 0x208e <__ftoa_engine+0x36>
    208c:	3c 5f       	subi	r19, 0xFC	; 252
    208e:	3c 5f       	subi	r19, 0xFC	; 252
    2090:	3d 93       	st	X+, r19
    2092:	91 30       	cpi	r25, 0x01	; 1
    2094:	08 f0       	brcs	.+2      	; 0x2098 <__ftoa_engine+0x40>
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	91 1d       	adc	r25, r1
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	1f 93       	push	r17
    20a0:	0f 93       	push	r16
    20a2:	ff 92       	push	r15
    20a4:	ef 92       	push	r14
    20a6:	19 2f       	mov	r17, r25
    20a8:	98 7f       	andi	r25, 0xF8	; 248
    20aa:	96 95       	lsr	r25
    20ac:	e9 2f       	mov	r30, r25
    20ae:	96 95       	lsr	r25
    20b0:	96 95       	lsr	r25
    20b2:	e9 0f       	add	r30, r25
    20b4:	ff 27       	eor	r31, r31
    20b6:	e8 53       	subi	r30, 0x38	; 56
    20b8:	fe 4f       	sbci	r31, 0xFE	; 254
    20ba:	99 27       	eor	r25, r25
    20bc:	33 27       	eor	r19, r19
    20be:	ee 24       	eor	r14, r14
    20c0:	ff 24       	eor	r15, r15
    20c2:	a7 01       	movw	r20, r14
    20c4:	e7 01       	movw	r28, r14
    20c6:	05 90       	lpm	r0, Z+
    20c8:	08 94       	sec
    20ca:	07 94       	ror	r0
    20cc:	28 f4       	brcc	.+10     	; 0x20d8 <__ftoa_engine+0x80>
    20ce:	36 0f       	add	r19, r22
    20d0:	e7 1e       	adc	r14, r23
    20d2:	f8 1e       	adc	r15, r24
    20d4:	49 1f       	adc	r20, r25
    20d6:	51 1d       	adc	r21, r1
    20d8:	66 0f       	add	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	06 94       	lsr	r0
    20e2:	a1 f7       	brne	.-24     	; 0x20cc <__ftoa_engine+0x74>
    20e4:	05 90       	lpm	r0, Z+
    20e6:	07 94       	ror	r0
    20e8:	28 f4       	brcc	.+10     	; 0x20f4 <__ftoa_engine+0x9c>
    20ea:	e7 0e       	add	r14, r23
    20ec:	f8 1e       	adc	r15, r24
    20ee:	49 1f       	adc	r20, r25
    20f0:	56 1f       	adc	r21, r22
    20f2:	c1 1d       	adc	r28, r1
    20f4:	77 0f       	add	r23, r23
    20f6:	88 1f       	adc	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	66 1f       	adc	r22, r22
    20fc:	06 94       	lsr	r0
    20fe:	a1 f7       	brne	.-24     	; 0x20e8 <__ftoa_engine+0x90>
    2100:	05 90       	lpm	r0, Z+
    2102:	07 94       	ror	r0
    2104:	28 f4       	brcc	.+10     	; 0x2110 <__ftoa_engine+0xb8>
    2106:	f8 0e       	add	r15, r24
    2108:	49 1f       	adc	r20, r25
    210a:	56 1f       	adc	r21, r22
    210c:	c7 1f       	adc	r28, r23
    210e:	d1 1d       	adc	r29, r1
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	66 1f       	adc	r22, r22
    2116:	77 1f       	adc	r23, r23
    2118:	06 94       	lsr	r0
    211a:	a1 f7       	brne	.-24     	; 0x2104 <__ftoa_engine+0xac>
    211c:	05 90       	lpm	r0, Z+
    211e:	07 94       	ror	r0
    2120:	20 f4       	brcc	.+8      	; 0x212a <__ftoa_engine+0xd2>
    2122:	49 0f       	add	r20, r25
    2124:	56 1f       	adc	r21, r22
    2126:	c7 1f       	adc	r28, r23
    2128:	d8 1f       	adc	r29, r24
    212a:	99 0f       	add	r25, r25
    212c:	66 1f       	adc	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	88 1f       	adc	r24, r24
    2132:	06 94       	lsr	r0
    2134:	a9 f7       	brne	.-22     	; 0x2120 <__ftoa_engine+0xc8>
    2136:	84 91       	lpm	r24, Z+
    2138:	10 95       	com	r17
    213a:	17 70       	andi	r17, 0x07	; 7
    213c:	41 f0       	breq	.+16     	; 0x214e <__ftoa_engine+0xf6>
    213e:	d6 95       	lsr	r29
    2140:	c7 95       	ror	r28
    2142:	57 95       	ror	r21
    2144:	47 95       	ror	r20
    2146:	f7 94       	ror	r15
    2148:	e7 94       	ror	r14
    214a:	1a 95       	dec	r17
    214c:	c1 f7       	brne	.-16     	; 0x213e <__ftoa_engine+0xe6>
    214e:	ee e6       	ldi	r30, 0x6E	; 110
    2150:	f1 e0       	ldi	r31, 0x01	; 1
    2152:	68 94       	set
    2154:	15 90       	lpm	r1, Z+
    2156:	15 91       	lpm	r17, Z+
    2158:	35 91       	lpm	r19, Z+
    215a:	65 91       	lpm	r22, Z+
    215c:	95 91       	lpm	r25, Z+
    215e:	05 90       	lpm	r0, Z+
    2160:	7f e2       	ldi	r23, 0x2F	; 47
    2162:	73 95       	inc	r23
    2164:	e1 18       	sub	r14, r1
    2166:	f1 0a       	sbc	r15, r17
    2168:	43 0b       	sbc	r20, r19
    216a:	56 0b       	sbc	r21, r22
    216c:	c9 0b       	sbc	r28, r25
    216e:	d0 09       	sbc	r29, r0
    2170:	c0 f7       	brcc	.-16     	; 0x2162 <__ftoa_engine+0x10a>
    2172:	e1 0c       	add	r14, r1
    2174:	f1 1e       	adc	r15, r17
    2176:	43 1f       	adc	r20, r19
    2178:	56 1f       	adc	r21, r22
    217a:	c9 1f       	adc	r28, r25
    217c:	d0 1d       	adc	r29, r0
    217e:	7e f4       	brtc	.+30     	; 0x219e <__ftoa_engine+0x146>
    2180:	70 33       	cpi	r23, 0x30	; 48
    2182:	11 f4       	brne	.+4      	; 0x2188 <__ftoa_engine+0x130>
    2184:	8a 95       	dec	r24
    2186:	e6 cf       	rjmp	.-52     	; 0x2154 <__ftoa_engine+0xfc>
    2188:	e8 94       	clt
    218a:	01 50       	subi	r16, 0x01	; 1
    218c:	30 f0       	brcs	.+12     	; 0x219a <__ftoa_engine+0x142>
    218e:	08 0f       	add	r16, r24
    2190:	0a f4       	brpl	.+2      	; 0x2194 <__ftoa_engine+0x13c>
    2192:	00 27       	eor	r16, r16
    2194:	02 17       	cp	r16, r18
    2196:	08 f4       	brcc	.+2      	; 0x219a <__ftoa_engine+0x142>
    2198:	20 2f       	mov	r18, r16
    219a:	23 95       	inc	r18
    219c:	02 2f       	mov	r16, r18
    219e:	7a 33       	cpi	r23, 0x3A	; 58
    21a0:	28 f0       	brcs	.+10     	; 0x21ac <__ftoa_engine+0x154>
    21a2:	79 e3       	ldi	r23, 0x39	; 57
    21a4:	7d 93       	st	X+, r23
    21a6:	2a 95       	dec	r18
    21a8:	e9 f7       	brne	.-6      	; 0x21a4 <__ftoa_engine+0x14c>
    21aa:	10 c0       	rjmp	.+32     	; 0x21cc <__ftoa_engine+0x174>
    21ac:	7d 93       	st	X+, r23
    21ae:	2a 95       	dec	r18
    21b0:	89 f6       	brne	.-94     	; 0x2154 <__ftoa_engine+0xfc>
    21b2:	06 94       	lsr	r0
    21b4:	97 95       	ror	r25
    21b6:	67 95       	ror	r22
    21b8:	37 95       	ror	r19
    21ba:	17 95       	ror	r17
    21bc:	17 94       	ror	r1
    21be:	e1 18       	sub	r14, r1
    21c0:	f1 0a       	sbc	r15, r17
    21c2:	43 0b       	sbc	r20, r19
    21c4:	56 0b       	sbc	r21, r22
    21c6:	c9 0b       	sbc	r28, r25
    21c8:	d0 09       	sbc	r29, r0
    21ca:	98 f0       	brcs	.+38     	; 0x21f2 <__ftoa_engine+0x19a>
    21cc:	23 95       	inc	r18
    21ce:	7e 91       	ld	r23, -X
    21d0:	73 95       	inc	r23
    21d2:	7a 33       	cpi	r23, 0x3A	; 58
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <__ftoa_engine+0x180>
    21d6:	70 e3       	ldi	r23, 0x30	; 48
    21d8:	7c 93       	st	X, r23
    21da:	20 13       	cpse	r18, r16
    21dc:	b8 f7       	brcc	.-18     	; 0x21cc <__ftoa_engine+0x174>
    21de:	7e 91       	ld	r23, -X
    21e0:	70 61       	ori	r23, 0x10	; 16
    21e2:	7d 93       	st	X+, r23
    21e4:	30 f0       	brcs	.+12     	; 0x21f2 <__ftoa_engine+0x19a>
    21e6:	83 95       	inc	r24
    21e8:	71 e3       	ldi	r23, 0x31	; 49
    21ea:	7d 93       	st	X+, r23
    21ec:	70 e3       	ldi	r23, 0x30	; 48
    21ee:	2a 95       	dec	r18
    21f0:	e1 f7       	brne	.-8      	; 0x21ea <__ftoa_engine+0x192>
    21f2:	11 24       	eor	r1, r1
    21f4:	ef 90       	pop	r14
    21f6:	ff 90       	pop	r15
    21f8:	0f 91       	pop	r16
    21fa:	1f 91       	pop	r17
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	99 27       	eor	r25, r25
    2202:	87 fd       	sbrc	r24, 7
    2204:	90 95       	com	r25
    2206:	08 95       	ret

00002208 <strnlen_P>:
    2208:	fc 01       	movw	r30, r24
    220a:	05 90       	lpm	r0, Z+
    220c:	61 50       	subi	r22, 0x01	; 1
    220e:	70 40       	sbci	r23, 0x00	; 0
    2210:	01 10       	cpse	r0, r1
    2212:	d8 f7       	brcc	.-10     	; 0x220a <strnlen_P+0x2>
    2214:	80 95       	com	r24
    2216:	90 95       	com	r25
    2218:	8e 0f       	add	r24, r30
    221a:	9f 1f       	adc	r25, r31
    221c:	08 95       	ret

0000221e <strnlen>:
    221e:	fc 01       	movw	r30, r24
    2220:	61 50       	subi	r22, 0x01	; 1
    2222:	70 40       	sbci	r23, 0x00	; 0
    2224:	01 90       	ld	r0, Z+
    2226:	01 10       	cpse	r0, r1
    2228:	d8 f7       	brcc	.-10     	; 0x2220 <strnlen+0x2>
    222a:	80 95       	com	r24
    222c:	90 95       	com	r25
    222e:	8e 0f       	add	r24, r30
    2230:	9f 1f       	adc	r25, r31
    2232:	08 95       	ret

00002234 <__mulhi_const_10>:
    2234:	7a e0       	ldi	r23, 0x0A	; 10
    2236:	97 9f       	mul	r25, r23
    2238:	90 2d       	mov	r25, r0
    223a:	87 9f       	mul	r24, r23
    223c:	80 2d       	mov	r24, r0
    223e:	91 0d       	add	r25, r1
    2240:	11 24       	eor	r1, r1
    2242:	08 95       	ret

00002244 <fputc>:
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	8c 01       	movw	r16, r24
    224e:	eb 01       	movw	r28, r22
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	81 ff       	sbrs	r24, 1
    2254:	1b c0       	rjmp	.+54     	; 0x228c <fputc+0x48>
    2256:	82 ff       	sbrs	r24, 2
    2258:	0d c0       	rjmp	.+26     	; 0x2274 <fputc+0x30>
    225a:	2e 81       	ldd	r18, Y+6	; 0x06
    225c:	3f 81       	ldd	r19, Y+7	; 0x07
    225e:	8c 81       	ldd	r24, Y+4	; 0x04
    2260:	9d 81       	ldd	r25, Y+5	; 0x05
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	64 f4       	brge	.+24     	; 0x2280 <fputc+0x3c>
    2268:	e8 81       	ld	r30, Y
    226a:	f9 81       	ldd	r31, Y+1	; 0x01
    226c:	01 93       	st	Z+, r16
    226e:	f9 83       	std	Y+1, r31	; 0x01
    2270:	e8 83       	st	Y, r30
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <fputc+0x3c>
    2274:	e8 85       	ldd	r30, Y+8	; 0x08
    2276:	f9 85       	ldd	r31, Y+9	; 0x09
    2278:	80 2f       	mov	r24, r16
    227a:	19 95       	eicall
    227c:	89 2b       	or	r24, r25
    227e:	31 f4       	brne	.+12     	; 0x228c <fputc+0x48>
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	9f 83       	std	Y+7, r25	; 0x07
    2288:	8e 83       	std	Y+6, r24	; 0x06
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <fputc+0x4c>
    228c:	0f ef       	ldi	r16, 0xFF	; 255
    228e:	1f ef       	ldi	r17, 0xFF	; 255
    2290:	c8 01       	movw	r24, r16
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	08 95       	ret

0000229c <sprintf>:
    229c:	ae e0       	ldi	r26, 0x0E	; 14
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e4 e5       	ldi	r30, 0x54	; 84
    22a2:	f1 e1       	ldi	r31, 0x11	; 17
    22a4:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__prologue_saves__+0x1c>
    22a8:	0e 89       	ldd	r16, Y+22	; 0x16
    22aa:	1f 89       	ldd	r17, Y+23	; 0x17
    22ac:	86 e0       	ldi	r24, 0x06	; 6
    22ae:	8c 83       	std	Y+4, r24	; 0x04
    22b0:	1a 83       	std	Y+2, r17	; 0x02
    22b2:	09 83       	std	Y+1, r16	; 0x01
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	9f e7       	ldi	r25, 0x7F	; 127
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	9e 01       	movw	r18, r28
    22be:	26 5e       	subi	r18, 0xE6	; 230
    22c0:	3f 4f       	sbci	r19, 0xFF	; 255
    22c2:	ce 01       	movw	r24, r28
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	68 8d       	ldd	r22, Y+24	; 0x18
    22c8:	79 8d       	ldd	r23, Y+25	; 0x19
    22ca:	a9 01       	movw	r20, r18
    22cc:	0e 94 1c 0b 	call	0x1638	; 0x1638 <vfprintf>
    22d0:	2f 81       	ldd	r18, Y+7	; 0x07
    22d2:	38 85       	ldd	r19, Y+8	; 0x08
    22d4:	02 0f       	add	r16, r18
    22d6:	13 1f       	adc	r17, r19
    22d8:	f8 01       	movw	r30, r16
    22da:	10 82       	st	Z, r1
    22dc:	2e 96       	adiw	r28, 0x0e	; 14
    22de:	e4 e0       	ldi	r30, 0x04	; 4
    22e0:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__epilogue_restores__+0x1c>

000022e4 <__ultoa_invert>:
    22e4:	fa 01       	movw	r30, r20
    22e6:	aa 27       	eor	r26, r26
    22e8:	28 30       	cpi	r18, 0x08	; 8
    22ea:	51 f1       	breq	.+84     	; 0x2340 <__ultoa_invert+0x5c>
    22ec:	20 31       	cpi	r18, 0x10	; 16
    22ee:	81 f1       	breq	.+96     	; 0x2350 <__ultoa_invert+0x6c>
    22f0:	e8 94       	clt
    22f2:	6f 93       	push	r22
    22f4:	6e 7f       	andi	r22, 0xFE	; 254
    22f6:	6e 5f       	subi	r22, 0xFE	; 254
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	8f 4f       	sbci	r24, 0xFF	; 255
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	af 4f       	sbci	r26, 0xFF	; 255
    2300:	b1 e0       	ldi	r27, 0x01	; 1
    2302:	3e d0       	rcall	.+124    	; 0x2380 <__ultoa_invert+0x9c>
    2304:	b4 e0       	ldi	r27, 0x04	; 4
    2306:	3c d0       	rcall	.+120    	; 0x2380 <__ultoa_invert+0x9c>
    2308:	67 0f       	add	r22, r23
    230a:	78 1f       	adc	r23, r24
    230c:	89 1f       	adc	r24, r25
    230e:	9a 1f       	adc	r25, r26
    2310:	a1 1d       	adc	r26, r1
    2312:	68 0f       	add	r22, r24
    2314:	79 1f       	adc	r23, r25
    2316:	8a 1f       	adc	r24, r26
    2318:	91 1d       	adc	r25, r1
    231a:	a1 1d       	adc	r26, r1
    231c:	6a 0f       	add	r22, r26
    231e:	71 1d       	adc	r23, r1
    2320:	81 1d       	adc	r24, r1
    2322:	91 1d       	adc	r25, r1
    2324:	a1 1d       	adc	r26, r1
    2326:	20 d0       	rcall	.+64     	; 0x2368 <__ultoa_invert+0x84>
    2328:	09 f4       	brne	.+2      	; 0x232c <__ultoa_invert+0x48>
    232a:	68 94       	set
    232c:	3f 91       	pop	r19
    232e:	2a e0       	ldi	r18, 0x0A	; 10
    2330:	26 9f       	mul	r18, r22
    2332:	11 24       	eor	r1, r1
    2334:	30 19       	sub	r19, r0
    2336:	30 5d       	subi	r19, 0xD0	; 208
    2338:	31 93       	st	Z+, r19
    233a:	de f6       	brtc	.-74     	; 0x22f2 <__ultoa_invert+0xe>
    233c:	cf 01       	movw	r24, r30
    233e:	08 95       	ret
    2340:	46 2f       	mov	r20, r22
    2342:	47 70       	andi	r20, 0x07	; 7
    2344:	40 5d       	subi	r20, 0xD0	; 208
    2346:	41 93       	st	Z+, r20
    2348:	b3 e0       	ldi	r27, 0x03	; 3
    234a:	0f d0       	rcall	.+30     	; 0x236a <__ultoa_invert+0x86>
    234c:	c9 f7       	brne	.-14     	; 0x2340 <__ultoa_invert+0x5c>
    234e:	f6 cf       	rjmp	.-20     	; 0x233c <__ultoa_invert+0x58>
    2350:	46 2f       	mov	r20, r22
    2352:	4f 70       	andi	r20, 0x0F	; 15
    2354:	40 5d       	subi	r20, 0xD0	; 208
    2356:	4a 33       	cpi	r20, 0x3A	; 58
    2358:	18 f0       	brcs	.+6      	; 0x2360 <__ultoa_invert+0x7c>
    235a:	49 5d       	subi	r20, 0xD9	; 217
    235c:	31 fd       	sbrc	r19, 1
    235e:	40 52       	subi	r20, 0x20	; 32
    2360:	41 93       	st	Z+, r20
    2362:	02 d0       	rcall	.+4      	; 0x2368 <__ultoa_invert+0x84>
    2364:	a9 f7       	brne	.-22     	; 0x2350 <__ultoa_invert+0x6c>
    2366:	ea cf       	rjmp	.-44     	; 0x233c <__ultoa_invert+0x58>
    2368:	b4 e0       	ldi	r27, 0x04	; 4
    236a:	a6 95       	lsr	r26
    236c:	97 95       	ror	r25
    236e:	87 95       	ror	r24
    2370:	77 95       	ror	r23
    2372:	67 95       	ror	r22
    2374:	ba 95       	dec	r27
    2376:	c9 f7       	brne	.-14     	; 0x236a <__ultoa_invert+0x86>
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	61 05       	cpc	r22, r1
    237c:	71 05       	cpc	r23, r1
    237e:	08 95       	ret
    2380:	9b 01       	movw	r18, r22
    2382:	ac 01       	movw	r20, r24
    2384:	0a 2e       	mov	r0, r26
    2386:	06 94       	lsr	r0
    2388:	57 95       	ror	r21
    238a:	47 95       	ror	r20
    238c:	37 95       	ror	r19
    238e:	27 95       	ror	r18
    2390:	ba 95       	dec	r27
    2392:	c9 f7       	brne	.-14     	; 0x2386 <__ultoa_invert+0xa2>
    2394:	62 0f       	add	r22, r18
    2396:	73 1f       	adc	r23, r19
    2398:	84 1f       	adc	r24, r20
    239a:	95 1f       	adc	r25, r21
    239c:	a0 1d       	adc	r26, r0
    239e:	08 95       	ret

000023a0 <__subsf3>:
    23a0:	50 58       	subi	r21, 0x80	; 128

000023a2 <__addsf3>:
    23a2:	bb 27       	eor	r27, r27
    23a4:	aa 27       	eor	r26, r26
    23a6:	0e d0       	rcall	.+28     	; 0x23c4 <__addsf3x>
    23a8:	cb c1       	rjmp	.+918    	; 0x2740 <__fp_round>
    23aa:	bc d1       	rcall	.+888    	; 0x2724 <__fp_pscA>
    23ac:	30 f0       	brcs	.+12     	; 0x23ba <__addsf3+0x18>
    23ae:	c1 d1       	rcall	.+898    	; 0x2732 <__fp_pscB>
    23b0:	20 f0       	brcs	.+8      	; 0x23ba <__addsf3+0x18>
    23b2:	31 f4       	brne	.+12     	; 0x23c0 <__addsf3+0x1e>
    23b4:	9f 3f       	cpi	r25, 0xFF	; 255
    23b6:	11 f4       	brne	.+4      	; 0x23bc <__addsf3+0x1a>
    23b8:	1e f4       	brtc	.+6      	; 0x23c0 <__addsf3+0x1e>
    23ba:	8c c1       	rjmp	.+792    	; 0x26d4 <__fp_nan>
    23bc:	0e f4       	brtc	.+2      	; 0x23c0 <__addsf3+0x1e>
    23be:	e0 95       	com	r30
    23c0:	e7 fb       	bst	r30, 7
    23c2:	82 c1       	rjmp	.+772    	; 0x26c8 <__fp_inf>

000023c4 <__addsf3x>:
    23c4:	e9 2f       	mov	r30, r25
    23c6:	cd d1       	rcall	.+922    	; 0x2762 <__fp_split3>
    23c8:	80 f3       	brcs	.-32     	; 0x23aa <__addsf3+0x8>
    23ca:	ba 17       	cp	r27, r26
    23cc:	62 07       	cpc	r22, r18
    23ce:	73 07       	cpc	r23, r19
    23d0:	84 07       	cpc	r24, r20
    23d2:	95 07       	cpc	r25, r21
    23d4:	18 f0       	brcs	.+6      	; 0x23dc <__addsf3x+0x18>
    23d6:	71 f4       	brne	.+28     	; 0x23f4 <__addsf3x+0x30>
    23d8:	9e f5       	brtc	.+102    	; 0x2440 <__addsf3x+0x7c>
    23da:	e5 c1       	rjmp	.+970    	; 0x27a6 <__fp_zero>
    23dc:	0e f4       	brtc	.+2      	; 0x23e0 <__addsf3x+0x1c>
    23de:	e0 95       	com	r30
    23e0:	0b 2e       	mov	r0, r27
    23e2:	ba 2f       	mov	r27, r26
    23e4:	a0 2d       	mov	r26, r0
    23e6:	0b 01       	movw	r0, r22
    23e8:	b9 01       	movw	r22, r18
    23ea:	90 01       	movw	r18, r0
    23ec:	0c 01       	movw	r0, r24
    23ee:	ca 01       	movw	r24, r20
    23f0:	a0 01       	movw	r20, r0
    23f2:	11 24       	eor	r1, r1
    23f4:	ff 27       	eor	r31, r31
    23f6:	59 1b       	sub	r21, r25
    23f8:	99 f0       	breq	.+38     	; 0x2420 <__addsf3x+0x5c>
    23fa:	59 3f       	cpi	r21, 0xF9	; 249
    23fc:	50 f4       	brcc	.+20     	; 0x2412 <__addsf3x+0x4e>
    23fe:	50 3e       	cpi	r21, 0xE0	; 224
    2400:	68 f1       	brcs	.+90     	; 0x245c <__addsf3x+0x98>
    2402:	1a 16       	cp	r1, r26
    2404:	f0 40       	sbci	r31, 0x00	; 0
    2406:	a2 2f       	mov	r26, r18
    2408:	23 2f       	mov	r18, r19
    240a:	34 2f       	mov	r19, r20
    240c:	44 27       	eor	r20, r20
    240e:	58 5f       	subi	r21, 0xF8	; 248
    2410:	f3 cf       	rjmp	.-26     	; 0x23f8 <__addsf3x+0x34>
    2412:	46 95       	lsr	r20
    2414:	37 95       	ror	r19
    2416:	27 95       	ror	r18
    2418:	a7 95       	ror	r26
    241a:	f0 40       	sbci	r31, 0x00	; 0
    241c:	53 95       	inc	r21
    241e:	c9 f7       	brne	.-14     	; 0x2412 <__addsf3x+0x4e>
    2420:	7e f4       	brtc	.+30     	; 0x2440 <__addsf3x+0x7c>
    2422:	1f 16       	cp	r1, r31
    2424:	ba 0b       	sbc	r27, r26
    2426:	62 0b       	sbc	r22, r18
    2428:	73 0b       	sbc	r23, r19
    242a:	84 0b       	sbc	r24, r20
    242c:	ba f0       	brmi	.+46     	; 0x245c <__addsf3x+0x98>
    242e:	91 50       	subi	r25, 0x01	; 1
    2430:	a1 f0       	breq	.+40     	; 0x245a <__addsf3x+0x96>
    2432:	ff 0f       	add	r31, r31
    2434:	bb 1f       	adc	r27, r27
    2436:	66 1f       	adc	r22, r22
    2438:	77 1f       	adc	r23, r23
    243a:	88 1f       	adc	r24, r24
    243c:	c2 f7       	brpl	.-16     	; 0x242e <__addsf3x+0x6a>
    243e:	0e c0       	rjmp	.+28     	; 0x245c <__addsf3x+0x98>
    2440:	ba 0f       	add	r27, r26
    2442:	62 1f       	adc	r22, r18
    2444:	73 1f       	adc	r23, r19
    2446:	84 1f       	adc	r24, r20
    2448:	48 f4       	brcc	.+18     	; 0x245c <__addsf3x+0x98>
    244a:	87 95       	ror	r24
    244c:	77 95       	ror	r23
    244e:	67 95       	ror	r22
    2450:	b7 95       	ror	r27
    2452:	f7 95       	ror	r31
    2454:	9e 3f       	cpi	r25, 0xFE	; 254
    2456:	08 f0       	brcs	.+2      	; 0x245a <__addsf3x+0x96>
    2458:	b3 cf       	rjmp	.-154    	; 0x23c0 <__addsf3+0x1e>
    245a:	93 95       	inc	r25
    245c:	88 0f       	add	r24, r24
    245e:	08 f0       	brcs	.+2      	; 0x2462 <__addsf3x+0x9e>
    2460:	99 27       	eor	r25, r25
    2462:	ee 0f       	add	r30, r30
    2464:	97 95       	ror	r25
    2466:	87 95       	ror	r24
    2468:	08 95       	ret

0000246a <__cmpsf2>:
    246a:	0a d1       	rcall	.+532    	; 0x2680 <__fp_cmp>
    246c:	08 f4       	brcc	.+2      	; 0x2470 <__cmpsf2+0x6>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	08 95       	ret

00002472 <__divsf3>:
    2472:	0c d0       	rcall	.+24     	; 0x248c <__divsf3x>
    2474:	65 c1       	rjmp	.+714    	; 0x2740 <__fp_round>
    2476:	5d d1       	rcall	.+698    	; 0x2732 <__fp_pscB>
    2478:	40 f0       	brcs	.+16     	; 0x248a <__divsf3+0x18>
    247a:	54 d1       	rcall	.+680    	; 0x2724 <__fp_pscA>
    247c:	30 f0       	brcs	.+12     	; 0x248a <__divsf3+0x18>
    247e:	21 f4       	brne	.+8      	; 0x2488 <__divsf3+0x16>
    2480:	5f 3f       	cpi	r21, 0xFF	; 255
    2482:	19 f0       	breq	.+6      	; 0x248a <__divsf3+0x18>
    2484:	21 c1       	rjmp	.+578    	; 0x26c8 <__fp_inf>
    2486:	51 11       	cpse	r21, r1
    2488:	8f c1       	rjmp	.+798    	; 0x27a8 <__fp_szero>
    248a:	24 c1       	rjmp	.+584    	; 0x26d4 <__fp_nan>

0000248c <__divsf3x>:
    248c:	6a d1       	rcall	.+724    	; 0x2762 <__fp_split3>
    248e:	98 f3       	brcs	.-26     	; 0x2476 <__divsf3+0x4>

00002490 <__divsf3_pse>:
    2490:	99 23       	and	r25, r25
    2492:	c9 f3       	breq	.-14     	; 0x2486 <__divsf3+0x14>
    2494:	55 23       	and	r21, r21
    2496:	b1 f3       	breq	.-20     	; 0x2484 <__divsf3+0x12>
    2498:	95 1b       	sub	r25, r21
    249a:	55 0b       	sbc	r21, r21
    249c:	bb 27       	eor	r27, r27
    249e:	aa 27       	eor	r26, r26
    24a0:	62 17       	cp	r22, r18
    24a2:	73 07       	cpc	r23, r19
    24a4:	84 07       	cpc	r24, r20
    24a6:	38 f0       	brcs	.+14     	; 0x24b6 <__divsf3_pse+0x26>
    24a8:	9f 5f       	subi	r25, 0xFF	; 255
    24aa:	5f 4f       	sbci	r21, 0xFF	; 255
    24ac:	22 0f       	add	r18, r18
    24ae:	33 1f       	adc	r19, r19
    24b0:	44 1f       	adc	r20, r20
    24b2:	aa 1f       	adc	r26, r26
    24b4:	a9 f3       	breq	.-22     	; 0x24a0 <__divsf3_pse+0x10>
    24b6:	33 d0       	rcall	.+102    	; 0x251e <__divsf3_pse+0x8e>
    24b8:	0e 2e       	mov	r0, r30
    24ba:	3a f0       	brmi	.+14     	; 0x24ca <__divsf3_pse+0x3a>
    24bc:	e0 e8       	ldi	r30, 0x80	; 128
    24be:	30 d0       	rcall	.+96     	; 0x2520 <__divsf3_pse+0x90>
    24c0:	91 50       	subi	r25, 0x01	; 1
    24c2:	50 40       	sbci	r21, 0x00	; 0
    24c4:	e6 95       	lsr	r30
    24c6:	00 1c       	adc	r0, r0
    24c8:	ca f7       	brpl	.-14     	; 0x24bc <__divsf3_pse+0x2c>
    24ca:	29 d0       	rcall	.+82     	; 0x251e <__divsf3_pse+0x8e>
    24cc:	fe 2f       	mov	r31, r30
    24ce:	27 d0       	rcall	.+78     	; 0x251e <__divsf3_pse+0x8e>
    24d0:	66 0f       	add	r22, r22
    24d2:	77 1f       	adc	r23, r23
    24d4:	88 1f       	adc	r24, r24
    24d6:	bb 1f       	adc	r27, r27
    24d8:	26 17       	cp	r18, r22
    24da:	37 07       	cpc	r19, r23
    24dc:	48 07       	cpc	r20, r24
    24de:	ab 07       	cpc	r26, r27
    24e0:	b0 e8       	ldi	r27, 0x80	; 128
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <__divsf3_pse+0x56>
    24e4:	bb 0b       	sbc	r27, r27
    24e6:	80 2d       	mov	r24, r0
    24e8:	bf 01       	movw	r22, r30
    24ea:	ff 27       	eor	r31, r31
    24ec:	93 58       	subi	r25, 0x83	; 131
    24ee:	5f 4f       	sbci	r21, 0xFF	; 255
    24f0:	2a f0       	brmi	.+10     	; 0x24fc <__divsf3_pse+0x6c>
    24f2:	9e 3f       	cpi	r25, 0xFE	; 254
    24f4:	51 05       	cpc	r21, r1
    24f6:	68 f0       	brcs	.+26     	; 0x2512 <__divsf3_pse+0x82>
    24f8:	e7 c0       	rjmp	.+462    	; 0x26c8 <__fp_inf>
    24fa:	56 c1       	rjmp	.+684    	; 0x27a8 <__fp_szero>
    24fc:	5f 3f       	cpi	r21, 0xFF	; 255
    24fe:	ec f3       	brlt	.-6      	; 0x24fa <__divsf3_pse+0x6a>
    2500:	98 3e       	cpi	r25, 0xE8	; 232
    2502:	dc f3       	brlt	.-10     	; 0x24fa <__divsf3_pse+0x6a>
    2504:	86 95       	lsr	r24
    2506:	77 95       	ror	r23
    2508:	67 95       	ror	r22
    250a:	b7 95       	ror	r27
    250c:	f7 95       	ror	r31
    250e:	9f 5f       	subi	r25, 0xFF	; 255
    2510:	c9 f7       	brne	.-14     	; 0x2504 <__divsf3_pse+0x74>
    2512:	88 0f       	add	r24, r24
    2514:	91 1d       	adc	r25, r1
    2516:	96 95       	lsr	r25
    2518:	87 95       	ror	r24
    251a:	97 f9       	bld	r25, 7
    251c:	08 95       	ret
    251e:	e1 e0       	ldi	r30, 0x01	; 1
    2520:	66 0f       	add	r22, r22
    2522:	77 1f       	adc	r23, r23
    2524:	88 1f       	adc	r24, r24
    2526:	bb 1f       	adc	r27, r27
    2528:	62 17       	cp	r22, r18
    252a:	73 07       	cpc	r23, r19
    252c:	84 07       	cpc	r24, r20
    252e:	ba 07       	cpc	r27, r26
    2530:	20 f0       	brcs	.+8      	; 0x253a <__divsf3_pse+0xaa>
    2532:	62 1b       	sub	r22, r18
    2534:	73 0b       	sbc	r23, r19
    2536:	84 0b       	sbc	r24, r20
    2538:	ba 0b       	sbc	r27, r26
    253a:	ee 1f       	adc	r30, r30
    253c:	88 f7       	brcc	.-30     	; 0x2520 <__divsf3_pse+0x90>
    253e:	e0 95       	com	r30
    2540:	08 95       	ret
    2542:	19 f4       	brne	.+6      	; 0x254a <__divsf3_pse+0xba>
    2544:	0e f0       	brts	.+2      	; 0x2548 <__divsf3_pse+0xb8>
    2546:	c0 c0       	rjmp	.+384    	; 0x26c8 <__fp_inf>
    2548:	2e c1       	rjmp	.+604    	; 0x27a6 <__fp_zero>
    254a:	c4 c0       	rjmp	.+392    	; 0x26d4 <__fp_nan>

0000254c <exp>:
    254c:	12 d1       	rcall	.+548    	; 0x2772 <__fp_splitA>
    254e:	c8 f3       	brcs	.-14     	; 0x2542 <__divsf3_pse+0xb2>
    2550:	96 38       	cpi	r25, 0x86	; 134
    2552:	c0 f7       	brcc	.-16     	; 0x2544 <__divsf3_pse+0xb4>
    2554:	07 f8       	bld	r0, 7
    2556:	0f 92       	push	r0
    2558:	e8 94       	clt
    255a:	2b e3       	ldi	r18, 0x3B	; 59
    255c:	3a ea       	ldi	r19, 0xAA	; 170
    255e:	48 eb       	ldi	r20, 0xB8	; 184
    2560:	5f e7       	ldi	r21, 0x7F	; 127
    2562:	ef d1       	rcall	.+990    	; 0x2942 <__mulsf3_pse>
    2564:	0f 92       	push	r0
    2566:	0f 92       	push	r0
    2568:	0f 92       	push	r0
    256a:	4d b7       	in	r20, 0x3d	; 61
    256c:	5e b7       	in	r21, 0x3e	; 62
    256e:	0f 92       	push	r0
    2570:	a7 d1       	rcall	.+846    	; 0x28c0 <modf>
    2572:	e4 ee       	ldi	r30, 0xE4	; 228
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	b1 d0       	rcall	.+354    	; 0x26da <__fp_powser>
    2578:	4f 91       	pop	r20
    257a:	5f 91       	pop	r21
    257c:	ef 91       	pop	r30
    257e:	ff 91       	pop	r31
    2580:	e5 95       	asr	r30
    2582:	ee 1f       	adc	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	49 f0       	breq	.+18     	; 0x259a <exp+0x4e>
    2588:	fe 57       	subi	r31, 0x7E	; 126
    258a:	e0 68       	ori	r30, 0x80	; 128
    258c:	44 27       	eor	r20, r20
    258e:	ee 0f       	add	r30, r30
    2590:	44 1f       	adc	r20, r20
    2592:	fa 95       	dec	r31
    2594:	e1 f7       	brne	.-8      	; 0x258e <exp+0x42>
    2596:	41 95       	neg	r20
    2598:	55 0b       	sbc	r21, r21
    259a:	19 d1       	rcall	.+562    	; 0x27ce <ldexp>
    259c:	0f 90       	pop	r0
    259e:	07 fe       	sbrs	r0, 7
    25a0:	0d c1       	rjmp	.+538    	; 0x27bc <inverse>
    25a2:	08 95       	ret

000025a4 <__fixsfsi>:
    25a4:	04 d0       	rcall	.+8      	; 0x25ae <__fixunssfsi>
    25a6:	68 94       	set
    25a8:	b1 11       	cpse	r27, r1
    25aa:	fe c0       	rjmp	.+508    	; 0x27a8 <__fp_szero>
    25ac:	08 95       	ret

000025ae <__fixunssfsi>:
    25ae:	e1 d0       	rcall	.+450    	; 0x2772 <__fp_splitA>
    25b0:	88 f0       	brcs	.+34     	; 0x25d4 <__fixunssfsi+0x26>
    25b2:	9f 57       	subi	r25, 0x7F	; 127
    25b4:	90 f0       	brcs	.+36     	; 0x25da <__fixunssfsi+0x2c>
    25b6:	b9 2f       	mov	r27, r25
    25b8:	99 27       	eor	r25, r25
    25ba:	b7 51       	subi	r27, 0x17	; 23
    25bc:	a0 f0       	brcs	.+40     	; 0x25e6 <__fixunssfsi+0x38>
    25be:	d1 f0       	breq	.+52     	; 0x25f4 <__fixunssfsi+0x46>
    25c0:	66 0f       	add	r22, r22
    25c2:	77 1f       	adc	r23, r23
    25c4:	88 1f       	adc	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	1a f0       	brmi	.+6      	; 0x25d0 <__fixunssfsi+0x22>
    25ca:	ba 95       	dec	r27
    25cc:	c9 f7       	brne	.-14     	; 0x25c0 <__fixunssfsi+0x12>
    25ce:	12 c0       	rjmp	.+36     	; 0x25f4 <__fixunssfsi+0x46>
    25d0:	b1 30       	cpi	r27, 0x01	; 1
    25d2:	81 f0       	breq	.+32     	; 0x25f4 <__fixunssfsi+0x46>
    25d4:	e8 d0       	rcall	.+464    	; 0x27a6 <__fp_zero>
    25d6:	b1 e0       	ldi	r27, 0x01	; 1
    25d8:	08 95       	ret
    25da:	e5 c0       	rjmp	.+458    	; 0x27a6 <__fp_zero>
    25dc:	67 2f       	mov	r22, r23
    25de:	78 2f       	mov	r23, r24
    25e0:	88 27       	eor	r24, r24
    25e2:	b8 5f       	subi	r27, 0xF8	; 248
    25e4:	39 f0       	breq	.+14     	; 0x25f4 <__fixunssfsi+0x46>
    25e6:	b9 3f       	cpi	r27, 0xF9	; 249
    25e8:	cc f3       	brlt	.-14     	; 0x25dc <__fixunssfsi+0x2e>
    25ea:	86 95       	lsr	r24
    25ec:	77 95       	ror	r23
    25ee:	67 95       	ror	r22
    25f0:	b3 95       	inc	r27
    25f2:	d9 f7       	brne	.-10     	; 0x25ea <__fixunssfsi+0x3c>
    25f4:	3e f4       	brtc	.+14     	; 0x2604 <__fixunssfsi+0x56>
    25f6:	90 95       	com	r25
    25f8:	80 95       	com	r24
    25fa:	70 95       	com	r23
    25fc:	61 95       	neg	r22
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	8f 4f       	sbci	r24, 0xFF	; 255
    2602:	9f 4f       	sbci	r25, 0xFF	; 255
    2604:	08 95       	ret

00002606 <__floatunsisf>:
    2606:	e8 94       	clt
    2608:	09 c0       	rjmp	.+18     	; 0x261c <__floatsisf+0x12>

0000260a <__floatsisf>:
    260a:	97 fb       	bst	r25, 7
    260c:	3e f4       	brtc	.+14     	; 0x261c <__floatsisf+0x12>
    260e:	90 95       	com	r25
    2610:	80 95       	com	r24
    2612:	70 95       	com	r23
    2614:	61 95       	neg	r22
    2616:	7f 4f       	sbci	r23, 0xFF	; 255
    2618:	8f 4f       	sbci	r24, 0xFF	; 255
    261a:	9f 4f       	sbci	r25, 0xFF	; 255
    261c:	99 23       	and	r25, r25
    261e:	a9 f0       	breq	.+42     	; 0x264a <__floatsisf+0x40>
    2620:	f9 2f       	mov	r31, r25
    2622:	96 e9       	ldi	r25, 0x96	; 150
    2624:	bb 27       	eor	r27, r27
    2626:	93 95       	inc	r25
    2628:	f6 95       	lsr	r31
    262a:	87 95       	ror	r24
    262c:	77 95       	ror	r23
    262e:	67 95       	ror	r22
    2630:	b7 95       	ror	r27
    2632:	f1 11       	cpse	r31, r1
    2634:	f8 cf       	rjmp	.-16     	; 0x2626 <__floatsisf+0x1c>
    2636:	fa f4       	brpl	.+62     	; 0x2676 <__floatsisf+0x6c>
    2638:	bb 0f       	add	r27, r27
    263a:	11 f4       	brne	.+4      	; 0x2640 <__floatsisf+0x36>
    263c:	60 ff       	sbrs	r22, 0
    263e:	1b c0       	rjmp	.+54     	; 0x2676 <__floatsisf+0x6c>
    2640:	6f 5f       	subi	r22, 0xFF	; 255
    2642:	7f 4f       	sbci	r23, 0xFF	; 255
    2644:	8f 4f       	sbci	r24, 0xFF	; 255
    2646:	9f 4f       	sbci	r25, 0xFF	; 255
    2648:	16 c0       	rjmp	.+44     	; 0x2676 <__floatsisf+0x6c>
    264a:	88 23       	and	r24, r24
    264c:	11 f0       	breq	.+4      	; 0x2652 <__floatsisf+0x48>
    264e:	96 e9       	ldi	r25, 0x96	; 150
    2650:	11 c0       	rjmp	.+34     	; 0x2674 <__floatsisf+0x6a>
    2652:	77 23       	and	r23, r23
    2654:	21 f0       	breq	.+8      	; 0x265e <__floatsisf+0x54>
    2656:	9e e8       	ldi	r25, 0x8E	; 142
    2658:	87 2f       	mov	r24, r23
    265a:	76 2f       	mov	r23, r22
    265c:	05 c0       	rjmp	.+10     	; 0x2668 <__floatsisf+0x5e>
    265e:	66 23       	and	r22, r22
    2660:	71 f0       	breq	.+28     	; 0x267e <__floatsisf+0x74>
    2662:	96 e8       	ldi	r25, 0x86	; 134
    2664:	86 2f       	mov	r24, r22
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	2a f0       	brmi	.+10     	; 0x2676 <__floatsisf+0x6c>
    266c:	9a 95       	dec	r25
    266e:	66 0f       	add	r22, r22
    2670:	77 1f       	adc	r23, r23
    2672:	88 1f       	adc	r24, r24
    2674:	da f7       	brpl	.-10     	; 0x266c <__floatsisf+0x62>
    2676:	88 0f       	add	r24, r24
    2678:	96 95       	lsr	r25
    267a:	87 95       	ror	r24
    267c:	97 f9       	bld	r25, 7
    267e:	08 95       	ret

00002680 <__fp_cmp>:
    2680:	99 0f       	add	r25, r25
    2682:	00 08       	sbc	r0, r0
    2684:	55 0f       	add	r21, r21
    2686:	aa 0b       	sbc	r26, r26
    2688:	e0 e8       	ldi	r30, 0x80	; 128
    268a:	fe ef       	ldi	r31, 0xFE	; 254
    268c:	16 16       	cp	r1, r22
    268e:	17 06       	cpc	r1, r23
    2690:	e8 07       	cpc	r30, r24
    2692:	f9 07       	cpc	r31, r25
    2694:	c0 f0       	brcs	.+48     	; 0x26c6 <__fp_cmp+0x46>
    2696:	12 16       	cp	r1, r18
    2698:	13 06       	cpc	r1, r19
    269a:	e4 07       	cpc	r30, r20
    269c:	f5 07       	cpc	r31, r21
    269e:	98 f0       	brcs	.+38     	; 0x26c6 <__fp_cmp+0x46>
    26a0:	62 1b       	sub	r22, r18
    26a2:	73 0b       	sbc	r23, r19
    26a4:	84 0b       	sbc	r24, r20
    26a6:	95 0b       	sbc	r25, r21
    26a8:	39 f4       	brne	.+14     	; 0x26b8 <__fp_cmp+0x38>
    26aa:	0a 26       	eor	r0, r26
    26ac:	61 f0       	breq	.+24     	; 0x26c6 <__fp_cmp+0x46>
    26ae:	23 2b       	or	r18, r19
    26b0:	24 2b       	or	r18, r20
    26b2:	25 2b       	or	r18, r21
    26b4:	21 f4       	brne	.+8      	; 0x26be <__fp_cmp+0x3e>
    26b6:	08 95       	ret
    26b8:	0a 26       	eor	r0, r26
    26ba:	09 f4       	brne	.+2      	; 0x26be <__fp_cmp+0x3e>
    26bc:	a1 40       	sbci	r26, 0x01	; 1
    26be:	a6 95       	lsr	r26
    26c0:	8f ef       	ldi	r24, 0xFF	; 255
    26c2:	81 1d       	adc	r24, r1
    26c4:	81 1d       	adc	r24, r1
    26c6:	08 95       	ret

000026c8 <__fp_inf>:
    26c8:	97 f9       	bld	r25, 7
    26ca:	9f 67       	ori	r25, 0x7F	; 127
    26cc:	80 e8       	ldi	r24, 0x80	; 128
    26ce:	70 e0       	ldi	r23, 0x00	; 0
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	08 95       	ret

000026d4 <__fp_nan>:
    26d4:	9f ef       	ldi	r25, 0xFF	; 255
    26d6:	80 ec       	ldi	r24, 0xC0	; 192
    26d8:	08 95       	ret

000026da <__fp_powser>:
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	1f 93       	push	r17
    26e0:	0f 93       	push	r16
    26e2:	ff 92       	push	r15
    26e4:	ef 92       	push	r14
    26e6:	df 92       	push	r13
    26e8:	7b 01       	movw	r14, r22
    26ea:	8c 01       	movw	r16, r24
    26ec:	68 94       	set
    26ee:	05 c0       	rjmp	.+10     	; 0x26fa <__fp_powser+0x20>
    26f0:	da 2e       	mov	r13, r26
    26f2:	ef 01       	movw	r28, r30
    26f4:	24 d1       	rcall	.+584    	; 0x293e <__mulsf3x>
    26f6:	fe 01       	movw	r30, r28
    26f8:	e8 94       	clt
    26fa:	a5 91       	lpm	r26, Z+
    26fc:	25 91       	lpm	r18, Z+
    26fe:	35 91       	lpm	r19, Z+
    2700:	45 91       	lpm	r20, Z+
    2702:	55 91       	lpm	r21, Z+
    2704:	ae f3       	brts	.-22     	; 0x26f0 <__fp_powser+0x16>
    2706:	ef 01       	movw	r28, r30
    2708:	5d de       	rcall	.-838    	; 0x23c4 <__addsf3x>
    270a:	fe 01       	movw	r30, r28
    270c:	97 01       	movw	r18, r14
    270e:	a8 01       	movw	r20, r16
    2710:	da 94       	dec	r13
    2712:	79 f7       	brne	.-34     	; 0x26f2 <__fp_powser+0x18>
    2714:	df 90       	pop	r13
    2716:	ef 90       	pop	r14
    2718:	ff 90       	pop	r15
    271a:	0f 91       	pop	r16
    271c:	1f 91       	pop	r17
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <__fp_pscA>:
    2724:	00 24       	eor	r0, r0
    2726:	0a 94       	dec	r0
    2728:	16 16       	cp	r1, r22
    272a:	17 06       	cpc	r1, r23
    272c:	18 06       	cpc	r1, r24
    272e:	09 06       	cpc	r0, r25
    2730:	08 95       	ret

00002732 <__fp_pscB>:
    2732:	00 24       	eor	r0, r0
    2734:	0a 94       	dec	r0
    2736:	12 16       	cp	r1, r18
    2738:	13 06       	cpc	r1, r19
    273a:	14 06       	cpc	r1, r20
    273c:	05 06       	cpc	r0, r21
    273e:	08 95       	ret

00002740 <__fp_round>:
    2740:	09 2e       	mov	r0, r25
    2742:	03 94       	inc	r0
    2744:	00 0c       	add	r0, r0
    2746:	11 f4       	brne	.+4      	; 0x274c <__fp_round+0xc>
    2748:	88 23       	and	r24, r24
    274a:	52 f0       	brmi	.+20     	; 0x2760 <__fp_round+0x20>
    274c:	bb 0f       	add	r27, r27
    274e:	40 f4       	brcc	.+16     	; 0x2760 <__fp_round+0x20>
    2750:	bf 2b       	or	r27, r31
    2752:	11 f4       	brne	.+4      	; 0x2758 <__fp_round+0x18>
    2754:	60 ff       	sbrs	r22, 0
    2756:	04 c0       	rjmp	.+8      	; 0x2760 <__fp_round+0x20>
    2758:	6f 5f       	subi	r22, 0xFF	; 255
    275a:	7f 4f       	sbci	r23, 0xFF	; 255
    275c:	8f 4f       	sbci	r24, 0xFF	; 255
    275e:	9f 4f       	sbci	r25, 0xFF	; 255
    2760:	08 95       	ret

00002762 <__fp_split3>:
    2762:	57 fd       	sbrc	r21, 7
    2764:	90 58       	subi	r25, 0x80	; 128
    2766:	44 0f       	add	r20, r20
    2768:	55 1f       	adc	r21, r21
    276a:	59 f0       	breq	.+22     	; 0x2782 <__fp_splitA+0x10>
    276c:	5f 3f       	cpi	r21, 0xFF	; 255
    276e:	71 f0       	breq	.+28     	; 0x278c <__fp_splitA+0x1a>
    2770:	47 95       	ror	r20

00002772 <__fp_splitA>:
    2772:	88 0f       	add	r24, r24
    2774:	97 fb       	bst	r25, 7
    2776:	99 1f       	adc	r25, r25
    2778:	61 f0       	breq	.+24     	; 0x2792 <__fp_splitA+0x20>
    277a:	9f 3f       	cpi	r25, 0xFF	; 255
    277c:	79 f0       	breq	.+30     	; 0x279c <__fp_splitA+0x2a>
    277e:	87 95       	ror	r24
    2780:	08 95       	ret
    2782:	12 16       	cp	r1, r18
    2784:	13 06       	cpc	r1, r19
    2786:	14 06       	cpc	r1, r20
    2788:	55 1f       	adc	r21, r21
    278a:	f2 cf       	rjmp	.-28     	; 0x2770 <__fp_split3+0xe>
    278c:	46 95       	lsr	r20
    278e:	f1 df       	rcall	.-30     	; 0x2772 <__fp_splitA>
    2790:	08 c0       	rjmp	.+16     	; 0x27a2 <__fp_splitA+0x30>
    2792:	16 16       	cp	r1, r22
    2794:	17 06       	cpc	r1, r23
    2796:	18 06       	cpc	r1, r24
    2798:	99 1f       	adc	r25, r25
    279a:	f1 cf       	rjmp	.-30     	; 0x277e <__fp_splitA+0xc>
    279c:	86 95       	lsr	r24
    279e:	71 05       	cpc	r23, r1
    27a0:	61 05       	cpc	r22, r1
    27a2:	08 94       	sec
    27a4:	08 95       	ret

000027a6 <__fp_zero>:
    27a6:	e8 94       	clt

000027a8 <__fp_szero>:
    27a8:	bb 27       	eor	r27, r27
    27aa:	66 27       	eor	r22, r22
    27ac:	77 27       	eor	r23, r23
    27ae:	cb 01       	movw	r24, r22
    27b0:	97 f9       	bld	r25, 7
    27b2:	08 95       	ret

000027b4 <__gesf2>:
    27b4:	65 df       	rcall	.-310    	; 0x2680 <__fp_cmp>
    27b6:	08 f4       	brcc	.+2      	; 0x27ba <__gesf2+0x6>
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	08 95       	ret

000027bc <inverse>:
    27bc:	9b 01       	movw	r18, r22
    27be:	ac 01       	movw	r20, r24
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	80 e8       	ldi	r24, 0x80	; 128
    27c6:	9f e3       	ldi	r25, 0x3F	; 63
    27c8:	54 ce       	rjmp	.-856    	; 0x2472 <__divsf3>
    27ca:	7e cf       	rjmp	.-260    	; 0x26c8 <__fp_inf>
    27cc:	9d c1       	rjmp	.+826    	; 0x2b08 <__fp_mpack>

000027ce <ldexp>:
    27ce:	d1 df       	rcall	.-94     	; 0x2772 <__fp_splitA>
    27d0:	e8 f3       	brcs	.-6      	; 0x27cc <inverse+0x10>
    27d2:	99 23       	and	r25, r25
    27d4:	d9 f3       	breq	.-10     	; 0x27cc <inverse+0x10>
    27d6:	94 0f       	add	r25, r20
    27d8:	51 1d       	adc	r21, r1
    27da:	bb f3       	brvs	.-18     	; 0x27ca <inverse+0xe>
    27dc:	91 50       	subi	r25, 0x01	; 1
    27de:	50 40       	sbci	r21, 0x00	; 0
    27e0:	94 f0       	brlt	.+36     	; 0x2806 <ldexp+0x38>
    27e2:	59 f0       	breq	.+22     	; 0x27fa <ldexp+0x2c>
    27e4:	88 23       	and	r24, r24
    27e6:	32 f0       	brmi	.+12     	; 0x27f4 <ldexp+0x26>
    27e8:	66 0f       	add	r22, r22
    27ea:	77 1f       	adc	r23, r23
    27ec:	88 1f       	adc	r24, r24
    27ee:	91 50       	subi	r25, 0x01	; 1
    27f0:	50 40       	sbci	r21, 0x00	; 0
    27f2:	c1 f7       	brne	.-16     	; 0x27e4 <ldexp+0x16>
    27f4:	9e 3f       	cpi	r25, 0xFE	; 254
    27f6:	51 05       	cpc	r21, r1
    27f8:	44 f7       	brge	.-48     	; 0x27ca <inverse+0xe>
    27fa:	88 0f       	add	r24, r24
    27fc:	91 1d       	adc	r25, r1
    27fe:	96 95       	lsr	r25
    2800:	87 95       	ror	r24
    2802:	97 f9       	bld	r25, 7
    2804:	08 95       	ret
    2806:	5f 3f       	cpi	r21, 0xFF	; 255
    2808:	ac f0       	brlt	.+42     	; 0x2834 <ldexp+0x66>
    280a:	98 3e       	cpi	r25, 0xE8	; 232
    280c:	9c f0       	brlt	.+38     	; 0x2834 <ldexp+0x66>
    280e:	bb 27       	eor	r27, r27
    2810:	86 95       	lsr	r24
    2812:	77 95       	ror	r23
    2814:	67 95       	ror	r22
    2816:	b7 95       	ror	r27
    2818:	08 f4       	brcc	.+2      	; 0x281c <ldexp+0x4e>
    281a:	b1 60       	ori	r27, 0x01	; 1
    281c:	93 95       	inc	r25
    281e:	c1 f7       	brne	.-16     	; 0x2810 <ldexp+0x42>
    2820:	bb 0f       	add	r27, r27
    2822:	58 f7       	brcc	.-42     	; 0x27fa <ldexp+0x2c>
    2824:	11 f4       	brne	.+4      	; 0x282a <ldexp+0x5c>
    2826:	60 ff       	sbrs	r22, 0
    2828:	e8 cf       	rjmp	.-48     	; 0x27fa <ldexp+0x2c>
    282a:	6f 5f       	subi	r22, 0xFF	; 255
    282c:	7f 4f       	sbci	r23, 0xFF	; 255
    282e:	8f 4f       	sbci	r24, 0xFF	; 255
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	e3 cf       	rjmp	.-58     	; 0x27fa <ldexp+0x2c>
    2834:	b9 cf       	rjmp	.-142    	; 0x27a8 <__fp_szero>
    2836:	0e f0       	brts	.+2      	; 0x283a <ldexp+0x6c>
    2838:	67 c1       	rjmp	.+718    	; 0x2b08 <__fp_mpack>
    283a:	4c cf       	rjmp	.-360    	; 0x26d4 <__fp_nan>
    283c:	68 94       	set
    283e:	44 cf       	rjmp	.-376    	; 0x26c8 <__fp_inf>

00002840 <log>:
    2840:	98 df       	rcall	.-208    	; 0x2772 <__fp_splitA>
    2842:	c8 f3       	brcs	.-14     	; 0x2836 <ldexp+0x68>
    2844:	99 23       	and	r25, r25
    2846:	d1 f3       	breq	.-12     	; 0x283c <ldexp+0x6e>
    2848:	c6 f3       	brts	.-16     	; 0x283a <ldexp+0x6c>
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	1f 93       	push	r17
    2850:	0f 93       	push	r16
    2852:	ff 92       	push	r15
    2854:	c9 2f       	mov	r28, r25
    2856:	dd 27       	eor	r29, r29
    2858:	88 23       	and	r24, r24
    285a:	2a f0       	brmi	.+10     	; 0x2866 <log+0x26>
    285c:	21 97       	sbiw	r28, 0x01	; 1
    285e:	66 0f       	add	r22, r22
    2860:	77 1f       	adc	r23, r23
    2862:	88 1f       	adc	r24, r24
    2864:	da f7       	brpl	.-10     	; 0x285c <log+0x1c>
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e8       	ldi	r20, 0x80	; 128
    286c:	5f eb       	ldi	r21, 0xBF	; 191
    286e:	9f e3       	ldi	r25, 0x3F	; 63
    2870:	88 39       	cpi	r24, 0x98	; 152
    2872:	20 f0       	brcs	.+8      	; 0x287c <log+0x3c>
    2874:	80 3e       	cpi	r24, 0xE0	; 224
    2876:	30 f0       	brcs	.+12     	; 0x2884 <log+0x44>
    2878:	21 96       	adiw	r28, 0x01	; 1
    287a:	8f 77       	andi	r24, 0x7F	; 127
    287c:	92 dd       	rcall	.-1244   	; 0x23a2 <__addsf3>
    287e:	ec e0       	ldi	r30, 0x0C	; 12
    2880:	f1 e0       	ldi	r31, 0x01	; 1
    2882:	03 c0       	rjmp	.+6      	; 0x288a <log+0x4a>
    2884:	8e dd       	rcall	.-1252   	; 0x23a2 <__addsf3>
    2886:	e9 e3       	ldi	r30, 0x39	; 57
    2888:	f1 e0       	ldi	r31, 0x01	; 1
    288a:	27 df       	rcall	.-434    	; 0x26da <__fp_powser>
    288c:	8b 01       	movw	r16, r22
    288e:	be 01       	movw	r22, r28
    2890:	ec 01       	movw	r28, r24
    2892:	fb 2e       	mov	r15, r27
    2894:	6f 57       	subi	r22, 0x7F	; 127
    2896:	71 09       	sbc	r23, r1
    2898:	75 95       	asr	r23
    289a:	77 1f       	adc	r23, r23
    289c:	88 0b       	sbc	r24, r24
    289e:	99 0b       	sbc	r25, r25
    28a0:	b4 de       	rcall	.-664    	; 0x260a <__floatsisf>
    28a2:	28 e1       	ldi	r18, 0x18	; 24
    28a4:	32 e7       	ldi	r19, 0x72	; 114
    28a6:	41 e3       	ldi	r20, 0x31	; 49
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	49 d0       	rcall	.+146    	; 0x293e <__mulsf3x>
    28ac:	af 2d       	mov	r26, r15
    28ae:	98 01       	movw	r18, r16
    28b0:	ae 01       	movw	r20, r28
    28b2:	ff 90       	pop	r15
    28b4:	0f 91       	pop	r16
    28b6:	1f 91       	pop	r17
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	83 dd       	rcall	.-1274   	; 0x23c4 <__addsf3x>
    28be:	40 cf       	rjmp	.-384    	; 0x2740 <__fp_round>

000028c0 <modf>:
    28c0:	fa 01       	movw	r30, r20
    28c2:	dc 01       	movw	r26, r24
    28c4:	aa 0f       	add	r26, r26
    28c6:	bb 1f       	adc	r27, r27
    28c8:	9b 01       	movw	r18, r22
    28ca:	ac 01       	movw	r20, r24
    28cc:	bf 57       	subi	r27, 0x7F	; 127
    28ce:	28 f4       	brcc	.+10     	; 0x28da <modf+0x1a>
    28d0:	22 27       	eor	r18, r18
    28d2:	33 27       	eor	r19, r19
    28d4:	44 27       	eor	r20, r20
    28d6:	50 78       	andi	r21, 0x80	; 128
    28d8:	1f c0       	rjmp	.+62     	; 0x2918 <modf+0x58>
    28da:	b7 51       	subi	r27, 0x17	; 23
    28dc:	88 f4       	brcc	.+34     	; 0x2900 <modf+0x40>
    28de:	ab 2f       	mov	r26, r27
    28e0:	00 24       	eor	r0, r0
    28e2:	46 95       	lsr	r20
    28e4:	37 95       	ror	r19
    28e6:	27 95       	ror	r18
    28e8:	01 1c       	adc	r0, r1
    28ea:	a3 95       	inc	r26
    28ec:	d2 f3       	brmi	.-12     	; 0x28e2 <modf+0x22>
    28ee:	00 20       	and	r0, r0
    28f0:	69 f0       	breq	.+26     	; 0x290c <modf+0x4c>
    28f2:	22 0f       	add	r18, r18
    28f4:	33 1f       	adc	r19, r19
    28f6:	44 1f       	adc	r20, r20
    28f8:	b3 95       	inc	r27
    28fa:	da f3       	brmi	.-10     	; 0x28f2 <modf+0x32>
    28fc:	0d d0       	rcall	.+26     	; 0x2918 <modf+0x58>
    28fe:	50 cd       	rjmp	.-1376   	; 0x23a0 <__subsf3>
    2900:	61 30       	cpi	r22, 0x01	; 1
    2902:	71 05       	cpc	r23, r1
    2904:	a0 e8       	ldi	r26, 0x80	; 128
    2906:	8a 07       	cpc	r24, r26
    2908:	b9 46       	sbci	r27, 0x69	; 105
    290a:	30 f4       	brcc	.+12     	; 0x2918 <modf+0x58>
    290c:	9b 01       	movw	r18, r22
    290e:	ac 01       	movw	r20, r24
    2910:	66 27       	eor	r22, r22
    2912:	77 27       	eor	r23, r23
    2914:	88 27       	eor	r24, r24
    2916:	90 78       	andi	r25, 0x80	; 128
    2918:	30 96       	adiw	r30, 0x00	; 0
    291a:	21 f0       	breq	.+8      	; 0x2924 <modf+0x64>
    291c:	20 83       	st	Z, r18
    291e:	31 83       	std	Z+1, r19	; 0x01
    2920:	42 83       	std	Z+2, r20	; 0x02
    2922:	53 83       	std	Z+3, r21	; 0x03
    2924:	08 95       	ret

00002926 <__mulsf3>:
    2926:	0b d0       	rcall	.+22     	; 0x293e <__mulsf3x>
    2928:	0b cf       	rjmp	.-490    	; 0x2740 <__fp_round>
    292a:	fc de       	rcall	.-520    	; 0x2724 <__fp_pscA>
    292c:	28 f0       	brcs	.+10     	; 0x2938 <__mulsf3+0x12>
    292e:	01 df       	rcall	.-510    	; 0x2732 <__fp_pscB>
    2930:	18 f0       	brcs	.+6      	; 0x2938 <__mulsf3+0x12>
    2932:	95 23       	and	r25, r21
    2934:	09 f0       	breq	.+2      	; 0x2938 <__mulsf3+0x12>
    2936:	c8 ce       	rjmp	.-624    	; 0x26c8 <__fp_inf>
    2938:	cd ce       	rjmp	.-614    	; 0x26d4 <__fp_nan>
    293a:	11 24       	eor	r1, r1
    293c:	35 cf       	rjmp	.-406    	; 0x27a8 <__fp_szero>

0000293e <__mulsf3x>:
    293e:	11 df       	rcall	.-478    	; 0x2762 <__fp_split3>
    2940:	a0 f3       	brcs	.-24     	; 0x292a <__mulsf3+0x4>

00002942 <__mulsf3_pse>:
    2942:	95 9f       	mul	r25, r21
    2944:	d1 f3       	breq	.-12     	; 0x293a <__mulsf3+0x14>
    2946:	95 0f       	add	r25, r21
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	55 1f       	adc	r21, r21
    294c:	62 9f       	mul	r22, r18
    294e:	f0 01       	movw	r30, r0
    2950:	72 9f       	mul	r23, r18
    2952:	bb 27       	eor	r27, r27
    2954:	f0 0d       	add	r31, r0
    2956:	b1 1d       	adc	r27, r1
    2958:	63 9f       	mul	r22, r19
    295a:	aa 27       	eor	r26, r26
    295c:	f0 0d       	add	r31, r0
    295e:	b1 1d       	adc	r27, r1
    2960:	aa 1f       	adc	r26, r26
    2962:	64 9f       	mul	r22, r20
    2964:	66 27       	eor	r22, r22
    2966:	b0 0d       	add	r27, r0
    2968:	a1 1d       	adc	r26, r1
    296a:	66 1f       	adc	r22, r22
    296c:	82 9f       	mul	r24, r18
    296e:	22 27       	eor	r18, r18
    2970:	b0 0d       	add	r27, r0
    2972:	a1 1d       	adc	r26, r1
    2974:	62 1f       	adc	r22, r18
    2976:	73 9f       	mul	r23, r19
    2978:	b0 0d       	add	r27, r0
    297a:	a1 1d       	adc	r26, r1
    297c:	62 1f       	adc	r22, r18
    297e:	83 9f       	mul	r24, r19
    2980:	a0 0d       	add	r26, r0
    2982:	61 1d       	adc	r22, r1
    2984:	22 1f       	adc	r18, r18
    2986:	74 9f       	mul	r23, r20
    2988:	33 27       	eor	r19, r19
    298a:	a0 0d       	add	r26, r0
    298c:	61 1d       	adc	r22, r1
    298e:	23 1f       	adc	r18, r19
    2990:	84 9f       	mul	r24, r20
    2992:	60 0d       	add	r22, r0
    2994:	21 1d       	adc	r18, r1
    2996:	82 2f       	mov	r24, r18
    2998:	76 2f       	mov	r23, r22
    299a:	6a 2f       	mov	r22, r26
    299c:	11 24       	eor	r1, r1
    299e:	9f 57       	subi	r25, 0x7F	; 127
    29a0:	50 40       	sbci	r21, 0x00	; 0
    29a2:	8a f0       	brmi	.+34     	; 0x29c6 <__mulsf3_pse+0x84>
    29a4:	e1 f0       	breq	.+56     	; 0x29de <__mulsf3_pse+0x9c>
    29a6:	88 23       	and	r24, r24
    29a8:	4a f0       	brmi	.+18     	; 0x29bc <__mulsf3_pse+0x7a>
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	bb 1f       	adc	r27, r27
    29b0:	66 1f       	adc	r22, r22
    29b2:	77 1f       	adc	r23, r23
    29b4:	88 1f       	adc	r24, r24
    29b6:	91 50       	subi	r25, 0x01	; 1
    29b8:	50 40       	sbci	r21, 0x00	; 0
    29ba:	a9 f7       	brne	.-22     	; 0x29a6 <__mulsf3_pse+0x64>
    29bc:	9e 3f       	cpi	r25, 0xFE	; 254
    29be:	51 05       	cpc	r21, r1
    29c0:	70 f0       	brcs	.+28     	; 0x29de <__mulsf3_pse+0x9c>
    29c2:	82 ce       	rjmp	.-764    	; 0x26c8 <__fp_inf>
    29c4:	f1 ce       	rjmp	.-542    	; 0x27a8 <__fp_szero>
    29c6:	5f 3f       	cpi	r21, 0xFF	; 255
    29c8:	ec f3       	brlt	.-6      	; 0x29c4 <__mulsf3_pse+0x82>
    29ca:	98 3e       	cpi	r25, 0xE8	; 232
    29cc:	dc f3       	brlt	.-10     	; 0x29c4 <__mulsf3_pse+0x82>
    29ce:	86 95       	lsr	r24
    29d0:	77 95       	ror	r23
    29d2:	67 95       	ror	r22
    29d4:	b7 95       	ror	r27
    29d6:	f7 95       	ror	r31
    29d8:	e7 95       	ror	r30
    29da:	9f 5f       	subi	r25, 0xFF	; 255
    29dc:	c1 f7       	brne	.-16     	; 0x29ce <__mulsf3_pse+0x8c>
    29de:	fe 2b       	or	r31, r30
    29e0:	88 0f       	add	r24, r24
    29e2:	91 1d       	adc	r25, r1
    29e4:	96 95       	lsr	r25
    29e6:	87 95       	ror	r24
    29e8:	97 f9       	bld	r25, 7
    29ea:	08 95       	ret

000029ec <pow>:
    29ec:	fa 01       	movw	r30, r20
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	30 96       	adiw	r30, 0x00	; 0
    29f4:	21 05       	cpc	r18, r1
    29f6:	31 05       	cpc	r19, r1
    29f8:	99 f1       	breq	.+102    	; 0x2a60 <pow+0x74>
    29fa:	61 15       	cp	r22, r1
    29fc:	71 05       	cpc	r23, r1
    29fe:	61 f4       	brne	.+24     	; 0x2a18 <pow+0x2c>
    2a00:	80 38       	cpi	r24, 0x80	; 128
    2a02:	bf e3       	ldi	r27, 0x3F	; 63
    2a04:	9b 07       	cpc	r25, r27
    2a06:	49 f1       	breq	.+82     	; 0x2a5a <pow+0x6e>
    2a08:	68 94       	set
    2a0a:	90 38       	cpi	r25, 0x80	; 128
    2a0c:	81 05       	cpc	r24, r1
    2a0e:	61 f0       	breq	.+24     	; 0x2a28 <pow+0x3c>
    2a10:	80 38       	cpi	r24, 0x80	; 128
    2a12:	bf ef       	ldi	r27, 0xFF	; 255
    2a14:	9b 07       	cpc	r25, r27
    2a16:	41 f0       	breq	.+16     	; 0x2a28 <pow+0x3c>
    2a18:	99 23       	and	r25, r25
    2a1a:	42 f5       	brpl	.+80     	; 0x2a6c <pow+0x80>
    2a1c:	ff 3f       	cpi	r31, 0xFF	; 255
    2a1e:	e1 05       	cpc	r30, r1
    2a20:	31 05       	cpc	r19, r1
    2a22:	21 05       	cpc	r18, r1
    2a24:	11 f1       	breq	.+68     	; 0x2a6a <pow+0x7e>
    2a26:	e8 94       	clt
    2a28:	08 94       	sec
    2a2a:	e7 95       	ror	r30
    2a2c:	d9 01       	movw	r26, r18
    2a2e:	aa 23       	and	r26, r26
    2a30:	29 f4       	brne	.+10     	; 0x2a3c <pow+0x50>
    2a32:	ab 2f       	mov	r26, r27
    2a34:	be 2f       	mov	r27, r30
    2a36:	f8 5f       	subi	r31, 0xF8	; 248
    2a38:	d0 f3       	brcs	.-12     	; 0x2a2e <pow+0x42>
    2a3a:	10 c0       	rjmp	.+32     	; 0x2a5c <pow+0x70>
    2a3c:	ff 5f       	subi	r31, 0xFF	; 255
    2a3e:	70 f4       	brcc	.+28     	; 0x2a5c <pow+0x70>
    2a40:	a6 95       	lsr	r26
    2a42:	e0 f7       	brcc	.-8      	; 0x2a3c <pow+0x50>
    2a44:	f7 39       	cpi	r31, 0x97	; 151
    2a46:	50 f0       	brcs	.+20     	; 0x2a5c <pow+0x70>
    2a48:	19 f0       	breq	.+6      	; 0x2a50 <pow+0x64>
    2a4a:	ff 3a       	cpi	r31, 0xAF	; 175
    2a4c:	38 f4       	brcc	.+14     	; 0x2a5c <pow+0x70>
    2a4e:	9f 77       	andi	r25, 0x7F	; 127
    2a50:	9f 93       	push	r25
    2a52:	0c d0       	rcall	.+24     	; 0x2a6c <pow+0x80>
    2a54:	0f 90       	pop	r0
    2a56:	07 fc       	sbrc	r0, 7
    2a58:	90 58       	subi	r25, 0x80	; 128
    2a5a:	08 95       	ret
    2a5c:	3e f0       	brts	.+14     	; 0x2a6c <pow+0x80>
    2a5e:	3a ce       	rjmp	.-908    	; 0x26d4 <__fp_nan>
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	80 e8       	ldi	r24, 0x80	; 128
    2a66:	9f e3       	ldi	r25, 0x3F	; 63
    2a68:	08 95       	ret
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	9f 77       	andi	r25, 0x7F	; 127
    2a6e:	5f 93       	push	r21
    2a70:	4f 93       	push	r20
    2a72:	3f 93       	push	r19
    2a74:	2f 93       	push	r18
    2a76:	e4 de       	rcall	.-568    	; 0x2840 <log>
    2a78:	2f 91       	pop	r18
    2a7a:	3f 91       	pop	r19
    2a7c:	4f 91       	pop	r20
    2a7e:	5f 91       	pop	r21
    2a80:	52 df       	rcall	.-348    	; 0x2926 <__mulsf3>
    2a82:	64 cd       	rjmp	.-1336   	; 0x254c <exp>
    2a84:	11 f4       	brne	.+4      	; 0x2a8a <pow+0x9e>
    2a86:	0e f4       	brtc	.+2      	; 0x2a8a <pow+0x9e>
    2a88:	25 ce       	rjmp	.-950    	; 0x26d4 <__fp_nan>
    2a8a:	3e c0       	rjmp	.+124    	; 0x2b08 <__fp_mpack>

00002a8c <sqrt>:
    2a8c:	72 de       	rcall	.-796    	; 0x2772 <__fp_splitA>
    2a8e:	d0 f3       	brcs	.-12     	; 0x2a84 <pow+0x98>
    2a90:	99 23       	and	r25, r25
    2a92:	d9 f3       	breq	.-10     	; 0x2a8a <pow+0x9e>
    2a94:	ce f3       	brts	.-14     	; 0x2a88 <pow+0x9c>
    2a96:	9f 57       	subi	r25, 0x7F	; 127
    2a98:	55 0b       	sbc	r21, r21
    2a9a:	87 ff       	sbrs	r24, 7
    2a9c:	43 d0       	rcall	.+134    	; 0x2b24 <__fp_norm2>
    2a9e:	00 24       	eor	r0, r0
    2aa0:	a0 e6       	ldi	r26, 0x60	; 96
    2aa2:	40 ea       	ldi	r20, 0xA0	; 160
    2aa4:	90 01       	movw	r18, r0
    2aa6:	80 58       	subi	r24, 0x80	; 128
    2aa8:	56 95       	lsr	r21
    2aaa:	97 95       	ror	r25
    2aac:	28 f4       	brcc	.+10     	; 0x2ab8 <sqrt+0x2c>
    2aae:	80 5c       	subi	r24, 0xC0	; 192
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	20 f0       	brcs	.+8      	; 0x2ac0 <sqrt+0x34>
    2ab8:	26 17       	cp	r18, r22
    2aba:	37 07       	cpc	r19, r23
    2abc:	48 07       	cpc	r20, r24
    2abe:	30 f4       	brcc	.+12     	; 0x2acc <sqrt+0x40>
    2ac0:	62 1b       	sub	r22, r18
    2ac2:	73 0b       	sbc	r23, r19
    2ac4:	84 0b       	sbc	r24, r20
    2ac6:	20 29       	or	r18, r0
    2ac8:	31 29       	or	r19, r1
    2aca:	4a 2b       	or	r20, r26
    2acc:	a6 95       	lsr	r26
    2ace:	17 94       	ror	r1
    2ad0:	07 94       	ror	r0
    2ad2:	20 25       	eor	r18, r0
    2ad4:	31 25       	eor	r19, r1
    2ad6:	4a 27       	eor	r20, r26
    2ad8:	58 f7       	brcc	.-42     	; 0x2ab0 <sqrt+0x24>
    2ada:	66 0f       	add	r22, r22
    2adc:	77 1f       	adc	r23, r23
    2ade:	88 1f       	adc	r24, r24
    2ae0:	20 f0       	brcs	.+8      	; 0x2aea <sqrt+0x5e>
    2ae2:	26 17       	cp	r18, r22
    2ae4:	37 07       	cpc	r19, r23
    2ae6:	48 07       	cpc	r20, r24
    2ae8:	30 f4       	brcc	.+12     	; 0x2af6 <sqrt+0x6a>
    2aea:	62 0b       	sbc	r22, r18
    2aec:	73 0b       	sbc	r23, r19
    2aee:	84 0b       	sbc	r24, r20
    2af0:	20 0d       	add	r18, r0
    2af2:	31 1d       	adc	r19, r1
    2af4:	41 1d       	adc	r20, r1
    2af6:	a0 95       	com	r26
    2af8:	81 f7       	brne	.-32     	; 0x2ada <sqrt+0x4e>
    2afa:	b9 01       	movw	r22, r18
    2afc:	84 2f       	mov	r24, r20
    2afe:	91 58       	subi	r25, 0x81	; 129
    2b00:	88 0f       	add	r24, r24
    2b02:	96 95       	lsr	r25
    2b04:	87 95       	ror	r24
    2b06:	08 95       	ret

00002b08 <__fp_mpack>:
    2b08:	9f 3f       	cpi	r25, 0xFF	; 255
    2b0a:	31 f0       	breq	.+12     	; 0x2b18 <__fp_mpack_finite+0xc>

00002b0c <__fp_mpack_finite>:
    2b0c:	91 50       	subi	r25, 0x01	; 1
    2b0e:	20 f4       	brcc	.+8      	; 0x2b18 <__fp_mpack_finite+0xc>
    2b10:	87 95       	ror	r24
    2b12:	77 95       	ror	r23
    2b14:	67 95       	ror	r22
    2b16:	b7 95       	ror	r27
    2b18:	88 0f       	add	r24, r24
    2b1a:	91 1d       	adc	r25, r1
    2b1c:	96 95       	lsr	r25
    2b1e:	87 95       	ror	r24
    2b20:	97 f9       	bld	r25, 7
    2b22:	08 95       	ret

00002b24 <__fp_norm2>:
    2b24:	91 50       	subi	r25, 0x01	; 1
    2b26:	50 40       	sbci	r21, 0x00	; 0
    2b28:	66 0f       	add	r22, r22
    2b2a:	77 1f       	adc	r23, r23
    2b2c:	88 1f       	adc	r24, r24
    2b2e:	d2 f7       	brpl	.-12     	; 0x2b24 <__fp_norm2>
    2b30:	08 95       	ret

00002b32 <__mulsi3>:
    2b32:	62 9f       	mul	r22, r18
    2b34:	d0 01       	movw	r26, r0
    2b36:	73 9f       	mul	r23, r19
    2b38:	f0 01       	movw	r30, r0
    2b3a:	82 9f       	mul	r24, r18
    2b3c:	e0 0d       	add	r30, r0
    2b3e:	f1 1d       	adc	r31, r1
    2b40:	64 9f       	mul	r22, r20
    2b42:	e0 0d       	add	r30, r0
    2b44:	f1 1d       	adc	r31, r1
    2b46:	92 9f       	mul	r25, r18
    2b48:	f0 0d       	add	r31, r0
    2b4a:	83 9f       	mul	r24, r19
    2b4c:	f0 0d       	add	r31, r0
    2b4e:	74 9f       	mul	r23, r20
    2b50:	f0 0d       	add	r31, r0
    2b52:	65 9f       	mul	r22, r21
    2b54:	f0 0d       	add	r31, r0
    2b56:	99 27       	eor	r25, r25
    2b58:	72 9f       	mul	r23, r18
    2b5a:	b0 0d       	add	r27, r0
    2b5c:	e1 1d       	adc	r30, r1
    2b5e:	f9 1f       	adc	r31, r25
    2b60:	63 9f       	mul	r22, r19
    2b62:	b0 0d       	add	r27, r0
    2b64:	e1 1d       	adc	r30, r1
    2b66:	f9 1f       	adc	r31, r25
    2b68:	bd 01       	movw	r22, r26
    2b6a:	cf 01       	movw	r24, r30
    2b6c:	11 24       	eor	r1, r1
    2b6e:	08 95       	ret

00002b70 <__udivmodhi4>:
    2b70:	aa 1b       	sub	r26, r26
    2b72:	bb 1b       	sub	r27, r27
    2b74:	51 e1       	ldi	r21, 0x11	; 17
    2b76:	07 c0       	rjmp	.+14     	; 0x2b86 <__udivmodhi4_ep>

00002b78 <__udivmodhi4_loop>:
    2b78:	aa 1f       	adc	r26, r26
    2b7a:	bb 1f       	adc	r27, r27
    2b7c:	a6 17       	cp	r26, r22
    2b7e:	b7 07       	cpc	r27, r23
    2b80:	10 f0       	brcs	.+4      	; 0x2b86 <__udivmodhi4_ep>
    2b82:	a6 1b       	sub	r26, r22
    2b84:	b7 0b       	sbc	r27, r23

00002b86 <__udivmodhi4_ep>:
    2b86:	88 1f       	adc	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	5a 95       	dec	r21
    2b8c:	a9 f7       	brne	.-22     	; 0x2b78 <__udivmodhi4_loop>
    2b8e:	80 95       	com	r24
    2b90:	90 95       	com	r25
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	08 95       	ret

00002b98 <__divmodhi4>:
    2b98:	97 fb       	bst	r25, 7
    2b9a:	09 2e       	mov	r0, r25
    2b9c:	07 26       	eor	r0, r23
    2b9e:	0a d0       	rcall	.+20     	; 0x2bb4 <__divmodhi4_neg1>
    2ba0:	77 fd       	sbrc	r23, 7
    2ba2:	04 d0       	rcall	.+8      	; 0x2bac <__divmodhi4_neg2>
    2ba4:	e5 df       	rcall	.-54     	; 0x2b70 <__udivmodhi4>
    2ba6:	06 d0       	rcall	.+12     	; 0x2bb4 <__divmodhi4_neg1>
    2ba8:	00 20       	and	r0, r0
    2baa:	1a f4       	brpl	.+6      	; 0x2bb2 <__divmodhi4_exit>

00002bac <__divmodhi4_neg2>:
    2bac:	70 95       	com	r23
    2bae:	61 95       	neg	r22
    2bb0:	7f 4f       	sbci	r23, 0xFF	; 255

00002bb2 <__divmodhi4_exit>:
    2bb2:	08 95       	ret

00002bb4 <__divmodhi4_neg1>:
    2bb4:	f6 f7       	brtc	.-4      	; 0x2bb2 <__divmodhi4_exit>
    2bb6:	90 95       	com	r25
    2bb8:	81 95       	neg	r24
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	08 95       	ret

00002bbe <__divmodsi4>:
    2bbe:	97 fb       	bst	r25, 7
    2bc0:	09 2e       	mov	r0, r25
    2bc2:	05 26       	eor	r0, r21
    2bc4:	0e d0       	rcall	.+28     	; 0x2be2 <__divmodsi4_neg1>
    2bc6:	57 fd       	sbrc	r21, 7
    2bc8:	04 d0       	rcall	.+8      	; 0x2bd2 <__divmodsi4_neg2>
    2bca:	4b d0       	rcall	.+150    	; 0x2c62 <__udivmodsi4>
    2bcc:	0a d0       	rcall	.+20     	; 0x2be2 <__divmodsi4_neg1>
    2bce:	00 1c       	adc	r0, r0
    2bd0:	38 f4       	brcc	.+14     	; 0x2be0 <__divmodsi4_exit>

00002bd2 <__divmodsi4_neg2>:
    2bd2:	50 95       	com	r21
    2bd4:	40 95       	com	r20
    2bd6:	30 95       	com	r19
    2bd8:	21 95       	neg	r18
    2bda:	3f 4f       	sbci	r19, 0xFF	; 255
    2bdc:	4f 4f       	sbci	r20, 0xFF	; 255
    2bde:	5f 4f       	sbci	r21, 0xFF	; 255

00002be0 <__divmodsi4_exit>:
    2be0:	08 95       	ret

00002be2 <__divmodsi4_neg1>:
    2be2:	f6 f7       	brtc	.-4      	; 0x2be0 <__divmodsi4_exit>
    2be4:	90 95       	com	r25
    2be6:	80 95       	com	r24
    2be8:	70 95       	com	r23
    2bea:	61 95       	neg	r22
    2bec:	7f 4f       	sbci	r23, 0xFF	; 255
    2bee:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf2:	08 95       	ret

00002bf4 <__prologue_saves__>:
    2bf4:	2f 92       	push	r2
    2bf6:	3f 92       	push	r3
    2bf8:	4f 92       	push	r4
    2bfa:	5f 92       	push	r5
    2bfc:	6f 92       	push	r6
    2bfe:	7f 92       	push	r7
    2c00:	8f 92       	push	r8
    2c02:	9f 92       	push	r9
    2c04:	af 92       	push	r10
    2c06:	bf 92       	push	r11
    2c08:	cf 92       	push	r12
    2c0a:	df 92       	push	r13
    2c0c:	ef 92       	push	r14
    2c0e:	ff 92       	push	r15
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	ca 1b       	sub	r28, r26
    2c1e:	db 0b       	sbc	r29, r27
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	19 94       	eijmp

00002c2c <__epilogue_restores__>:
    2c2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c2e:	39 88       	ldd	r3, Y+17	; 0x11
    2c30:	48 88       	ldd	r4, Y+16	; 0x10
    2c32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c40:	c8 84       	ldd	r12, Y+8	; 0x08
    2c42:	df 80       	ldd	r13, Y+7	; 0x07
    2c44:	ee 80       	ldd	r14, Y+6	; 0x06
    2c46:	fd 80       	ldd	r15, Y+5	; 0x05
    2c48:	0c 81       	ldd	r16, Y+4	; 0x04
    2c4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c50:	ce 0f       	add	r28, r30
    2c52:	d1 1d       	adc	r29, r1
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	ed 01       	movw	r28, r26
    2c60:	08 95       	ret

00002c62 <__udivmodsi4>:
    2c62:	a1 e2       	ldi	r26, 0x21	; 33
    2c64:	1a 2e       	mov	r1, r26
    2c66:	aa 1b       	sub	r26, r26
    2c68:	bb 1b       	sub	r27, r27
    2c6a:	fd 01       	movw	r30, r26
    2c6c:	0d c0       	rjmp	.+26     	; 0x2c88 <__udivmodsi4_ep>

00002c6e <__udivmodsi4_loop>:
    2c6e:	aa 1f       	adc	r26, r26
    2c70:	bb 1f       	adc	r27, r27
    2c72:	ee 1f       	adc	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	a2 17       	cp	r26, r18
    2c78:	b3 07       	cpc	r27, r19
    2c7a:	e4 07       	cpc	r30, r20
    2c7c:	f5 07       	cpc	r31, r21
    2c7e:	20 f0       	brcs	.+8      	; 0x2c88 <__udivmodsi4_ep>
    2c80:	a2 1b       	sub	r26, r18
    2c82:	b3 0b       	sbc	r27, r19
    2c84:	e4 0b       	sbc	r30, r20
    2c86:	f5 0b       	sbc	r31, r21

00002c88 <__udivmodsi4_ep>:
    2c88:	66 1f       	adc	r22, r22
    2c8a:	77 1f       	adc	r23, r23
    2c8c:	88 1f       	adc	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	1a 94       	dec	r1
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <__udivmodsi4_loop>
    2c94:	60 95       	com	r22
    2c96:	70 95       	com	r23
    2c98:	80 95       	com	r24
    2c9a:	90 95       	com	r25
    2c9c:	9b 01       	movw	r18, r22
    2c9e:	ac 01       	movw	r20, r24
    2ca0:	bd 01       	movw	r22, r26
    2ca2:	cf 01       	movw	r24, r30
    2ca4:	08 95       	ret

00002ca6 <_exit>:
    2ca6:	f8 94       	cli

00002ca8 <__stop_program>:
    2ca8:	ff cf       	rjmp	.-2      	; 0x2ca8 <__stop_program>
