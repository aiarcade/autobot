
autobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00002b16  00002baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800234  00800234  00002bde  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000638  00000000  00000000  00002cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001841  00000000  00000000  000032f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f3  00000000  00000000  00004b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000132b  00000000  00000000  0000532a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  00006658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f8  00000000  00000000  00006a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ca  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00007a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
       8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
       c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      10:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      14:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_5>
      18:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_6>
      1c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      20:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      24:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      28:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      2c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      30:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      34:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      38:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      3c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      40:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      44:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      48:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      4c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      50:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      54:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      58:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      5c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      60:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      64:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      68:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      6c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      70:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      74:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      78:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      7c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      80:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      84:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      88:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      8c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      90:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      94:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      98:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      9c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      a0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      a4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      a8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      ac:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      b0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      b4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      b8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      bc:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      c0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      c4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      c8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      cc:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__vector_51>
      d0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      d4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      d8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      dc:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      e0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <ADC_Conversion>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__c.1778>:
     166:	6e 61 6e 00                                         nan.

0000016a <__c.1776>:
     16a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     17a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     18a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     19a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     20a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     21a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     22a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     23a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     24a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     25a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d1 e2       	ldi	r29, 0x21	; 33
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0c bf       	out	0x3c, r16	; 60

00000278 <__do_copy_data>:
     278:	12 e0       	ldi	r17, 0x02	; 2
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	e6 e1       	ldi	r30, 0x16	; 22
     280:	fb e2       	ldi	r31, 0x2B	; 43
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a4 33       	cpi	r26, 0x34	; 52
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	12 e0       	ldi	r17, 0x02	; 2
     294:	a4 e3       	ldi	r26, 0x34	; 52
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	ac 39       	cpi	r26, 0x9C	; 156
     29e:	b1 07       	cpc	r27, r17
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	0e 94 36 03 	call	0x66c	; 0x66c <main>
     2a6:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <exit>

000002aa <__bad_interrupt>:
     2aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ae <getOdometry>:

void getOdometry()
{
	

}
     2ae:	08 95       	ret

000002b0 <exec_motion_cmd>:
	return atoi(data);

}

int exec_motion_cmd(char cmd, int duration)
{
     2b0:	af 92       	push	r10
     2b2:	bf 92       	push	r11
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	8b 01       	movw	r16, r22
	switch(cmd)
     2c2:	86 34       	cpi	r24, 0x46	; 70
     2c4:	51 f0       	breq	.+20     	; 0x2da <exec_motion_cmd+0x2a>
     2c6:	87 34       	cpi	r24, 0x47	; 71
     2c8:	18 f4       	brcc	.+6      	; 0x2d0 <exec_motion_cmd+0x20>
     2ca:	82 34       	cpi	r24, 0x42	; 66
     2cc:	89 f4       	brne	.+34     	; 0x2f0 <exec_motion_cmd+0x40>
     2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <exec_motion_cmd+0x30>
     2d0:	8c 34       	cpi	r24, 0x4C	; 76
     2d2:	49 f0       	breq	.+18     	; 0x2e6 <exec_motion_cmd+0x36>
     2d4:	82 35       	cpi	r24, 0x52	; 82
     2d6:	61 f4       	brne	.+24     	; 0x2f0 <exec_motion_cmd+0x40>
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <exec_motion_cmd+0x3c>
	{
		case 'F':
			forward();
     2da:	0e 94 25 05 	call	0xa4a	; 0xa4a <forward>
     2de:	08 c0       	rjmp	.+16     	; 0x2f0 <exec_motion_cmd+0x40>
			break;
		case 'B':
			back();
     2e0:	0e 94 2a 05 	call	0xa54	; 0xa54 <back>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <exec_motion_cmd+0x40>
			break;
		case 'L':
			left();
     2e6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <left>
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <exec_motion_cmd+0x40>
			break;
		case 'R':
			right();
     2ec:	0e 94 34 05 	call	0xa68	; 0xa68 <right>
		default:
			break;


	}
	_delay_ms(duration);
     2f0:	b8 01       	movw	r22, r16
     2f2:	88 27       	eor	r24, r24
     2f4:	77 fd       	sbrc	r23, 7
     2f6:	80 95       	com	r24
     2f8:	98 2f       	mov	r25, r24
     2fa:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
     2fe:	5b 01       	movw	r10, r22
     300:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     302:	26 e6       	ldi	r18, 0x66	; 102
     304:	36 e6       	ldi	r19, 0x66	; 102
     306:	46 e6       	ldi	r20, 0x66	; 102
     308:	55 e4       	ldi	r21, 0x45	; 69
     30a:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     30e:	7b 01       	movw	r14, r22
     310:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e8       	ldi	r20, 0x80	; 128
     318:	5f e3       	ldi	r21, 0x3F	; 63
     31a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__cmpsf2>
     31e:	88 23       	and	r24, r24
     320:	1c f4       	brge	.+6      	; 0x328 <exec_motion_cmd+0x78>
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	24 c0       	rjmp	.+72     	; 0x370 <exec_motion_cmd+0xc0>
		__ticks = 1;
	else if (__tmp > 65535)
     328:	c8 01       	movw	r24, r16
     32a:	b7 01       	movw	r22, r14
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	3f ef       	ldi	r19, 0xFF	; 255
     330:	4f e7       	ldi	r20, 0x7F	; 127
     332:	57 e4       	ldi	r21, 0x47	; 71
     334:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     338:	18 16       	cp	r1, r24
     33a:	b4 f4       	brge	.+44     	; 0x368 <exec_motion_cmd+0xb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     33c:	c6 01       	movw	r24, r12
     33e:	b5 01       	movw	r22, r10
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e2       	ldi	r20, 0x20	; 32
     346:	51 e4       	ldi	r21, 0x41	; 65
     348:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     34c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     350:	80 e7       	ldi	r24, 0x70	; 112
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	05 c0       	rjmp	.+10     	; 0x360 <exec_motion_cmd+0xb0>
     356:	fc 01       	movw	r30, r24
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <exec_motion_cmd+0xa8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     35c:	61 50       	subi	r22, 0x01	; 1
     35e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     360:	61 15       	cp	r22, r1
     362:	71 05       	cpc	r23, r1
     364:	c1 f7       	brne	.-16     	; 0x356 <exec_motion_cmd+0xa6>
     366:	07 c0       	rjmp	.+14     	; 0x376 <exec_motion_cmd+0xc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     368:	c8 01       	movw	r24, r16
     36a:	b7 01       	movw	r22, r14
     36c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     370:	cb 01       	movw	r24, r22
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <exec_motion_cmd+0xc2>

}
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	08 95       	ret

00000388 <command_data>:
	
}


int command_data(char *str)
{
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	00 d0       	rcall	.+0      	; 0x38e <command_data+0x6>
     38e:	00 d0       	rcall	.+0      	; 0x390 <command_data+0x8>
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	fc 01       	movw	r30, r24

	char data[6];
		
	data[0]=str[1];
     396:	81 81       	ldd	r24, Z+1	; 0x01
     398:	89 83       	std	Y+1, r24	; 0x01
	data[1]=str[2];
     39a:	82 81       	ldd	r24, Z+2	; 0x02
     39c:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=str[3];
     39e:	83 81       	ldd	r24, Z+3	; 0x03
     3a0:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=str[4];
     3a2:	84 81       	ldd	r24, Z+4	; 0x04
     3a4:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=str[5];
     3a6:	85 81       	ldd	r24, Z+5	; 0x05
     3a8:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0;
     3aa:	1e 82       	std	Y+6, r1	; 0x06
	

	return atoi(data);
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <atoi>

}
     3b4:	26 96       	adiw	r28, 0x06	; 6
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	08 95       	ret

000003c6 <test_partcle_filter>:
	

}

int test_partcle_filter()
{
     3c6:	8f 92       	push	r8
     3c8:	9f 92       	push	r9
     3ca:	af 92       	push	r10
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	2c 97       	sbiw	r28, 0x0c	; 12
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
	int i;
	float total_weight = 0;
	float measurement_ref[REFERENCE_POINTS];
	create_particles();
     3ee:	0e 94 02 09 	call	0x1204	; 0x1204 <create_particles>
	memset(measurement_ref, 0.0, sizeof(measurement_ref));
     3f2:	fe 01       	movw	r30, r28
     3f4:	31 96       	adiw	r30, 0x01	; 1
     3f6:	8c e0       	ldi	r24, 0x0C	; 12
     3f8:	df 01       	movw	r26, r30
     3fa:	1d 92       	st	X+, r1
     3fc:	8a 95       	dec	r24
     3fe:	e9 f7       	brne	.-6      	; 0x3fa <test_partcle_filter+0x34>
     400:	ee 24       	eor	r14, r14
     402:	ff 24       	eor	r15, r15
     404:	cc 24       	eor	r12, r12
     406:	dd 24       	eor	r13, r13
//	sense(1, 1, 1, measurement_ref,sense_points);
	int h=0;
	char output[10];
	//printf("sensed value is %f, %f, %f\n", measurement_ref[0], measurement_ref[1], measurement_ref[2]);
	for(i=0; i<NUM_PARTICLE; i++){
		float weight = calculate_weight(particles[i], measurement_ref);
     408:	4f 01       	movw	r8, r30
     40a:	90 e7       	ldi	r25, 0x70	; 112
     40c:	a9 2e       	mov	r10, r25
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	b9 2e       	mov	r11, r25
{
	int i;
	float total_weight = 0;
	float measurement_ref[REFERENCE_POINTS];
	create_particles();
	memset(measurement_ref, 0.0, sizeof(measurement_ref));
     412:	87 01       	movw	r16, r14
     414:	00 0f       	add	r16, r16
     416:	11 1f       	adc	r17, r17
//	sense(1, 1, 1, measurement_ref,sense_points);
	int h=0;
	char output[10];
	//printf("sensed value is %f, %f, %f\n", measurement_ref[0], measurement_ref[1], measurement_ref[2]);
	for(i=0; i<NUM_PARTICLE; i++){
		float weight = calculate_weight(particles[i], measurement_ref);
     418:	e0 91 68 02 	lds	r30, 0x0268
     41c:	f0 91 69 02 	lds	r31, 0x0269
     420:	e0 0f       	add	r30, r16
     422:	f1 1f       	adc	r31, r17
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	b4 01       	movw	r22, r8
     42a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <calculate_weight>
		particles[i]->weight = weight;
     42e:	e0 91 68 02 	lds	r30, 0x0268
     432:	f0 91 69 02 	lds	r31, 0x0269
     436:	e0 0f       	add	r30, r16
     438:	f1 1f       	adc	r31, r17
     43a:	01 90       	ld	r0, Z+
     43c:	f0 81       	ld	r31, Z
     43e:	e0 2d       	mov	r30, r0
     440:	64 8b       	std	Z+20, r22	; 0x14
     442:	75 8b       	std	Z+21, r23	; 0x15
     444:	86 8b       	std	Z+22, r24	; 0x16
     446:	97 8b       	std	Z+23, r25	; 0x17
		total_weight += weight;
		
		if(weight > 0.01)
     448:	2a e0       	ldi	r18, 0x0A	; 10
     44a:	37 ed       	ldi	r19, 0xD7	; 215
     44c:	43 e2       	ldi	r20, 0x23	; 35
     44e:	5c e3       	ldi	r21, 0x3C	; 60
     450:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     454:	18 16       	cp	r1, r24
     456:	8c f4       	brge	.+34     	; 0x47a <test_partcle_filter+0xb4>
		{
			lcd_print(2,14,i,3);
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	6e e0       	ldi	r22, 0x0E	; 14
     45c:	a7 01       	movw	r20, r14
     45e:	23 e0       	ldi	r18, 0x03	; 3
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	0e 94 19 04 	call	0x832	; 0x832 <lcd_print>
     466:	88 ee       	ldi	r24, 0xE8	; 232
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	f5 01       	movw	r30, r10
     46c:	31 97       	sbiw	r30, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <test_partcle_filter+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     470:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     472:	d9 f7       	brne	.-10     	; 0x46a <test_partcle_filter+0xa4>
			h=h+1;
     474:	08 94       	sec
     476:	c1 1c       	adc	r12, r1
     478:	d1 1c       	adc	r13, r1
	memset(measurement_ref, 0.0, sizeof(measurement_ref));
//	sense(1, 1, 1, measurement_ref,sense_points);
	int h=0;
	char output[10];
	//printf("sensed value is %f, %f, %f\n", measurement_ref[0], measurement_ref[1], measurement_ref[2]);
	for(i=0; i<NUM_PARTICLE; i++){
     47a:	08 94       	sec
     47c:	e1 1c       	adc	r14, r1
     47e:	f1 1c       	adc	r15, r1
     480:	b4 e6       	ldi	r27, 0x64	; 100
     482:	eb 16       	cp	r14, r27
     484:	f1 04       	cpc	r15, r1
     486:	29 f6       	brne	.-118    	; 0x412 <test_partcle_filter+0x4c>

		}
	//send_particle_over_serial(particles[i]->x,particles[i]->y,particles[i]->vx,particles[i]->vy,particles[i]->direction,particles[i]->weight);
		//	printf("main: particles[%d]->weight=%f\n", i, particles[i]->weight);	
	}
	lcd_print(2,1,h,3);
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	a6 01       	movw	r20, r12
     48e:	23 e0       	ldi	r18, 0x03	; 3
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	0e 94 19 04 	call	0x832	; 0x832 <lcd_print>
//	printf("main: total_weight=%f\n", total_weight);
	
}
     496:	2c 96       	adiw	r28, 0x0c	; 12
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	bf 90       	pop	r11
     4b4:	af 90       	pop	r10
     4b6:	9f 90       	pop	r9
     4b8:	8f 90       	pop	r8
     4ba:	08 95       	ret

000004bc <motor_test>:


void motor_test()
{

		forward(); //both wheels forward
     4bc:	0e 94 25 05 	call	0xa4a	; 0xa4a <forward>
     4c0:	80 e1       	ldi	r24, 0x10	; 16
     4c2:	97 e2       	ldi	r25, 0x27	; 39
     4c4:	20 e7       	ldi	r18, 0x70	; 112
     4c6:	31 e0       	ldi	r19, 0x01	; 1
     4c8:	f9 01       	movw	r30, r18
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <motor_test+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d0:	d9 f7       	brne	.-10     	; 0x4c8 <motor_test+0xc>
		_delay_ms(1000);

		stop();						
     4d2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <stop>
     4d6:	88 e8       	ldi	r24, 0x88	; 136
     4d8:	93 e1       	ldi	r25, 0x13	; 19
     4da:	20 e7       	ldi	r18, 0x70	; 112
     4dc:	31 e0       	ldi	r19, 0x01	; 1
     4de:	f9 01       	movw	r30, r18
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <motor_test+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4e6:	d9 f7       	brne	.-10     	; 0x4de <motor_test+0x22>
		_delay_ms(500);
	
		back(); //bpth wheels backward						
     4e8:	0e 94 2a 05 	call	0xa54	; 0xa54 <back>
     4ec:	80 e1       	ldi	r24, 0x10	; 16
     4ee:	97 e2       	ldi	r25, 0x27	; 39
     4f0:	20 e7       	ldi	r18, 0x70	; 112
     4f2:	31 e0       	ldi	r19, 0x01	; 1
     4f4:	f9 01       	movw	r30, r18
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <motor_test+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <motor_test+0x38>
		_delay_ms(1000);

		stop();
     4fe:	0e 94 4d 05 	call	0xa9a	; 0xa9a <stop>

}
     502:	08 95       	ret

00000504 <sense_obstacles>:

unsigned int sense_obstacles(){

    unsigned char sharp; 
	unsigned int value;
    sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     504:	8b e0       	ldi	r24, 0x0B	; 11
     506:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
    value = Sharp_GP2D12_estimation(sharp);
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Sharp_GP2D12_estimation>
	return value;


}
     510:	08 95       	ret

00000512 <sense_objects>:

void sense_objects()
{
	
	
	left();
     512:	0e 94 2f 05 	call	0xa5e	; 0xa5e <left>
     516:	8c ed       	ldi	r24, 0xDC	; 220
     518:	95 e0       	ldi	r25, 0x05	; 5
     51a:	20 e7       	ldi	r18, 0x70	; 112
     51c:	31 e0       	ldi	r19, 0x01	; 1
     51e:	f9 01       	movw	r30, r18
     520:	31 97       	sbiw	r30, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <sense_objects+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     524:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     526:	d9 f7       	brne	.-10     	; 0x51e <sense_objects+0xc>
	_delay_ms(150);
	range_points[0]=sense_obstacles();
     528:	0e 94 82 02 	call	0x504	; 0x504 <sense_obstacles>
     52c:	90 93 35 02 	sts	0x0235, r25
     530:	80 93 34 02 	sts	0x0234, r24
	right();
     534:	0e 94 34 05 	call	0xa68	; 0xa68 <right>
     538:	8c ed       	ldi	r24, 0xDC	; 220
     53a:	95 e0       	ldi	r25, 0x05	; 5
     53c:	20 e7       	ldi	r18, 0x70	; 112
     53e:	31 e0       	ldi	r19, 0x01	; 1
     540:	f9 01       	movw	r30, r18
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <sense_objects+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     546:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     548:	d9 f7       	brne	.-10     	; 0x540 <sense_objects+0x2e>
	_delay_ms(150);
	range_points[1]=sense_obstacles();
     54a:	0e 94 82 02 	call	0x504	; 0x504 <sense_obstacles>
     54e:	90 93 37 02 	sts	0x0237, r25
     552:	80 93 36 02 	sts	0x0236, r24
	right();
     556:	0e 94 34 05 	call	0xa68	; 0xa68 <right>
     55a:	8c ed       	ldi	r24, 0xDC	; 220
     55c:	95 e0       	ldi	r25, 0x05	; 5
     55e:	20 e7       	ldi	r18, 0x70	; 112
     560:	31 e0       	ldi	r19, 0x01	; 1
     562:	f9 01       	movw	r30, r18
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <sense_objects+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     568:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     56a:	d9 f7       	brne	.-10     	; 0x562 <sense_objects+0x50>
    _delay_ms(150);
	range_points[2]=sense_obstacles();
     56c:	0e 94 82 02 	call	0x504	; 0x504 <sense_obstacles>
     570:	90 93 39 02 	sts	0x0239, r25
     574:	80 93 38 02 	sts	0x0238, r24
	left();
     578:	0e 94 2f 05 	call	0xa5e	; 0xa5e <left>
     57c:	8c ed       	ldi	r24, 0xDC	; 220
     57e:	95 e0       	ldi	r25, 0x05	; 5
     580:	20 e7       	ldi	r18, 0x70	; 112
     582:	31 e0       	ldi	r19, 0x01	; 1
     584:	f9 01       	movw	r30, r18
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <sense_objects+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     58a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     58c:	d9 f7       	brne	.-10     	; 0x584 <sense_objects+0x72>
	_delay_ms(150);
	stop();
     58e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <stop>
	clearPosCounters();
     592:	0e 94 da 05 	call	0xbb4	; 0xbb4 <clearPosCounters>



		
}
     596:	08 95       	ret

00000598 <send_data_over_serial>:

}

void send_data_over_serial()

{
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	c1 54       	subi	r28, 0x41	; 65
     5a6:	d0 40       	sbci	r29, 0x00	; 0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61

		char output[65];
		sprintf(output, "%u;%u;%u;%u;%u;\n",range_points[0],range_points[1],range_points[2],odo_points[0],odo_points[1] );
     5b2:	8d b7       	in	r24, 0x3d	; 61
     5b4:	9e b7       	in	r25, 0x3e	; 62
     5b6:	0e 97       	sbiw	r24, 0x0e	; 14
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	9e bf       	out	0x3e, r25	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	8d bf       	out	0x3d, r24	; 61
     5c2:	ed b7       	in	r30, 0x3d	; 61
     5c4:	fe b7       	in	r31, 0x3e	; 62
     5c6:	31 96       	adiw	r30, 0x01	; 1
     5c8:	8e 01       	movw	r16, r28
     5ca:	0f 5f       	subi	r16, 0xFF	; 255
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	ad b7       	in	r26, 0x3d	; 61
     5d0:	be b7       	in	r27, 0x3e	; 62
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	1c 93       	st	X, r17
     5d6:	0e 93       	st	-X, r16
     5d8:	11 97       	sbiw	r26, 0x01	; 1
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	93 83       	std	Z+3, r25	; 0x03
     5e0:	82 83       	std	Z+2, r24	; 0x02
     5e2:	80 91 34 02 	lds	r24, 0x0234
     5e6:	90 91 35 02 	lds	r25, 0x0235
     5ea:	95 83       	std	Z+5, r25	; 0x05
     5ec:	84 83       	std	Z+4, r24	; 0x04
     5ee:	80 91 36 02 	lds	r24, 0x0236
     5f2:	90 91 37 02 	lds	r25, 0x0237
     5f6:	97 83       	std	Z+7, r25	; 0x07
     5f8:	86 83       	std	Z+6, r24	; 0x06
     5fa:	80 91 38 02 	lds	r24, 0x0238
     5fe:	90 91 39 02 	lds	r25, 0x0239
     602:	91 87       	std	Z+9, r25	; 0x09
     604:	80 87       	std	Z+8, r24	; 0x08
     606:	80 91 3a 02 	lds	r24, 0x023A
     60a:	90 91 3b 02 	lds	r25, 0x023B
     60e:	93 87       	std	Z+11, r25	; 0x0b
     610:	82 87       	std	Z+10, r24	; 0x0a
     612:	80 91 3c 02 	lds	r24, 0x023C
     616:	90 91 3d 02 	lds	r25, 0x023D
     61a:	95 87       	std	Z+13, r25	; 0x0d
     61c:	84 87       	std	Z+12, r24	; 0x0c
     61e:	0e 94 84 10 	call	0x2108	; 0x2108 <sprintf>
		uart2_puts(output);
     622:	8d b7       	in	r24, 0x3d	; 61
     624:	9e b7       	in	r25, 0x3e	; 62
     626:	0e 96       	adiw	r24, 0x0e	; 14
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	9e bf       	out	0x3e, r25	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	8d bf       	out	0x3d, r24	; 61
     632:	c8 01       	movw	r24, r16
     634:	0e 94 04 06 	call	0xc08	; 0xc08 <uart2_puts>





}
     638:	cf 5b       	subi	r28, 0xBF	; 191
     63a:	df 4f       	sbci	r29, 0xFF	; 255
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <port_init>:
unsigned int odo_points[2]={0,0};


void port_init()
{
	lcd_port_config();
     650:	0e 94 5d 03 	call	0x6ba	; 0x6ba <lcd_port_config>
	adc_pin_config();
     654:	0e 94 a9 04 	call	0x952	; 0x952 <adc_pin_config>
	motion_pin_config();
     658:	0e 94 0e 05 	call	0xa1c	; 0xa1c <motion_pin_config>
	posencoder_init();
     65c:	0e 94 57 05 	call	0xaae	; 0xaae <posencoder_init>
	
 
}
     660:	08 95       	ret

00000662 <init_devices>:
void init_devices (void)
{
 cli(); //Clears the global interrupts
     662:	f8 94       	cli
 port_init();
     664:	0e 94 28 03 	call	0x650	; 0x650 <port_init>

 sei();   //Enables the global interrupts
     668:	78 94       	sei
}		
     66a:	08 95       	ret

0000066c <main>:
	_delay_ms(duration);

}

int main(void)
{
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
	
	init_devices();
     670:	0e 94 31 03 	call	0x662	; 0x662 <init_devices>
	lcd_set_4bit();
     674:	0e 94 64 03 	call	0x6c8	; 0x6c8 <lcd_set_4bit>
	lcd_init();
     678:	0e 94 b7 03 	call	0x76e	; 0x76e <lcd_init>
	adc_init();
     67c:	0e 94 cd 04 	call	0x99a	; 0x99a <adc_init>
	 uart2_init();
     680:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <uart2_init>
	
	while(1)
	{
	
	
		char * cin=get_data();
     684:	0e 94 48 06 	call	0xc90	; 0xc90 <get_data>
     688:	8c 01       	movw	r16, r24
		int duration=command_data(cin);
     68a:	0e 94 c4 01 	call	0x388	; 0x388 <command_data>
     68e:	bc 01       	movw	r22, r24
		exec_motion_cmd(cin[0],duration);
     690:	f8 01       	movw	r30, r16
     692:	80 81       	ld	r24, Z
     694:	0e 94 58 01 	call	0x2b0	; 0x2b0 <exec_motion_cmd>


		odo_points[0]= getPosLeftCount();
     698:	0e 94 c8 05 	call	0xb90	; 0xb90 <getPosLeftCount>
     69c:	70 93 3b 02 	sts	0x023B, r23
     6a0:	60 93 3a 02 	sts	0x023A, r22
		odo_points[1]= getPosRightCount();
     6a4:	0e 94 d1 05 	call	0xba2	; 0xba2 <getPosRightCount>
     6a8:	70 93 3d 02 	sts	0x023D, r23
     6ac:	60 93 3c 02 	sts	0x023C, r22
		sense_objects();
     6b0:	0e 94 89 02 	call	0x512	; 0x512 <sense_objects>
		
		
		send_data_over_serial();
     6b4:	0e 94 cc 02 	call	0x598	; 0x598 <send_data_over_serial>
     6b8:	e5 cf       	rjmp	.-54     	; 0x684 <main+0x18>

000006ba <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     6ba:	87 b1       	in	r24, 0x07	; 7
     6bc:	87 6f       	ori	r24, 0xF7	; 247
     6be:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     6c0:	88 b1       	in	r24, 0x08	; 8
     6c2:	80 78       	andi	r24, 0x80	; 128
     6c4:	88 b9       	out	0x08, r24	; 8
}
     6c6:	08 95       	ret

000006c8 <lcd_set_4bit>:
     6c8:	26 e6       	ldi	r18, 0x66	; 102
     6ca:	3e e0       	ldi	r19, 0x0E	; 14
     6cc:	c9 01       	movw	r24, r18
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     6d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     6d4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     6d6:	40 e3       	ldi	r20, 0x30	; 48
     6d8:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     6da:	42 9a       	sbi	0x08, 2	; 8
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	98 e4       	ldi	r25, 0x48	; 72
     6e0:	fc 01       	movw	r30, r24
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6e6:	42 98       	cbi	0x08, 2	; 8
     6e8:	f9 01       	movw	r30, r18
     6ea:	31 97       	sbiw	r30, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     6ee:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     6f0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     6f2:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     6f4:	42 9a       	sbi	0x08, 2	; 8
     6f6:	fc 01       	movw	r30, r24
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6fc:	42 98       	cbi	0x08, 2	; 8
     6fe:	f9 01       	movw	r30, r18
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     704:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     706:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     708:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     70a:	42 9a       	sbi	0x08, 2	; 8
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <lcd_set_4bit+0x44>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     710:	42 98       	cbi	0x08, 2	; 8
     712:	c9 01       	movw	r24, r18
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     718:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     71a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     71c:	80 e2       	ldi	r24, 0x20	; 32
     71e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     720:	42 9a       	sbi	0x08, 2	; 8
     722:	c9 01       	movw	r24, r18
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <lcd_set_4bit+0x5c>
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     728:	42 98       	cbi	0x08, 2	; 8

	
}
     72a:	08 95       	ret

0000072c <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     72c:	98 b1       	in	r25, 0x08	; 8
     72e:	9f 70       	andi	r25, 0x0F	; 15
     730:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     732:	28 b1       	in	r18, 0x08	; 8
     734:	98 2f       	mov	r25, r24
     736:	90 7f       	andi	r25, 0xF0	; 240
     738:	92 2b       	or	r25, r18
     73a:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     73c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     73e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     740:	42 9a       	sbi	0x08, 2	; 8
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	38 e4       	ldi	r19, 0x48	; 72
     746:	f9 01       	movw	r30, r18
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     74c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     74e:	98 b1       	in	r25, 0x08	; 8
     750:	9f 70       	andi	r25, 0x0F	; 15
     752:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     754:	98 b1       	in	r25, 0x08	; 8
     756:	82 95       	swap	r24
     758:	80 7f       	andi	r24, 0xF0	; 240
     75a:	98 2b       	or	r25, r24
     75c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     75e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     760:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     762:	42 9a       	sbi	0x08, 2	; 8
     764:	c9 01       	movw	r24, r18
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     76a:	42 98       	cbi	0x08, 2	; 8
}
     76c:	08 95       	ret

0000076e <lcd_init>:
     76e:	86 e6       	ldi	r24, 0x66	; 102
     770:	9e e0       	ldi	r25, 0x0E	; 14
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     776:	88 e2       	ldi	r24, 0x28	; 40
     778:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
	lcd_wr_command(0x01);
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
	lcd_wr_command(0x06);
     782:	86 e0       	ldi	r24, 0x06	; 6
     784:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
	lcd_wr_command(0x0E);
     788:	8e e0       	ldi	r24, 0x0E	; 14
     78a:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
	lcd_wr_command(0x80);
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
		
}
     794:	08 95       	ret

00000796 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     796:	98 b1       	in	r25, 0x08	; 8
     798:	9f 70       	andi	r25, 0x0F	; 15
     79a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     79c:	28 b1       	in	r18, 0x08	; 8
     79e:	98 2f       	mov	r25, r24
     7a0:	90 7f       	andi	r25, 0xF0	; 240
     7a2:	92 2b       	or	r25, r18
     7a4:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     7a6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     7a8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     7aa:	42 9a       	sbi	0x08, 2	; 8
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	38 e4       	ldi	r19, 0x48	; 72
     7b0:	f9 01       	movw	r30, r18
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     7b6:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     7b8:	98 b1       	in	r25, 0x08	; 8
     7ba:	9f 70       	andi	r25, 0x0F	; 15
     7bc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     7be:	98 b1       	in	r25, 0x08	; 8
     7c0:	82 95       	swap	r24
     7c2:	80 7f       	andi	r24, 0xF0	; 240
     7c4:	98 2b       	or	r25, r24
     7c6:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     7c8:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     7ca:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     7cc:	42 9a       	sbi	0x08, 2	; 8
     7ce:	c9 01       	movw	r24, r18
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     7d4:	42 98       	cbi	0x08, 2	; 8
}
     7d6:	08 95       	ret

000007d8 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     7d8:	80 e8       	ldi	r24, 0x80	; 128
     7da:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
}
     7de:	08 95       	ret

000007e0 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ec 01       	movw	r28, r24
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     7e8:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_wr_char>
		str++;
     7ec:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     7ee:	88 81       	ld	r24, Y
     7f0:	88 23       	and	r24, r24
     7f2:	d1 f7       	brne	.-12     	; 0x7e8 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	69 f0       	breq	.+26     	; 0x818 <lcd_cursor+0x1e>
     7fe:	83 30       	cpi	r24, 0x03	; 3
     800:	18 f4       	brcc	.+6      	; 0x808 <lcd_cursor+0xe>
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	a9 f4       	brne	.+42     	; 0x830 <lcd_cursor+0x36>
     806:	05 c0       	rjmp	.+10     	; 0x812 <lcd_cursor+0x18>
     808:	83 30       	cpi	r24, 0x03	; 3
     80a:	49 f0       	breq	.+18     	; 0x81e <lcd_cursor+0x24>
     80c:	84 30       	cpi	r24, 0x04	; 4
     80e:	81 f4       	brne	.+32     	; 0x830 <lcd_cursor+0x36>
     810:	0b c0       	rjmp	.+22     	; 0x828 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     812:	86 2f       	mov	r24, r22
     814:	81 58       	subi	r24, 0x81	; 129
     816:	05 c0       	rjmp	.+10     	; 0x822 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     818:	86 2f       	mov	r24, r22
     81a:	81 54       	subi	r24, 0x41	; 65
     81c:	02 c0       	rjmp	.+4      	; 0x822 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     81e:	86 2f       	mov	r24, r22
     820:	8d 56       	subi	r24, 0x6D	; 109
     822:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
     826:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     828:	86 2f       	mov	r24, r22
     82a:	8d 52       	subi	r24, 0x2D	; 45
     82c:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_wr_command>
     830:	08 95       	ret

00000832 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	8a 01       	movw	r16, r20
     83c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     83e:	88 23       	and	r24, r24
     840:	11 f0       	breq	.+4      	; 0x846 <lcd_print+0x14>
     842:	66 23       	and	r22, r22
     844:	19 f4       	brne	.+6      	; 0x84c <lcd_print+0x1a>
	{
		lcd_home();
     846:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <lcd_home>
     84a:	02 c0       	rjmp	.+4      	; 0x850 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     84c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <lcd_cursor>
	}
	if(digits==5 || flag==1)
     850:	c5 30       	cpi	r28, 0x05	; 5
     852:	d1 05       	cpc	r29, r1
     854:	71 f4       	brne	.+28     	; 0x872 <lcd_print+0x40>
	{
		million=value/10000+48;
     856:	c8 01       	movw	r24, r16
     858:	60 e1       	ldi	r22, 0x10	; 16
     85a:	77 e2       	ldi	r23, 0x27	; 39
     85c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     860:	cb 01       	movw	r24, r22
     862:	c0 96       	adiw	r24, 0x30	; 48
     864:	90 93 6b 02 	sts	0x026B, r25
     868:	80 93 6a 02 	sts	0x026A, r24
		lcd_wr_char(million);
     86c:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_wr_char>
     870:	05 c0       	rjmp	.+10     	; 0x87c <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     872:	c4 30       	cpi	r28, 0x04	; 4
     874:	d1 05       	cpc	r29, r1
     876:	11 f0       	breq	.+4      	; 0x87c <lcd_print+0x4a>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	16 c0       	rjmp	.+44     	; 0x8a8 <lcd_print+0x76>
	{
		temp = value/1000;
     87c:	c8 01       	movw	r24, r16
     87e:	68 ee       	ldi	r22, 0xE8	; 232
     880:	73 e0       	ldi	r23, 0x03	; 3
     882:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     886:	cb 01       	movw	r24, r22
     888:	60 93 6c 02 	sts	0x026C, r22
     88c:	90 93 6d 02 	sts	0x026D, r25
		thousand = temp%10 + 48;
     890:	6a e0       	ldi	r22, 0x0A	; 10
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     898:	c0 96       	adiw	r24, 0x30	; 48
     89a:	90 93 75 02 	sts	0x0275, r25
     89e:	80 93 74 02 	sts	0x0274, r24
		lcd_wr_char(thousand);
     8a2:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_wr_char>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     8a8:	c3 30       	cpi	r28, 0x03	; 3
     8aa:	d1 05       	cpc	r29, r1
     8ac:	21 f0       	breq	.+8      	; 0x8b6 <lcd_print+0x84>
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <lcd_print+0x84>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <lcd_print+0xb0>
	{
		temp = value/100;
     8b6:	c8 01       	movw	r24, r16
     8b8:	64 e6       	ldi	r22, 0x64	; 100
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     8c0:	cb 01       	movw	r24, r22
     8c2:	60 93 6c 02 	sts	0x026C, r22
     8c6:	90 93 6d 02 	sts	0x026D, r25
		hundred = temp%10 + 48;
     8ca:	6a e0       	ldi	r22, 0x0A	; 10
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     8d2:	c0 96       	adiw	r24, 0x30	; 48
     8d4:	90 93 71 02 	sts	0x0271, r25
     8d8:	80 93 70 02 	sts	0x0270, r24
		lcd_wr_char(hundred);
     8dc:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_wr_char>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     8e2:	c2 30       	cpi	r28, 0x02	; 2
     8e4:	d1 05       	cpc	r29, r1
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <lcd_print+0xbe>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <lcd_print+0xbe>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	16 c0       	rjmp	.+44     	; 0x91c <lcd_print+0xea>
	{
		temp = value/10;
     8f0:	c8 01       	movw	r24, r16
     8f2:	6a e0       	ldi	r22, 0x0A	; 10
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     8fa:	cb 01       	movw	r24, r22
     8fc:	60 93 6c 02 	sts	0x026C, r22
     900:	90 93 6d 02 	sts	0x026D, r25
		tens = temp%10 + 48;
     904:	6a e0       	ldi	r22, 0x0A	; 10
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     90c:	c0 96       	adiw	r24, 0x30	; 48
     90e:	90 93 6f 02 	sts	0x026F, r25
     912:	80 93 6e 02 	sts	0x026E, r24
		lcd_wr_char(tens);
     916:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_wr_char>
     91a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     91c:	c1 30       	cpi	r28, 0x01	; 1
     91e:	d1 05       	cpc	r29, r1
     920:	11 f0       	breq	.+4      	; 0x926 <lcd_print+0xf4>
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	61 f4       	brne	.+24     	; 0x93e <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     926:	c8 01       	movw	r24, r16
     928:	6a e0       	ldi	r22, 0x0A	; 10
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodhi4>
     930:	c0 96       	adiw	r24, 0x30	; 48
     932:	90 93 73 02 	sts	0x0273, r25
     936:	80 93 72 02 	sts	0x0272, r24
		lcd_wr_char(unit);
     93a:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_wr_char>
	}
	if(digits>5)
     93e:	26 97       	sbiw	r28, 0x06	; 6
     940:	1c f0       	brlt	.+6      	; 0x948 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     942:	85 e4       	ldi	r24, 0x45	; 69
     944:	0e 94 cb 03 	call	0x796	; 0x796 <lcd_wr_char>
	}
	
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <adc_pin_config>:
float BATT_Voltage, BATT_V;


void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
     952:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     954:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
     956:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     95a:	10 92 08 01 	sts	0x0108, r1
}
     95e:	08 95       	ret

00000960 <ADC_Conversion>:


//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
     960:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     962:	88 30       	cpi	r24, 0x08	; 8
     964:	18 f0       	brcs	.+6      	; 0x96c <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     966:	88 e0       	ldi	r24, 0x08	; 8
     968:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     96c:	97 70       	andi	r25, 0x07	; 7
     96e:	90 62       	ori	r25, 0x20	; 32
     970:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     974:	80 91 7a 00 	lds	r24, 0x007A
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     97e:	80 91 7a 00 	lds	r24, 0x007A
     982:	84 ff       	sbrs	r24, 4
     984:	fc cf       	rjmp	.-8      	; 0x97e <ADC_Conversion+0x1e>
	a=ADCH;
     986:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     98a:	90 91 7a 00 	lds	r25, 0x007A
     98e:	90 61       	ori	r25, 0x10	; 16
     990:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     994:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     998:	08 95       	ret

0000099a <adc_init>:
	return distanceInt;
}
//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
     99a:	ea e7       	ldi	r30, 0x7A	; 122
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     9a0:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     9a4:	80 e2       	ldi	r24, 0x20	; 32
     9a6:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     9ae:	86 e8       	ldi	r24, 0x86	; 134
     9b0:	80 83       	st	Z, r24
}
     9b2:	08 95       	ret

000009b4 <Sharp_GP2D12_estimation>:
}
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatunsisf>
     9c2:	2f ee       	ldi	r18, 0xEF	; 239
     9c4:	39 ec       	ldi	r19, 0xC9	; 201
     9c6:	43 e9       	ldi	r20, 0x93	; 147
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 2c 14 	call	0x2858	; 0x2858 <pow>
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	9f e3       	ldi	r25, 0x3F	; 63
     9da:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
     9de:	2a e9       	ldi	r18, 0x9A	; 154
     9e0:	39 ef       	ldi	r19, 0xF9	; 249
     9e2:	4e e2       	ldi	r20, 0x2E	; 46
     9e4:	55 e4       	ldi	r21, 0x45	; 69
     9e6:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e2       	ldi	r20, 0x20	; 32
     9f0:	51 e4       	ldi	r21, 0x41	; 65
     9f2:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     9f6:	0e 94 08 12 	call	0x2410	; 0x2410 <__fixsfsi>
     9fa:	88 27       	eor	r24, r24
     9fc:	77 fd       	sbrc	r23, 7
     9fe:	80 95       	com	r24
     a00:	98 2f       	mov	r25, r24
     a02:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
     a06:	0e 94 08 12 	call	0x2410	; 0x2410 <__fixsfsi>
     a0a:	9b 01       	movw	r18, r22
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	61 32       	cpi	r22, 0x21	; 33
     a10:	78 07       	cpc	r23, r24
     a12:	10 f0       	brcs	.+4      	; 0xa18 <Sharp_GP2D12_estimation+0x64>
     a14:	20 e2       	ldi	r18, 0x20	; 32
     a16:	33 e0       	ldi	r19, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
     a18:	c9 01       	movw	r24, r18
     a1a:	08 95       	ret

00000a1c <motion_pin_config>:
#include  "motor.h"

void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     a1c:	81 b1       	in	r24, 0x01	; 1
     a1e:	8f 60       	ori	r24, 0x0F	; 15
     a20:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     a22:	82 b1       	in	r24, 0x02	; 2
     a24:	80 7f       	andi	r24, 0xF0	; 240
     a26:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     a28:	ea e0       	ldi	r30, 0x0A	; 10
     a2a:	f1 e0       	ldi	r31, 0x01	; 1
     a2c:	80 81       	ld	r24, Z
     a2e:	88 61       	ori	r24, 0x18	; 24
     a30:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     a32:	eb e0       	ldi	r30, 0x0B	; 11
     a34:	f1 e0       	ldi	r31, 0x01	; 1
     a36:	80 81       	ld	r24, Z
     a38:	88 61       	ori	r24, 0x18	; 24
     a3a:	80 83       	st	Z, r24
}
     a3c:	08 95       	ret

00000a3e <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a3e:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a40:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a42:	8f 70       	andi	r24, 0x0F	; 15
     a44:	89 2b       	or	r24, r25
 PORTA = PortARestore; 			// setting the command to the port
     a46:	82 b9       	out	0x02, r24	; 2
}
     a48:	08 95       	ret

00000a4a <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a4a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a4c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a4e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     a50:	82 b9       	out	0x02, r24	; 2


void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     a52:	08 95       	ret

00000a54 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a54:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a56:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a58:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     a5a:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     a5c:	08 95       	ret

00000a5e <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a5e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a60:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a62:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 			// setting the command to the port
     a64:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     a66:	08 95       	ret

00000a68 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a68:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a6a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a6c:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 			// setting the command to the port
     a6e:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     a70:	08 95       	ret

00000a72 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a72:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a74:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a76:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 			// setting the command to the port
     a78:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     a7a:	08 95       	ret

00000a7c <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a7c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a7e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a80:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 			// setting the command to the port
     a82:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     a84:	08 95       	ret

00000a86 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a86:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a88:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a8a:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 			// setting the command to the port
     a8c:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     a8e:	08 95       	ret

00000a90 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a90:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a92:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     a94:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 			// setting the command to the port
     a96:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     a98:	08 95       	ret

00000a9a <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     a9a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     a9c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     a9e:	82 b9       	out	0x02, r24	; 2
}

void stop (void) //hard stop
{
  motion_set(0x00);
}
     aa0:	08 95       	ret

00000aa2 <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     aa2:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     aa4:	74 9a       	sbi	0x0e, 4	; 14
}
     aa6:	08 95       	ret

00000aa8 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     aa8:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     aaa:	75 9a       	sbi	0x0e, 5	; 14
}
     aac:	08 95       	ret

00000aae <posencoder_init>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     aae:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     ab0:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     ab2:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     ab4:	75 9a       	sbi	0x0e, 5	; 14

}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     ab6:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     ab8:	ea e6       	ldi	r30, 0x6A	; 106
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	82 60       	ori	r24, 0x02	; 2
     ac0:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     ac2:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     ac4:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     ac6:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     ac8:	ea e6       	ldi	r30, 0x6A	; 106
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	88 60       	ori	r24, 0x08	; 8
     ad0:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     ad2:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     ad4:	78 94       	sei
 left_encoder_pin_config(); //left encoder pin config
 right_encoder_pin_config(); //right encoder pin config	
 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();

}
     ad6:	08 95       	ret

00000ad8 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     ad8:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     ada:	ea e6       	ldi	r30, 0x6A	; 106
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	82 60       	ori	r24, 0x02	; 2
     ae2:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     ae4:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     ae6:	78 94       	sei
}
     ae8:	08 95       	ret

00000aea <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     aea:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     aec:	ea e6       	ldi	r30, 0x6A	; 106
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	88 60       	ori	r24, 0x08	; 8
     af4:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     af6:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     af8:	78 94       	sei
}
     afa:	08 95       	ret

00000afc <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     b0e:	80 91 42 02 	lds	r24, 0x0242
     b12:	90 91 43 02 	lds	r25, 0x0243
     b16:	a0 91 44 02 	lds	r26, 0x0244
     b1a:	b0 91 45 02 	lds	r27, 0x0245
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	a1 1d       	adc	r26, r1
     b22:	b1 1d       	adc	r27, r1
     b24:	80 93 42 02 	sts	0x0242, r24
     b28:	90 93 43 02 	sts	0x0243, r25
     b2c:	a0 93 44 02 	sts	0x0244, r26
     b30:	b0 93 45 02 	sts	0x0245, r27
}
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	af 93       	push	r26
     b56:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     b58:	80 91 3e 02 	lds	r24, 0x023E
     b5c:	90 91 3f 02 	lds	r25, 0x023F
     b60:	a0 91 40 02 	lds	r26, 0x0240
     b64:	b0 91 41 02 	lds	r27, 0x0241
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	a1 1d       	adc	r26, r1
     b6c:	b1 1d       	adc	r27, r1
     b6e:	80 93 3e 02 	sts	0x023E, r24
     b72:	90 93 3f 02 	sts	0x023F, r25
     b76:	a0 93 40 02 	sts	0x0240, r26
     b7a:	b0 93 41 02 	sts	0x0241, r27
}
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <getPosLeftCount>:

unsigned long int getPosLeftCount()
{
     b90:	60 91 3e 02 	lds	r22, 0x023E
     b94:	70 91 3f 02 	lds	r23, 0x023F
	return  ShaftCountLeft;
}
     b98:	80 91 40 02 	lds	r24, 0x0240
     b9c:	90 91 41 02 	lds	r25, 0x0241
     ba0:	08 95       	ret

00000ba2 <getPosRightCount>:

unsigned long int getPosRightCount()
{
     ba2:	60 91 42 02 	lds	r22, 0x0242
     ba6:	70 91 43 02 	lds	r23, 0x0243
	return  ShaftCountRight;
}
     baa:	80 91 44 02 	lds	r24, 0x0244
     bae:	90 91 45 02 	lds	r25, 0x0245
     bb2:	08 95       	ret

00000bb4 <clearPosCounters>:

void clearPosCounters()
{
	ShaftCountLeft=0;
     bb4:	10 92 3e 02 	sts	0x023E, r1
     bb8:	10 92 3f 02 	sts	0x023F, r1
     bbc:	10 92 40 02 	sts	0x0240, r1
     bc0:	10 92 41 02 	sts	0x0241, r1
	ShaftCountRight=0;
     bc4:	10 92 42 02 	sts	0x0242, r1
     bc8:	10 92 43 02 	sts	0x0243, r1
     bcc:	10 92 44 02 	sts	0x0244, r1
     bd0:	10 92 45 02 	sts	0x0245, r1
}
     bd4:	08 95       	ret

00000bd6 <travelledDistance>:

unsigned long int travelledDistance()
{

	
}
     bd6:	08 95       	ret

00000bd8 <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     bd8:	e1 ed       	ldi	r30, 0xD1	; 209
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     bde:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     be2:	86 e0       	ldi	r24, 0x06	; 6
     be4:	80 93 d2 00 	sts	0x00D2, r24
 //UBRR2L = 0x5F; //set baud rate lo
 UBRR2L = 0x07;
     be8:	87 e0       	ldi	r24, 0x07	; 7
     bea:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     bee:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     bf2:	88 e9       	ldi	r24, 0x98	; 152
     bf4:	80 83       	st	Z, r24
}
     bf6:	08 95       	ret

00000bf8 <send_char>:


void send_char(char c)
{
     bf8:	98 2f       	mov	r25, r24
	while ((UCSR2A & (1 << UDRE2)) == 0) {};
     bfa:	80 91 d0 00 	lds	r24, 0x00D0
     bfe:	85 ff       	sbrs	r24, 5
     c00:	fc cf       	rjmp	.-8      	; 0xbfa <send_char+0x2>
	UDR2 = c;
     c02:	90 93 d6 00 	sts	0x00D6, r25
}
     c06:	08 95       	ret

00000c08 <uart2_puts>:


void uart2_puts(char s[])
{
     c08:	fc 01       	movw	r30, r24
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <uart2_puts+0x12>
}


void send_char(char c)
{
	while ((UCSR2A & (1 << UDRE2)) == 0) {};
     c0c:	80 91 d0 00 	lds	r24, 0x00D0
     c10:	85 ff       	sbrs	r24, 5
     c12:	fc cf       	rjmp	.-8      	; 0xc0c <uart2_puts+0x4>
	UDR2 = c;
     c14:	90 93 d6 00 	sts	0x00D6, r25
     c18:	31 96       	adiw	r30, 0x01	; 1

void uart2_puts(char s[])
{
	int i =0;
	
	while (s[i] != 0x00)
     c1a:	90 81       	ld	r25, Z
     c1c:	99 23       	and	r25, r25
     c1e:	b1 f7       	brne	.-20     	; 0xc0c <uart2_puts+0x4>
	{
		send_char(s[i]);
		i++;
	}
}
     c20:	08 95       	ret

00000c22 <__vector_51>:


SIGNAL(SIG_USART2_RECV)
 {
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	0b b6       	in	r0, 0x3b	; 59
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	2f 93       	push	r18
     c32:	3f 93       	push	r19
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	ef 93       	push	r30
     c3a:	ff 93       	push	r31
	   // Get data from the USART in register
	   data_in[data_count] = UDR2;
     c3c:	20 91 46 02 	lds	r18, 0x0246
     c40:	30 91 47 02 	lds	r19, 0x0247
     c44:	80 91 d6 00 	lds	r24, 0x00D6
     c48:	f9 01       	movw	r30, r18
     c4a:	ec 57       	subi	r30, 0x7C	; 124
     c4c:	fd 4f       	sbci	r31, 0xFD	; 253
     c4e:	80 83       	st	Z, r24

	   if (data_in[data_count] == '\n')
     c50:	8a 30       	cpi	r24, 0x0A	; 10
     c52:	59 f4       	brne	.+22     	; 0xc6a <__vector_51+0x48>
	    {
		   
		   
		   
		   command_ready = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	90 93 49 02 	sts	0x0249, r25
     c5c:	80 93 48 02 	sts	0x0248, r24
		   // Reset to 0, ready to go again

		   data_count = 0;
     c60:	10 92 47 02 	sts	0x0247, r1
     c64:	10 92 46 02 	sts	0x0246, r1
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <__vector_51+0x54>
		} 
		   else 
		   {
		   data_count++;
     c6a:	2f 5f       	subi	r18, 0xFF	; 255
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	30 93 47 02 	sts	0x0247, r19
     c72:	20 93 46 02 	sts	0x0246, r18
	       }
 }
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0b be       	out	0x3b, r0	; 59
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <get_data>:
 
 
char *get_data()
{
	if(command_ready==1)
     c90:	80 91 48 02 	lds	r24, 0x0248
     c94:	90 91 49 02 	lds	r25, 0x0249
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	19 f0       	breq	.+6      	; 0xca2 <get_data+0x12>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <get_data+0x1e>
	{

		command_ready=0;
     ca2:	10 92 49 02 	sts	0x0249, r1
     ca6:	10 92 48 02 	sts	0x0248, r1
     caa:	24 e8       	ldi	r18, 0x84	; 132
     cac:	32 e0       	ldi	r19, 0x02	; 2

	}
	else
		return '\0';

}        
     cae:	c9 01       	movw	r24, r18
     cb0:	08 95       	ret

00000cb2 <normalize_weight>:

}



void normalize_weight(particle** particles, float total_weight){
     cb2:	af 92       	push	r10
     cb4:	bf 92       	push	r11
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	5c 01       	movw	r10, r24
     cc8:	6a 01       	movw	r12, r20
     cca:	7b 01       	movw	r14, r22
     ccc:	c0 e0       	ldi	r28, 0x00	; 0
     cce:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0; i<NUM_PARTICLE; i++){
		particles[i]->weight = particles[i]->weight/total_weight;
     cd0:	f5 01       	movw	r30, r10
     cd2:	ec 0f       	add	r30, r28
     cd4:	fd 1f       	adc	r31, r29
     cd6:	00 81       	ld	r16, Z
     cd8:	11 81       	ldd	r17, Z+1	; 0x01
     cda:	f8 01       	movw	r30, r16
     cdc:	64 89       	ldd	r22, Z+20	; 0x14
     cde:	75 89       	ldd	r23, Z+21	; 0x15
     ce0:	86 89       	ldd	r24, Z+22	; 0x16
     ce2:	97 89       	ldd	r25, Z+23	; 0x17
     ce4:	a7 01       	movw	r20, r14
     ce6:	96 01       	movw	r18, r12
     ce8:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
     cec:	f8 01       	movw	r30, r16
     cee:	64 8b       	std	Z+20, r22	; 0x14
     cf0:	75 8b       	std	Z+21, r23	; 0x15
     cf2:	86 8b       	std	Z+22, r24	; 0x16
     cf4:	97 8b       	std	Z+23, r25	; 0x17
     cf6:	22 96       	adiw	r28, 0x02	; 2



void normalize_weight(particle** particles, float total_weight){
	int i;
	for(i=0; i<NUM_PARTICLE; i++){
     cf8:	c8 3c       	cpi	r28, 0xC8	; 200
     cfa:	d1 05       	cpc	r29, r1
     cfc:	49 f7       	brne	.-46     	; 0xcd0 <normalize_weight+0x1e>
		particles[i]->weight = particles[i]->weight/total_weight;
	}

}
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	08 95       	ret

00000d14 <copy_particle>:
	//printf("returning X from gaussrand=%f\n", X);
	return X;
}

int copy_particle(particle* dst, particle* src)
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ec 01       	movw	r28, r24
     d1a:	fb 01       	movw	r30, r22
	if(dst == NULL || src == NULL)
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	b1 f1       	breq	.+108    	; 0xd8c <copy_particle+0x78>
     d20:	61 15       	cp	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	99 f1       	breq	.+102    	; 0xd8c <copy_particle+0x78>
	{
		//printf("copy_particle: either src or dst pointer is null.\n");
		return NULL_POINTER_ENCOUNTERED;
	}
	dst->x = src->x;
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	a2 81       	ldd	r26, Z+2	; 0x02
     d2c:	b3 81       	ldd	r27, Z+3	; 0x03
     d2e:	88 83       	st	Y, r24
     d30:	99 83       	std	Y+1, r25	; 0x01
     d32:	aa 83       	std	Y+2, r26	; 0x02
     d34:	bb 83       	std	Y+3, r27	; 0x03
	dst->y = src->y;
     d36:	84 81       	ldd	r24, Z+4	; 0x04
     d38:	95 81       	ldd	r25, Z+5	; 0x05
     d3a:	a6 81       	ldd	r26, Z+6	; 0x06
     d3c:	b7 81       	ldd	r27, Z+7	; 0x07
     d3e:	8c 83       	std	Y+4, r24	; 0x04
     d40:	9d 83       	std	Y+5, r25	; 0x05
     d42:	ae 83       	std	Y+6, r26	; 0x06
     d44:	bf 83       	std	Y+7, r27	; 0x07
	dst->vx = src->vx;
     d46:	80 85       	ldd	r24, Z+8	; 0x08
     d48:	91 85       	ldd	r25, Z+9	; 0x09
     d4a:	a2 85       	ldd	r26, Z+10	; 0x0a
     d4c:	b3 85       	ldd	r27, Z+11	; 0x0b
     d4e:	88 87       	std	Y+8, r24	; 0x08
     d50:	99 87       	std	Y+9, r25	; 0x09
     d52:	aa 87       	std	Y+10, r26	; 0x0a
     d54:	bb 87       	std	Y+11, r27	; 0x0b
	dst->vy = src->vy;
     d56:	84 85       	ldd	r24, Z+12	; 0x0c
     d58:	95 85       	ldd	r25, Z+13	; 0x0d
     d5a:	a6 85       	ldd	r26, Z+14	; 0x0e
     d5c:	b7 85       	ldd	r27, Z+15	; 0x0f
     d5e:	8c 87       	std	Y+12, r24	; 0x0c
     d60:	9d 87       	std	Y+13, r25	; 0x0d
     d62:	ae 87       	std	Y+14, r26	; 0x0e
     d64:	bf 87       	std	Y+15, r27	; 0x0f
	dst->direction = src->direction;
     d66:	80 89       	ldd	r24, Z+16	; 0x10
     d68:	91 89       	ldd	r25, Z+17	; 0x11
     d6a:	a2 89       	ldd	r26, Z+18	; 0x12
     d6c:	b3 89       	ldd	r27, Z+19	; 0x13
     d6e:	88 8b       	std	Y+16, r24	; 0x10
     d70:	99 8b       	std	Y+17, r25	; 0x11
     d72:	aa 8b       	std	Y+18, r26	; 0x12
     d74:	bb 8b       	std	Y+19, r27	; 0x13
	dst->weight = src->weight;
     d76:	84 89       	ldd	r24, Z+20	; 0x14
     d78:	95 89       	ldd	r25, Z+21	; 0x15
     d7a:	a6 89       	ldd	r26, Z+22	; 0x16
     d7c:	b7 89       	ldd	r27, Z+23	; 0x17
     d7e:	8c 8b       	std	Y+20, r24	; 0x14
     d80:	9d 8b       	std	Y+21, r25	; 0x15
     d82:	ae 8b       	std	Y+22, r26	; 0x16
     d84:	bf 8b       	std	Y+23, r27	; 0x17
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <copy_particle+0x7c>
	return SUCCESS;
     d8c:	26 e0       	ldi	r18, 0x06	; 6
     d8e:	30 e0       	ldi	r19, 0x00	; 0
}
     d90:	c9 01       	movw	r24, r18
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <print_particles>:
		//	printf("%d    %f    %f    %f    %f    %f    %f\n", i, particles[i]->x, particles[i]->y, particles[i]->vx, particles[i]->vy, particles[i]->direction, particles[i]->weight);
		}
	
	}

}
     d98:	08 95       	ret

00000d9a <free_particles>:
	return SUCCESS;
}


int free_particles(particle** particles)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	8c 01       	movw	r16, r24
	int i;
	if(particles == NULL)
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	19 f4       	brne	.+6      	; 0xdae <free_particles+0x14>
     da8:	26 e0       	ldi	r18, 0x06	; 6
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	14 c0       	rjmp	.+40     	; 0xdd6 <free_particles+0x3c>
     dae:	c0 e0       	ldi	r28, 0x00	; 0
     db0:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("free_particles: particles pointer is null.\n");
		return NULL_POINTER_ENCOUNTERED;
	}
	for(i=0; i<NUM_PARTICLE; i++)
	{
		if(particles[i])
     db2:	f8 01       	movw	r30, r16
     db4:	ec 0f       	add	r30, r28
     db6:	fd 1f       	adc	r31, r29
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	11 f0       	breq	.+4      	; 0xdc4 <free_particles+0x2a>
		{
			free(particles[i]);
     dc0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <free>
     dc4:	22 96       	adiw	r28, 0x02	; 2
	if(particles == NULL)
	{
		//printf("free_particles: particles pointer is null.\n");
		return NULL_POINTER_ENCOUNTERED;
	}
	for(i=0; i<NUM_PARTICLE; i++)
     dc6:	c8 3c       	cpi	r28, 0xC8	; 200
     dc8:	d1 05       	cpc	r29, r1
     dca:	99 f7       	brne	.-26     	; 0xdb2 <free_particles+0x18>
		if(particles[i])
		{
			free(particles[i]);
		}
	}
	free(particles);
     dcc:	c8 01       	movw	r24, r16
     dce:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <free>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
	return SUCCESS;
}
     dd6:	c9 01       	movw	r24, r18
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <gaussrand>:
	//printf("calculate_weight going out\n");
	return weight;
}

double gaussrand()
{
     de2:	6f 92       	push	r6
     de4:	7f 92       	push	r7
     de6:	8f 92       	push	r8
     de8:	9f 92       	push	r9
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
	static double V1, V2, S;
	static int phase = 0;
	double X;

	if(phase == 0) {
     dfa:	80 91 5a 02 	lds	r24, 0x025A
     dfe:	90 91 5b 02 	lds	r25, 0x025B
     e02:	89 2b       	or	r24, r25
     e04:	09 f0       	breq	.+2      	; 0xe08 <gaussrand+0x26>
     e06:	90 c0       	rjmp	.+288    	; 0xf28 <gaussrand+0x146>
		do {
			double U1 = (double)rand() / RAND_MAX;
     e08:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rand>
     e0c:	7c 01       	movw	r14, r24
			double U2 = (double)rand() / RAND_MAX;
     e0e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rand>
     e12:	5c 01       	movw	r10, r24

			V1 = 2 * U1 - 1;
     e14:	00 27       	eor	r16, r16
     e16:	f7 fc       	sbrc	r15, 7
     e18:	00 95       	com	r16
     e1a:	10 2f       	mov	r17, r16
     e1c:	c8 01       	movw	r24, r16
     e1e:	b7 01       	movw	r22, r14
     e20:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3e ef       	ldi	r19, 0xFE	; 254
     e28:	4f ef       	ldi	r20, 0xFF	; 255
     e2a:	56 e4       	ldi	r21, 0x46	; 70
     e2c:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
     e30:	9b 01       	movw	r18, r22
     e32:	ac 01       	movw	r20, r24
     e34:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
     e44:	3b 01       	movw	r6, r22
     e46:	4c 01       	movw	r8, r24
     e48:	60 93 64 02 	sts	0x0264, r22
     e4c:	70 93 65 02 	sts	0x0265, r23
     e50:	80 93 66 02 	sts	0x0266, r24
     e54:	90 93 67 02 	sts	0x0267, r25
			V2 = 2 * U2 - 1;
     e58:	cc 24       	eor	r12, r12
     e5a:	b7 fc       	sbrc	r11, 7
     e5c:	c0 94       	com	r12
     e5e:	dc 2c       	mov	r13, r12
     e60:	c6 01       	movw	r24, r12
     e62:	b5 01       	movw	r22, r10
     e64:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	3e ef       	ldi	r19, 0xFE	; 254
     e6c:	4f ef       	ldi	r20, 0xFF	; 255
     e6e:	56 e4       	ldi	r21, 0x46	; 70
     e70:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
     e74:	9b 01       	movw	r18, r22
     e76:	ac 01       	movw	r20, r24
     e78:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
     e88:	7b 01       	movw	r14, r22
     e8a:	8c 01       	movw	r16, r24
     e8c:	60 93 60 02 	sts	0x0260, r22
     e90:	70 93 61 02 	sts	0x0261, r23
     e94:	80 93 62 02 	sts	0x0262, r24
     e98:	90 93 63 02 	sts	0x0263, r25
			S = V1 * V1 + V2 * V2;
     e9c:	c4 01       	movw	r24, r8
     e9e:	b3 01       	movw	r22, r6
     ea0:	a4 01       	movw	r20, r8
     ea2:	93 01       	movw	r18, r6
     ea4:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     ea8:	5b 01       	movw	r10, r22
     eaa:	6c 01       	movw	r12, r24
     eac:	c8 01       	movw	r24, r16
     eae:	b7 01       	movw	r22, r14
     eb0:	a8 01       	movw	r20, r16
     eb2:	97 01       	movw	r18, r14
     eb4:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     eb8:	9b 01       	movw	r18, r22
     eba:	ac 01       	movw	r20, r24
     ebc:	c6 01       	movw	r24, r12
     ebe:	b5 01       	movw	r22, r10
     ec0:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
     ec4:	7b 01       	movw	r14, r22
     ec6:	8c 01       	movw	r16, r24
     ec8:	60 93 5c 02 	sts	0x025C, r22
     ecc:	70 93 5d 02 	sts	0x025D, r23
     ed0:	80 93 5e 02 	sts	0x025E, r24
     ed4:	90 93 5f 02 	sts	0x025F, r25
			} while(S >= 1 || S == 0);
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     ee4:	87 ff       	sbrs	r24, 7
     ee6:	90 cf       	rjmp	.-224    	; 0xe08 <gaussrand+0x26>
     ee8:	c8 01       	movw	r24, r16
     eea:	b7 01       	movw	r22, r14
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__cmpsf2>
     ef8:	88 23       	and	r24, r24
     efa:	09 f4       	brne	.+2      	; 0xefe <gaussrand+0x11c>
     efc:	85 cf       	rjmp	.-246    	; 0xe08 <gaussrand+0x26>

		X = V1 * sqrt(-2 * log(S) / S);
     efe:	c8 01       	movw	r24, r16
     f00:	b7 01       	movw	r22, r14
     f02:	0e 94 56 13 	call	0x26ac	; 0x26ac <log>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 ec       	ldi	r21, 0xC0	; 192
     f0e:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     f12:	a8 01       	movw	r20, r16
     f14:	97 01       	movw	r18, r14
     f16:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
     f1a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <sqrt>
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	c4 01       	movw	r24, r8
     f24:	b3 01       	movw	r22, r6
     f26:	20 c0       	rjmp	.+64     	; 0xf68 <gaussrand+0x186>
	} else
		X = V2 * sqrt(-2 * log(S) / S);
     f28:	e0 90 5c 02 	lds	r14, 0x025C
     f2c:	f0 90 5d 02 	lds	r15, 0x025D
     f30:	00 91 5e 02 	lds	r16, 0x025E
     f34:	10 91 5f 02 	lds	r17, 0x025F
     f38:	c8 01       	movw	r24, r16
     f3a:	b7 01       	movw	r22, r14
     f3c:	0e 94 56 13 	call	0x26ac	; 0x26ac <log>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 ec       	ldi	r21, 0xC0	; 192
     f48:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     f4c:	a8 01       	movw	r20, r16
     f4e:	97 01       	movw	r18, r14
     f50:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
     f54:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <sqrt>
     f58:	20 91 60 02 	lds	r18, 0x0260
     f5c:	30 91 61 02 	lds	r19, 0x0261
     f60:	40 91 62 02 	lds	r20, 0x0262
     f64:	50 91 63 02 	lds	r21, 0x0263
     f68:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
     f6c:	f6 2f       	mov	r31, r22
     f6e:	e7 2f       	mov	r30, r23
     f70:	78 2f       	mov	r23, r24
     f72:	69 2f       	mov	r22, r25

	phase = 1 - phase;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	20 91 5a 02 	lds	r18, 0x025A
     f7c:	30 91 5b 02 	lds	r19, 0x025B
     f80:	82 1b       	sub	r24, r18
     f82:	93 0b       	sbc	r25, r19
     f84:	90 93 5b 02 	sts	0x025B, r25
     f88:	80 93 5a 02 	sts	0x025A, r24
	//printf("returning X from gaussrand=%f\n", X);
	return X;
}
     f8c:	2f 2f       	mov	r18, r31
     f8e:	3e 2f       	mov	r19, r30
     f90:	47 2f       	mov	r20, r23
     f92:	56 2f       	mov	r21, r22
     f94:	b9 01       	movw	r22, r18
     f96:	ca 01       	movw	r24, r20
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	9f 90       	pop	r9
     faa:	8f 90       	pop	r8
     fac:	7f 90       	pop	r7
     fae:	6f 90       	pop	r6
     fb0:	08 95       	ret

00000fb2 <sense>:
	free_particles(particles);
	particles = resampled;
	//print_particles(particles);
}

void sense(float x, float y, float direction, float* measurement_ref,unsigned int  ** sensed){
     fb2:	2f 92       	push	r2
     fb4:	3f 92       	push	r3
     fb6:	4f 92       	push	r4
     fb8:	5f 92       	push	r5
     fba:	6f 92       	push	r6
     fbc:	7f 92       	push	r7
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <sense+0x26>
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	1b 01       	movw	r2, r22
     fe0:	2c 01       	movw	r4, r24
     fe2:	39 01       	movw	r6, r18
     fe4:	4a 01       	movw	r8, r20
     fe6:	ba 82       	std	Y+2, r11	; 0x02
     fe8:	a9 82       	std	Y+1, r10	; 0x01
     fea:	56 01       	movw	r10, r12
     fec:	1c 82       	std	Y+4, r1	; 0x04
     fee:	1b 82       	std	Y+3, r1	; 0x03
	int i;
	
	for(i=0; i<REFERENCE_POINTS; i++){
		float dist_from_ref = sqrt(pow((x-sensed[i][0]), 2) + pow((y-sensed[i][1]), 2));
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	c0 80       	ld	r12, Z
     ffe:	d1 80       	ldd	r13, Z+1	; 0x01
    1000:	d6 01       	movw	r26, r12
    1002:	6d 91       	ld	r22, X+
    1004:	7c 91       	ld	r23, X
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatunsisf>
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	c2 01       	movw	r24, r4
    1014:	b1 01       	movw	r22, r2
    1016:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    1022:	7b 01       	movw	r14, r22
    1024:	8c 01       	movw	r16, r24
    1026:	f6 01       	movw	r30, r12
    1028:	62 81       	ldd	r22, Z+2	; 0x02
    102a:	73 81       	ldd	r23, Z+3	; 0x03
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatunsisf>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	c4 01       	movw	r24, r8
    103a:	b3 01       	movw	r22, r6
    103c:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
    1040:	9b 01       	movw	r18, r22
    1042:	ac 01       	movw	r20, r24
    1044:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    1048:	9b 01       	movw	r18, r22
    104a:	ac 01       	movw	r20, r24
    104c:	c8 01       	movw	r24, r16
    104e:	b7 01       	movw	r22, r14
    1050:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
    1054:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <sqrt>
		measurement_ref[i] = dist_from_ref; //+ gaussrand();
    1058:	d5 01       	movw	r26, r10
    105a:	6d 93       	st	X+, r22
    105c:	7d 93       	st	X+, r23
    105e:	8d 93       	st	X+, r24
    1060:	9d 93       	st	X+, r25
    1062:	5d 01       	movw	r10, r26
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	32 96       	adiw	r30, 0x02	; 2
    106a:	fc 83       	std	Y+4, r31	; 0x04
    106c:	eb 83       	std	Y+3, r30	; 0x03
}

void sense(float x, float y, float direction, float* measurement_ref,unsigned int  ** sensed){
	int i;
	
	for(i=0; i<REFERENCE_POINTS; i++){
    106e:	36 97       	sbiw	r30, 0x06	; 6
    1070:	09 f0       	breq	.+2      	; 0x1074 <sense+0xc2>
    1072:	be cf       	rjmp	.-132    	; 0xff0 <sense+0x3e>
		float dist_from_ref = sqrt(pow((x-sensed[i][0]), 2) + pow((y-sensed[i][1]), 2));
		measurement_ref[i] = dist_from_ref; //+ gaussrand();
	}
	return;
	
}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	bf 90       	pop	r11
    108e:	af 90       	pop	r10
    1090:	9f 90       	pop	r9
    1092:	8f 90       	pop	r8
    1094:	7f 90       	pop	r7
    1096:	6f 90       	pop	r6
    1098:	5f 90       	pop	r5
    109a:	4f 90       	pop	r4
    109c:	3f 90       	pop	r3
    109e:	2f 90       	pop	r2
    10a0:	08 95       	ret

000010a2 <resample_particles>:

}



int resample_particles(particle** particles, double max_weight){
    10a2:	2f 92       	push	r2
    10a4:	3f 92       	push	r3
    10a6:	4f 92       	push	r4
    10a8:	5f 92       	push	r5
    10aa:	6f 92       	push	r6
    10ac:	7f 92       	push	r7
    10ae:	8f 92       	push	r8
    10b0:	9f 92       	push	r9
    10b2:	af 92       	push	r10
    10b4:	bf 92       	push	r11
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <resample_particles+0x26>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <resample_particles+0x28>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	1a 01       	movw	r2, r20
    10d4:	2b 01       	movw	r4, r22
		}
	}*/

	//Resample the particles
	int i;
	int index = (int)rand()%NUM_PARTICLE;
    10d6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rand>
    10da:	64 e6       	ldi	r22, 0x64	; 100
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodhi4>
    10e2:	3c 01       	movw	r6, r24
	double beta = 0;
	//printf("index=%d\n", index);
	//int num0 = 0;
	//int num1 = 0;
	particle** resampled = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
    10e4:	88 ec       	ldi	r24, 0xC8	; 200
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <malloc>
    10ec:	4c 01       	movw	r8, r24
    10ee:	0f 2e       	mov	r0, r31
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	af 2e       	mov	r10, r31
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	bf 2e       	mov	r11, r31
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	cf 2e       	mov	r12, r31
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	df 2e       	mov	r13, r31
    1100:	f0 2d       	mov	r31, r0
	for(i=0; i<NUM_PARTICLE; i++)
    1102:	9c 01       	movw	r18, r24
    1104:	28 53       	subi	r18, 0x38	; 56
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	3c 83       	std	Y+4, r19	; 0x04
    110a:	2b 83       	std	Y+3, r18	; 0x03
	{

		beta += ((float)rand()/RAND_MAX)*2.0*max_weight;
    110c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rand>
    1110:	aa 27       	eor	r26, r26
    1112:	97 fd       	sbrc	r25, 7
    1114:	a0 95       	com	r26
    1116:	ba 2f       	mov	r27, r26
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3e ef       	ldi	r19, 0xFE	; 254
    1124:	4f ef       	ldi	r20, 0xFF	; 255
    1126:	56 e4       	ldi	r21, 0x46	; 70
    1128:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
    112c:	9b 01       	movw	r18, r22
    112e:	ac 01       	movw	r20, r24
    1130:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
    1134:	a2 01       	movw	r20, r4
    1136:	91 01       	movw	r18, r2
    1138:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	c6 01       	movw	r24, r12
    1142:	b5 01       	movw	r22, r10
    1144:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
    1148:	5b 01       	movw	r10, r22
    114a:	6c 01       	movw	r12, r24
    114c:	0f c0       	rjmp	.+30     	; 0x116c <resample_particles+0xca>
		//printf("beta=%f, particles[%d]->weight=%f\n", beta, index, particles[index]->weight);
		while(beta>particles[index]->weight)
		{
			beta = beta-particles[index]->weight;
    114e:	c6 01       	movw	r24, r12
    1150:	b5 01       	movw	r22, r10
    1152:	a8 01       	movw	r20, r16
    1154:	97 01       	movw	r18, r14
    1156:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
    115a:	5b 01       	movw	r10, r22
    115c:	6c 01       	movw	r12, r24
			//printf("beta=%f\n", beta);
			index = (index+1)%NUM_PARTICLE;
    115e:	c3 01       	movw	r24, r6
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	64 e6       	ldi	r22, 0x64	; 100
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodhi4>
    116a:	3c 01       	movw	r6, r24
	for(i=0; i<NUM_PARTICLE; i++)
	{

		beta += ((float)rand()/RAND_MAX)*2.0*max_weight;
		//printf("beta=%f, particles[%d]->weight=%f\n", beta, index, particles[index]->weight);
		while(beta>particles[index]->weight)
    116c:	c3 01       	movw	r24, r6
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	a9 81       	ldd	r26, Y+1	; 0x01
    1174:	ba 81       	ldd	r27, Y+2	; 0x02
    1176:	8a 0f       	add	r24, r26
    1178:	9b 1f       	adc	r25, r27
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	dc 01       	movw	r26, r24
    1180:	ed 91       	ld	r30, X+
    1182:	fc 91       	ld	r31, X
    1184:	e4 88       	ldd	r14, Z+20	; 0x14
    1186:	f5 88       	ldd	r15, Z+21	; 0x15
    1188:	06 89       	ldd	r16, Z+22	; 0x16
    118a:	17 89       	ldd	r17, Z+23	; 0x17
    118c:	c6 01       	movw	r24, r12
    118e:	b5 01       	movw	r22, r10
    1190:	a8 01       	movw	r20, r16
    1192:	97 01       	movw	r18, r14
    1194:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1198:	18 16       	cp	r1, r24
    119a:	cc f2       	brlt	.-78     	; 0x114e <resample_particles+0xac>
		{
			beta = beta-particles[index]->weight;
			//printf("beta=%f\n", beta);
			index = (index+1)%NUM_PARTICLE;
		}
		resampled[i] = (particle*)malloc(sizeof(particle));
    119c:	88 e1       	ldi	r24, 0x18	; 24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <malloc>
    11a4:	f4 01       	movw	r30, r8
    11a6:	80 83       	st	Z, r24
    11a8:	91 83       	std	Z+1, r25	; 0x01
		copy_particle(resampled[i], particles[index]);
    11aa:	ad 81       	ldd	r26, Y+5	; 0x05
    11ac:	be 81       	ldd	r27, Y+6	; 0x06
    11ae:	6d 91       	ld	r22, X+
    11b0:	7c 91       	ld	r23, X
    11b2:	0e 94 8a 06 	call	0xd14	; 0xd14 <copy_particle>
    11b6:	e2 e0       	ldi	r30, 0x02	; 2
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8e 0e       	add	r8, r30
    11bc:	9f 1e       	adc	r9, r31
	double beta = 0;
	//printf("index=%d\n", index);
	//int num0 = 0;
	//int num1 = 0;
	particle** resampled = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
	for(i=0; i<NUM_PARTICLE; i++)
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	82 16       	cp	r8, r18
    11c4:	93 06       	cpc	r9, r19
    11c6:	09 f0       	breq	.+2      	; 0x11ca <resample_particles+0x128>
    11c8:	a1 cf       	rjmp	.-190    	; 0x110c <resample_particles+0x6a>
			num0++;
		else if(index == 1)
			num1++;
		printf("selected index=%d, num0=%d, num1=%d\n", index, num0, num1);*/
	}
	free_particles(particles);
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	0e 94 cd 06 	call	0xd9a	; 0xd9a <free_particles>
	particles = resampled;
	//print_particles(particles);
}
    11d2:	26 96       	adiw	r28, 0x06	; 6
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	9f 90       	pop	r9
    11f4:	8f 90       	pop	r8
    11f6:	7f 90       	pop	r7
    11f8:	6f 90       	pop	r6
    11fa:	5f 90       	pop	r5
    11fc:	4f 90       	pop	r4
    11fe:	3f 90       	pop	r3
    1200:	2f 90       	pop	r2
    1202:	08 95       	ret

00001204 <create_particles>:


float state_vector[4] = {0,0,0,0};
float reference_points[3][2] = {{0,0}, {10, 10}, {10, 0}};

int create_particles(){
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
	int i;
	particles = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
    1214:	88 ec       	ldi	r24, 0xC8	; 200
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <malloc>
    121c:	80 93 68 02 	sts	0x0268, r24
    1220:	90 93 69 02 	sts	0x0269, r25
    1224:	c0 e0       	ldi	r28, 0x00	; 0
    1226:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<NUM_PARTICLE; i++){
		particles[i] = (particle*)malloc(sizeof(particle));
		particles[i]->x = rand()%10;
		particles[i]->y = rand()%10;
		particles[i]->direction = (float)(rand()/RAND_MAX)*2*PI;
		particles[i]->weight = 1/(float)NUM_PARTICLE;
    1228:	0f 2e       	mov	r0, r31
    122a:	fa e0       	ldi	r31, 0x0A	; 10
    122c:	cf 2e       	mov	r12, r31
    122e:	f7 ed       	ldi	r31, 0xD7	; 215
    1230:	df 2e       	mov	r13, r31
    1232:	f3 e2       	ldi	r31, 0x23	; 35
    1234:	ef 2e       	mov	r14, r31
    1236:	fc e3       	ldi	r31, 0x3C	; 60
    1238:	ff 2e       	mov	r15, r31
    123a:	f0 2d       	mov	r31, r0
int create_particles(){
	int i;
	particles = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
	//particles = malloc(NUM_PARTICLE * sizeof(particle));
	for(i=0; i<NUM_PARTICLE; i++){
		particles[i] = (particle*)malloc(sizeof(particle));
    123c:	00 91 68 02 	lds	r16, 0x0268
    1240:	10 91 69 02 	lds	r17, 0x0269
    1244:	0c 0f       	add	r16, r28
    1246:	1d 1f       	adc	r17, r29
    1248:	88 e1       	ldi	r24, 0x18	; 24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <malloc>
    1250:	f8 01       	movw	r30, r16
    1252:	80 83       	st	Z, r24
    1254:	91 83       	std	Z+1, r25	; 0x01
		particles[i]->x = rand()%10;
    1256:	e0 91 68 02 	lds	r30, 0x0268
    125a:	f0 91 69 02 	lds	r31, 0x0269
    125e:	ec 0f       	add	r30, r28
    1260:	fd 1f       	adc	r31, r29
    1262:	00 81       	ld	r16, Z
    1264:	11 81       	ldd	r17, Z+1	; 0x01
    1266:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rand>
    126a:	6a e0       	ldi	r22, 0x0A	; 10
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodhi4>
    1272:	aa 27       	eor	r26, r26
    1274:	97 fd       	sbrc	r25, 7
    1276:	a0 95       	com	r26
    1278:	ba 2f       	mov	r27, r26
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    1282:	f8 01       	movw	r30, r16
    1284:	60 83       	st	Z, r22
    1286:	71 83       	std	Z+1, r23	; 0x01
    1288:	82 83       	std	Z+2, r24	; 0x02
    128a:	93 83       	std	Z+3, r25	; 0x03
		particles[i]->y = rand()%10;
    128c:	e0 91 68 02 	lds	r30, 0x0268
    1290:	f0 91 69 02 	lds	r31, 0x0269
    1294:	ec 0f       	add	r30, r28
    1296:	fd 1f       	adc	r31, r29
    1298:	00 81       	ld	r16, Z
    129a:	11 81       	ldd	r17, Z+1	; 0x01
    129c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rand>
    12a0:	6a e0       	ldi	r22, 0x0A	; 10
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodhi4>
    12a8:	aa 27       	eor	r26, r26
    12aa:	97 fd       	sbrc	r25, 7
    12ac:	a0 95       	com	r26
    12ae:	ba 2f       	mov	r27, r26
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    12b8:	f8 01       	movw	r30, r16
    12ba:	64 83       	std	Z+4, r22	; 0x04
    12bc:	75 83       	std	Z+5, r23	; 0x05
    12be:	86 83       	std	Z+6, r24	; 0x06
    12c0:	97 83       	std	Z+7, r25	; 0x07
		particles[i]->direction = (float)(rand()/RAND_MAX)*2*PI;
    12c2:	e0 91 68 02 	lds	r30, 0x0268
    12c6:	f0 91 69 02 	lds	r31, 0x0269
    12ca:	ec 0f       	add	r30, r28
    12cc:	fd 1f       	adc	r31, r29
    12ce:	00 81       	ld	r16, Z
    12d0:	11 81       	ldd	r17, Z+1	; 0x01
    12d2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rand>
    12d6:	6f ef       	ldi	r22, 0xFF	; 255
    12d8:	7f e7       	ldi	r23, 0x7F	; 127
    12da:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divmodhi4>
    12de:	88 27       	eor	r24, r24
    12e0:	77 fd       	sbrc	r23, 7
    12e2:	80 95       	com	r24
    12e4:	98 2f       	mov	r25, r24
    12e6:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
    12f2:	2b ed       	ldi	r18, 0xDB	; 219
    12f4:	3f e0       	ldi	r19, 0x0F	; 15
    12f6:	49 e4       	ldi	r20, 0x49	; 73
    12f8:	50 e4       	ldi	r21, 0x40	; 64
    12fa:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    12fe:	f8 01       	movw	r30, r16
    1300:	60 8b       	std	Z+16, r22	; 0x10
    1302:	71 8b       	std	Z+17, r23	; 0x11
    1304:	82 8b       	std	Z+18, r24	; 0x12
    1306:	93 8b       	std	Z+19, r25	; 0x13
		particles[i]->weight = 1/(float)NUM_PARTICLE;
    1308:	e0 91 68 02 	lds	r30, 0x0268
    130c:	f0 91 69 02 	lds	r31, 0x0269
    1310:	ec 0f       	add	r30, r28
    1312:	fd 1f       	adc	r31, r29
    1314:	01 90       	ld	r0, Z+
    1316:	f0 81       	ld	r31, Z
    1318:	e0 2d       	mov	r30, r0
    131a:	c4 8a       	std	Z+20, r12	; 0x14
    131c:	d5 8a       	std	Z+21, r13	; 0x15
    131e:	e6 8a       	std	Z+22, r14	; 0x16
    1320:	f7 8a       	std	Z+23, r15	; 0x17
    1322:	22 96       	adiw	r28, 0x02	; 2

int create_particles(){
	int i;
	particles = (particle**)malloc(NUM_PARTICLE*sizeof(particle*));
	//particles = malloc(NUM_PARTICLE * sizeof(particle));
	for(i=0; i<NUM_PARTICLE; i++){
    1324:	c8 3c       	cpi	r28, 0xC8	; 200
    1326:	d1 05       	cpc	r29, r1
    1328:	09 f0       	breq	.+2      	; 0x132c <create_particles+0x128>
    132a:	88 cf       	rjmp	.-240    	; 0x123c <create_particles+0x38>
		particles[i]->y = rand()%10;
		particles[i]->direction = (float)(rand()/RAND_MAX)*2*PI;
		particles[i]->weight = 1/(float)NUM_PARTICLE;
		//printf("create_particles: particles[%d]->x,y=%f, %f\n", i, particles[i]->x, particles[i]->y);
	}
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	08 95       	ret

0000133e <calculate_gaussian_probability>:


float calculate_gaussian_probability(float mean, float sigma, float x){
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	59 01       	movw	r10, r18
    1350:	6a 01       	movw	r12, r20
    1352:	a8 01       	movw	r20, r16
    1354:	97 01       	movw	r18, r14
	float value = exp(- (pow((mean - x), 2) / (pow(sigma, 2)) / 2.0)) / sqrt(2.0 * PI * (pow(sigma, 2)));
    1356:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    1362:	7b 01       	movw	r14, r22
    1364:	8c 01       	movw	r16, r24
    1366:	c6 01       	movw	r24, r12
    1368:	b5 01       	movw	r22, r10
    136a:	a6 01       	movw	r20, r12
    136c:	95 01       	movw	r18, r10
    136e:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    1372:	5b 01       	movw	r10, r22
    1374:	6c 01       	movw	r12, r24
    1376:	c8 01       	movw	r24, r16
    1378:	b7 01       	movw	r22, r14
    137a:	a6 01       	movw	r20, r12
    137c:	95 01       	movw	r18, r10
    137e:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	5f eb       	ldi	r21, 0xBF	; 191
    138a:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    138e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <exp>
    1392:	7b 01       	movw	r14, r22
    1394:	8c 01       	movw	r16, r24
    1396:	c6 01       	movw	r24, r12
    1398:	b5 01       	movw	r22, r10
    139a:	2b ed       	ldi	r18, 0xDB	; 219
    139c:	3f e0       	ldi	r19, 0x0F	; 15
    139e:	49 ec       	ldi	r20, 0xC9	; 201
    13a0:	50 e4       	ldi	r21, 0x40	; 64
    13a2:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    13a6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <sqrt>
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	c8 01       	movw	r24, r16
    13b0:	b7 01       	movw	r22, r14
    13b2:	0e 94 6f 11 	call	0x22de	; 0x22de <__divsf3>
	//value = exp(value);
	//printf("value is %f\n", value);
	return value;

}
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	bf 90       	pop	r11
    13c4:	af 90       	pop	r10
    13c6:	08 95       	ret

000013c8 <calculate_weight>:
	return;
	
}


float calculate_weight(particle* p, float* measurement_ref){
    13c8:	6f 92       	push	r6
    13ca:	7f 92       	push	r7
    13cc:	8f 92       	push	r8
    13ce:	9f 92       	push	r9
    13d0:	af 92       	push	r10
    13d2:	bf 92       	push	r11
    13d4:	cf 92       	push	r12
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	3c 01       	movw	r6, r24
    13e6:	c1 e1       	ldi	r28, 0x11	; 17
    13e8:	d2 e0       	ldi	r29, 0x02	; 2
    13ea:	4b 01       	movw	r8, r22
    13ec:	0f 2e       	mov	r0, r31
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	af 2e       	mov	r10, r31
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	bf 2e       	mov	r11, r31
    13f6:	f0 e8       	ldi	r31, 0x80	; 128
    13f8:	cf 2e       	mov	r12, r31
    13fa:	ff e3       	ldi	r31, 0x3F	; 63
    13fc:	df 2e       	mov	r13, r31
    13fe:	f0 2d       	mov	r31, r0
	int i;
	float weight = 1;
	//printf("calculate_weight entered\n");
	for(i=0; i<REFERENCE_POINTS; i++){
		float dist_from_ref = sqrt(pow((p->x - reference_points[i][0]), 2) + pow((p->y - reference_points[i][1]), 2));
    1400:	f3 01       	movw	r30, r6
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	28 81       	ld	r18, Y
    140c:	39 81       	ldd	r19, Y+1	; 0x01
    140e:	4a 81       	ldd	r20, Y+2	; 0x02
    1410:	5b 81       	ldd	r21, Y+3	; 0x03
    1412:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
    1416:	9b 01       	movw	r18, r22
    1418:	ac 01       	movw	r20, r24
    141a:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    141e:	7b 01       	movw	r14, r22
    1420:	8c 01       	movw	r16, r24
    1422:	f3 01       	movw	r30, r6
    1424:	64 81       	ldd	r22, Z+4	; 0x04
    1426:	75 81       	ldd	r23, Z+5	; 0x05
    1428:	86 81       	ldd	r24, Z+6	; 0x06
    142a:	97 81       	ldd	r25, Z+7	; 0x07
    142c:	2c 81       	ldd	r18, Y+4	; 0x04
    142e:	3d 81       	ldd	r19, Y+5	; 0x05
    1430:	4e 81       	ldd	r20, Y+6	; 0x06
    1432:	5f 81       	ldd	r21, Y+7	; 0x07
    1434:	0e 94 06 11 	call	0x220c	; 0x220c <__subsf3>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	c8 01       	movw	r24, r16
    1446:	b7 01       	movw	r22, r14
    1448:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3>
    144c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <sqrt>
		//printf("calculate_weight calculated dist\n");
		//printf("dist_from_ref=%f\n", dist_from_ref);
		//printf("measurement_ref=%f\n", measurement_ref[i]);
		weight = weight * calculate_gaussian_probability(dist_from_ref, 0.5, measurement_ref[i]);
    1450:	f4 01       	movw	r30, r8
    1452:	e1 90       	ld	r14, Z+
    1454:	f1 90       	ld	r15, Z+
    1456:	01 91       	ld	r16, Z+
    1458:	11 91       	ld	r17, Z+
    145a:	4f 01       	movw	r8, r30
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 9f 09 	call	0x133e	; 0x133e <calculate_gaussian_probability>
    1468:	9b 01       	movw	r18, r22
    146a:	ac 01       	movw	r20, r24
    146c:	c6 01       	movw	r24, r12
    146e:	b5 01       	movw	r22, r10
    1470:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsf3>
    1474:	5b 01       	movw	r10, r22
    1476:	6c 01       	movw	r12, r24
    1478:	28 96       	adiw	r28, 0x08	; 8

float calculate_weight(particle* p, float* measurement_ref){
	int i;
	float weight = 1;
	//printf("calculate_weight entered\n");
	for(i=0; i<REFERENCE_POINTS; i++){
    147a:	f2 e0       	ldi	r31, 0x02	; 2
    147c:	c9 32       	cpi	r28, 0x29	; 41
    147e:	df 07       	cpc	r29, r31
    1480:	09 f0       	breq	.+2      	; 0x1484 <calculate_weight+0xbc>
    1482:	be cf       	rjmp	.-132    	; 0x1400 <calculate_weight+0x38>
		weight = weight * calculate_gaussian_probability(dist_from_ref, 0.5, measurement_ref[i]);
		//printf("calculate_weight=%f\n", weight);
	}
	//printf("calculate_weight going out\n");
	return weight;
}
    1484:	c6 01       	movw	r24, r12
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	bf 90       	pop	r11
    1498:	af 90       	pop	r10
    149a:	9f 90       	pop	r9
    149c:	8f 90       	pop	r8
    149e:	7f 90       	pop	r7
    14a0:	6f 90       	pop	r6
    14a2:	08 95       	ret

000014a4 <vfprintf>:
    14a4:	a1 e1       	ldi	r26, 0x11	; 17
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e8 e5       	ldi	r30, 0x58	; 88
    14aa:	fa e0       	ldi	r31, 0x0A	; 10
    14ac:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__prologue_saves__>
    14b0:	3c 01       	movw	r6, r24
    14b2:	7f 87       	std	Y+15, r23	; 0x0f
    14b4:	6e 87       	std	Y+14, r22	; 0x0e
    14b6:	6a 01       	movw	r12, r20
    14b8:	fc 01       	movw	r30, r24
    14ba:	17 82       	std	Z+7, r1	; 0x07
    14bc:	16 82       	std	Z+6, r1	; 0x06
    14be:	83 81       	ldd	r24, Z+3	; 0x03
    14c0:	81 fd       	sbrc	r24, 1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <vfprintf+0x26>
    14c4:	6f ef       	ldi	r22, 0xFF	; 255
    14c6:	7f ef       	ldi	r23, 0xFF	; 255
    14c8:	71 c3       	rjmp	.+1762   	; 0x1bac <vfprintf+0x708>
    14ca:	9e 01       	movw	r18, r28
    14cc:	2f 5f       	subi	r18, 0xFF	; 255
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	39 8b       	std	Y+17, r19	; 0x11
    14d2:	28 8b       	std	Y+16, r18	; 0x10
    14d4:	f3 01       	movw	r30, r6
    14d6:	23 81       	ldd	r18, Z+3	; 0x03
    14d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    14da:	ff 85       	ldd	r31, Y+15	; 0x0f
    14dc:	23 fd       	sbrc	r18, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	23 ff       	sbrs	r18, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	ff 87       	std	Y+15, r31	; 0x0f
    14e6:	ee 87       	std	Y+14, r30	; 0x0e
    14e8:	88 23       	and	r24, r24
    14ea:	09 f4       	brne	.+2      	; 0x14ee <vfprintf+0x4a>
    14ec:	5c c3       	rjmp	.+1720   	; 0x1ba6 <vfprintf+0x702>
    14ee:	85 32       	cpi	r24, 0x25	; 37
    14f0:	51 f4       	brne	.+20     	; 0x1506 <vfprintf+0x62>
    14f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    14f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    14f6:	23 fd       	sbrc	r18, 3
    14f8:	85 91       	lpm	r24, Z+
    14fa:	23 ff       	sbrs	r18, 3
    14fc:	81 91       	ld	r24, Z+
    14fe:	ff 87       	std	Y+15, r31	; 0x0f
    1500:	ee 87       	std	Y+14, r30	; 0x0e
    1502:	85 32       	cpi	r24, 0x25	; 37
    1504:	29 f4       	brne	.+10     	; 0x1510 <vfprintf+0x6c>
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	b3 01       	movw	r22, r6
    150a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    150e:	e2 cf       	rjmp	.-60     	; 0x14d4 <vfprintf+0x30>
    1510:	98 2f       	mov	r25, r24
    1512:	10 e0       	ldi	r17, 0x00	; 0
    1514:	88 24       	eor	r8, r8
    1516:	99 24       	eor	r9, r9
    1518:	10 32       	cpi	r17, 0x20	; 32
    151a:	b0 f4       	brcc	.+44     	; 0x1548 <vfprintf+0xa4>
    151c:	9b 32       	cpi	r25, 0x2B	; 43
    151e:	69 f0       	breq	.+26     	; 0x153a <vfprintf+0x96>
    1520:	9c 32       	cpi	r25, 0x2C	; 44
    1522:	28 f4       	brcc	.+10     	; 0x152e <vfprintf+0x8a>
    1524:	90 32       	cpi	r25, 0x20	; 32
    1526:	51 f0       	breq	.+20     	; 0x153c <vfprintf+0x98>
    1528:	93 32       	cpi	r25, 0x23	; 35
    152a:	71 f4       	brne	.+28     	; 0x1548 <vfprintf+0xa4>
    152c:	0b c0       	rjmp	.+22     	; 0x1544 <vfprintf+0xa0>
    152e:	9d 32       	cpi	r25, 0x2D	; 45
    1530:	39 f0       	breq	.+14     	; 0x1540 <vfprintf+0x9c>
    1532:	90 33       	cpi	r25, 0x30	; 48
    1534:	49 f4       	brne	.+18     	; 0x1548 <vfprintf+0xa4>
    1536:	11 60       	ori	r17, 0x01	; 1
    1538:	28 c0       	rjmp	.+80     	; 0x158a <vfprintf+0xe6>
    153a:	12 60       	ori	r17, 0x02	; 2
    153c:	14 60       	ori	r17, 0x04	; 4
    153e:	25 c0       	rjmp	.+74     	; 0x158a <vfprintf+0xe6>
    1540:	18 60       	ori	r17, 0x08	; 8
    1542:	23 c0       	rjmp	.+70     	; 0x158a <vfprintf+0xe6>
    1544:	10 61       	ori	r17, 0x10	; 16
    1546:	21 c0       	rjmp	.+66     	; 0x158a <vfprintf+0xe6>
    1548:	17 fd       	sbrc	r17, 7
    154a:	2a c0       	rjmp	.+84     	; 0x15a0 <vfprintf+0xfc>
    154c:	89 2f       	mov	r24, r25
    154e:	80 53       	subi	r24, 0x30	; 48
    1550:	8a 30       	cpi	r24, 0x0A	; 10
    1552:	78 f4       	brcc	.+30     	; 0x1572 <vfprintf+0xce>
    1554:	16 ff       	sbrs	r17, 6
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0xc0>
    1558:	fa e0       	ldi	r31, 0x0A	; 10
    155a:	9f 9e       	mul	r9, r31
    155c:	90 2c       	mov	r9, r0
    155e:	11 24       	eor	r1, r1
    1560:	98 0e       	add	r9, r24
    1562:	13 c0       	rjmp	.+38     	; 0x158a <vfprintf+0xe6>
    1564:	3a e0       	ldi	r19, 0x0A	; 10
    1566:	83 9e       	mul	r8, r19
    1568:	80 2c       	mov	r8, r0
    156a:	11 24       	eor	r1, r1
    156c:	88 0e       	add	r8, r24
    156e:	10 62       	ori	r17, 0x20	; 32
    1570:	0c c0       	rjmp	.+24     	; 0x158a <vfprintf+0xe6>
    1572:	9e 32       	cpi	r25, 0x2E	; 46
    1574:	21 f4       	brne	.+8      	; 0x157e <vfprintf+0xda>
    1576:	16 fd       	sbrc	r17, 6
    1578:	16 c3       	rjmp	.+1580   	; 0x1ba6 <vfprintf+0x702>
    157a:	10 64       	ori	r17, 0x40	; 64
    157c:	06 c0       	rjmp	.+12     	; 0x158a <vfprintf+0xe6>
    157e:	9c 36       	cpi	r25, 0x6C	; 108
    1580:	11 f4       	brne	.+4      	; 0x1586 <vfprintf+0xe2>
    1582:	10 68       	ori	r17, 0x80	; 128
    1584:	02 c0       	rjmp	.+4      	; 0x158a <vfprintf+0xe6>
    1586:	98 36       	cpi	r25, 0x68	; 104
    1588:	59 f4       	brne	.+22     	; 0x15a0 <vfprintf+0xfc>
    158a:	ee 85       	ldd	r30, Y+14	; 0x0e
    158c:	ff 85       	ldd	r31, Y+15	; 0x0f
    158e:	23 fd       	sbrc	r18, 3
    1590:	95 91       	lpm	r25, Z+
    1592:	23 ff       	sbrs	r18, 3
    1594:	91 91       	ld	r25, Z+
    1596:	ff 87       	std	Y+15, r31	; 0x0f
    1598:	ee 87       	std	Y+14, r30	; 0x0e
    159a:	99 23       	and	r25, r25
    159c:	09 f0       	breq	.+2      	; 0x15a0 <vfprintf+0xfc>
    159e:	bc cf       	rjmp	.-136    	; 0x1518 <vfprintf+0x74>
    15a0:	89 2f       	mov	r24, r25
    15a2:	85 54       	subi	r24, 0x45	; 69
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	20 f4       	brcc	.+8      	; 0x15b0 <vfprintf+0x10c>
    15a8:	81 2f       	mov	r24, r17
    15aa:	80 61       	ori	r24, 0x10	; 16
    15ac:	90 5e       	subi	r25, 0xE0	; 224
    15ae:	07 c0       	rjmp	.+14     	; 0x15be <vfprintf+0x11a>
    15b0:	89 2f       	mov	r24, r25
    15b2:	85 56       	subi	r24, 0x65	; 101
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <vfprintf+0x116>
    15b8:	a1 c1       	rjmp	.+834    	; 0x18fc <vfprintf+0x458>
    15ba:	81 2f       	mov	r24, r17
    15bc:	8f 7e       	andi	r24, 0xEF	; 239
    15be:	86 fd       	sbrc	r24, 6
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <vfprintf+0x122>
    15c2:	76 e0       	ldi	r23, 0x06	; 6
    15c4:	97 2e       	mov	r9, r23
    15c6:	6f e3       	ldi	r22, 0x3F	; 63
    15c8:	f6 2e       	mov	r15, r22
    15ca:	f8 22       	and	r15, r24
    15cc:	95 36       	cpi	r25, 0x65	; 101
    15ce:	19 f4       	brne	.+6      	; 0x15d6 <vfprintf+0x132>
    15d0:	f0 e4       	ldi	r31, 0x40	; 64
    15d2:	ff 2a       	or	r15, r31
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <vfprintf+0x140>
    15d6:	96 36       	cpi	r25, 0x66	; 102
    15d8:	19 f4       	brne	.+6      	; 0x15e0 <vfprintf+0x13c>
    15da:	20 e8       	ldi	r18, 0x80	; 128
    15dc:	f2 2a       	or	r15, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0x140>
    15e0:	91 10       	cpse	r9, r1
    15e2:	9a 94       	dec	r9
    15e4:	f7 fe       	sbrs	r15, 7
    15e6:	0b c0       	rjmp	.+22     	; 0x15fe <vfprintf+0x15a>
    15e8:	3b e3       	ldi	r19, 0x3B	; 59
    15ea:	39 15       	cp	r19, r9
    15ec:	20 f4       	brcc	.+8      	; 0x15f6 <vfprintf+0x152>
    15ee:	27 e0       	ldi	r18, 0x07	; 7
    15f0:	5c e3       	ldi	r21, 0x3C	; 60
    15f2:	b5 2e       	mov	r11, r21
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <vfprintf+0x16e>
    15f6:	b9 2c       	mov	r11, r9
    15f8:	b3 94       	inc	r11
    15fa:	27 e0       	ldi	r18, 0x07	; 7
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <vfprintf+0x16e>
    15fe:	47 e0       	ldi	r20, 0x07	; 7
    1600:	49 15       	cp	r20, r9
    1602:	28 f4       	brcc	.+10     	; 0x160e <vfprintf+0x16a>
    1604:	27 e0       	ldi	r18, 0x07	; 7
    1606:	bb 24       	eor	r11, r11
    1608:	47 e0       	ldi	r20, 0x07	; 7
    160a:	94 2e       	mov	r9, r20
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <vfprintf+0x16e>
    160e:	29 2d       	mov	r18, r9
    1610:	bb 24       	eor	r11, r11
    1612:	c6 01       	movw	r24, r12
    1614:	04 96       	adiw	r24, 0x04	; 4
    1616:	9d 87       	std	Y+13, r25	; 0x0d
    1618:	8c 87       	std	Y+12, r24	; 0x0c
    161a:	f6 01       	movw	r30, r12
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	ae 01       	movw	r20, r28
    1626:	4f 5f       	subi	r20, 0xFF	; 255
    1628:	5f 4f       	sbci	r21, 0xFF	; 255
    162a:	0b 2d       	mov	r16, r11
    162c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__ftoa_engine>
    1630:	6c 01       	movw	r12, r24
    1632:	09 81       	ldd	r16, Y+1	; 0x01
    1634:	20 2e       	mov	r2, r16
    1636:	33 24       	eor	r3, r3
    1638:	00 ff       	sbrs	r16, 0
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <vfprintf+0x1a0>
    163c:	03 fd       	sbrc	r16, 3
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <vfprintf+0x1a0>
    1640:	1d e2       	ldi	r17, 0x2D	; 45
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <vfprintf+0x1b2>
    1644:	f1 fe       	sbrs	r15, 1
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0x1a8>
    1648:	1b e2       	ldi	r17, 0x2B	; 43
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <vfprintf+0x1b2>
    164c:	f2 fc       	sbrc	r15, 2
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0x1b0>
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <vfprintf+0x1b2>
    1654:	10 e2       	ldi	r17, 0x20	; 32
    1656:	c1 01       	movw	r24, r2
    1658:	8c 70       	andi	r24, 0x0C	; 12
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	89 2b       	or	r24, r25
    165e:	b9 f1       	breq	.+110    	; 0x16ce <vfprintf+0x22a>
    1660:	11 23       	and	r17, r17
    1662:	11 f4       	brne	.+4      	; 0x1668 <vfprintf+0x1c4>
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	01 c0       	rjmp	.+2      	; 0x166a <vfprintf+0x1c6>
    1668:	84 e0       	ldi	r24, 0x04	; 4
    166a:	88 15       	cp	r24, r8
    166c:	10 f0       	brcs	.+4      	; 0x1672 <vfprintf+0x1ce>
    166e:	88 24       	eor	r8, r8
    1670:	0a c0       	rjmp	.+20     	; 0x1686 <vfprintf+0x1e2>
    1672:	88 1a       	sub	r8, r24
    1674:	f3 fc       	sbrc	r15, 3
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <vfprintf+0x1e2>
    1678:	80 e2       	ldi	r24, 0x20	; 32
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	b3 01       	movw	r22, r6
    167e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1682:	8a 94       	dec	r8
    1684:	c9 f7       	brne	.-14     	; 0x1678 <vfprintf+0x1d4>
    1686:	11 23       	and	r17, r17
    1688:	29 f0       	breq	.+10     	; 0x1694 <vfprintf+0x1f0>
    168a:	81 2f       	mov	r24, r17
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	b3 01       	movw	r22, r6
    1690:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1694:	23 fe       	sbrs	r2, 3
    1696:	03 c0       	rjmp	.+6      	; 0x169e <vfprintf+0x1fa>
    1698:	06 e6       	ldi	r16, 0x66	; 102
    169a:	11 e0       	ldi	r17, 0x01	; 1
    169c:	0e c0       	rjmp	.+28     	; 0x16ba <vfprintf+0x216>
    169e:	0a e6       	ldi	r16, 0x6A	; 106
    16a0:	11 e0       	ldi	r17, 0x01	; 1
    16a2:	0b c0       	rjmp	.+22     	; 0x16ba <vfprintf+0x216>
    16a4:	e1 14       	cp	r14, r1
    16a6:	f1 04       	cpc	r15, r1
    16a8:	09 f0       	breq	.+2      	; 0x16ac <vfprintf+0x208>
    16aa:	80 52       	subi	r24, 0x20	; 32
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	b3 01       	movw	r22, r6
    16b0:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    16b4:	0f 5f       	subi	r16, 0xFF	; 255
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <vfprintf+0x220>
    16ba:	ef 2c       	mov	r14, r15
    16bc:	ff 24       	eor	r15, r15
    16be:	f0 e1       	ldi	r31, 0x10	; 16
    16c0:	ef 22       	and	r14, r31
    16c2:	ff 24       	eor	r15, r15
    16c4:	f8 01       	movw	r30, r16
    16c6:	84 91       	lpm	r24, Z+
    16c8:	88 23       	and	r24, r24
    16ca:	61 f7       	brne	.-40     	; 0x16a4 <vfprintf+0x200>
    16cc:	14 c1       	rjmp	.+552    	; 0x18f6 <vfprintf+0x452>
    16ce:	f7 fe       	sbrs	r15, 7
    16d0:	12 c0       	rjmp	.+36     	; 0x16f6 <vfprintf+0x252>
    16d2:	bc 0c       	add	r11, r12
    16d4:	24 fe       	sbrs	r2, 4
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <vfprintf+0x23c>
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	81 33       	cpi	r24, 0x31	; 49
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <vfprintf+0x23c>
    16de:	ba 94       	dec	r11
    16e0:	1b 14       	cp	r1, r11
    16e2:	1c f0       	brlt	.+6      	; 0x16ea <vfprintf+0x246>
    16e4:	bb 24       	eor	r11, r11
    16e6:	b3 94       	inc	r11
    16e8:	2d c0       	rjmp	.+90     	; 0x1744 <vfprintf+0x2a0>
    16ea:	f8 e0       	ldi	r31, 0x08	; 8
    16ec:	fb 15       	cp	r31, r11
    16ee:	50 f5       	brcc	.+84     	; 0x1744 <vfprintf+0x2a0>
    16f0:	38 e0       	ldi	r19, 0x08	; 8
    16f2:	b3 2e       	mov	r11, r19
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <vfprintf+0x2a0>
    16f6:	f6 fc       	sbrc	r15, 6
    16f8:	25 c0       	rjmp	.+74     	; 0x1744 <vfprintf+0x2a0>
    16fa:	89 2d       	mov	r24, r9
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	8c 15       	cp	r24, r12
    1700:	9d 05       	cpc	r25, r13
    1702:	4c f0       	brlt	.+18     	; 0x1716 <vfprintf+0x272>
    1704:	2c ef       	ldi	r18, 0xFC	; 252
    1706:	c2 16       	cp	r12, r18
    1708:	2f ef       	ldi	r18, 0xFF	; 255
    170a:	d2 06       	cpc	r13, r18
    170c:	24 f0       	brlt	.+8      	; 0x1716 <vfprintf+0x272>
    170e:	30 e8       	ldi	r19, 0x80	; 128
    1710:	f3 2a       	or	r15, r19
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <vfprintf+0x272>
    1714:	9a 94       	dec	r9
    1716:	99 20       	and	r9, r9
    1718:	49 f0       	breq	.+18     	; 0x172c <vfprintf+0x288>
    171a:	e2 e0       	ldi	r30, 0x02	; 2
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	ec 0f       	add	r30, r28
    1720:	fd 1f       	adc	r31, r29
    1722:	e9 0d       	add	r30, r9
    1724:	f1 1d       	adc	r31, r1
    1726:	80 81       	ld	r24, Z
    1728:	80 33       	cpi	r24, 0x30	; 48
    172a:	a1 f3       	breq	.-24     	; 0x1714 <vfprintf+0x270>
    172c:	f7 fe       	sbrs	r15, 7
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <vfprintf+0x2a0>
    1730:	b9 2c       	mov	r11, r9
    1732:	b3 94       	inc	r11
    1734:	89 2d       	mov	r24, r9
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	c8 16       	cp	r12, r24
    173a:	d9 06       	cpc	r13, r25
    173c:	14 f0       	brlt	.+4      	; 0x1742 <vfprintf+0x29e>
    173e:	99 24       	eor	r9, r9
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <vfprintf+0x2a0>
    1742:	9c 18       	sub	r9, r12
    1744:	f7 fc       	sbrc	r15, 7
    1746:	03 c0       	rjmp	.+6      	; 0x174e <vfprintf+0x2aa>
    1748:	25 e0       	ldi	r18, 0x05	; 5
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <vfprintf+0x2bc>
    174e:	1c 14       	cp	r1, r12
    1750:	1d 04       	cpc	r1, r13
    1752:	1c f0       	brlt	.+6      	; 0x175a <vfprintf+0x2b6>
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <vfprintf+0x2bc>
    175a:	96 01       	movw	r18, r12
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	11 23       	and	r17, r17
    1762:	11 f0       	breq	.+4      	; 0x1768 <vfprintf+0x2c4>
    1764:	2f 5f       	subi	r18, 0xFF	; 255
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	99 20       	and	r9, r9
    176a:	29 f0       	breq	.+10     	; 0x1776 <vfprintf+0x2d2>
    176c:	89 2d       	mov	r24, r9
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	28 0f       	add	r18, r24
    1774:	39 1f       	adc	r19, r25
    1776:	88 2d       	mov	r24, r8
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	28 17       	cp	r18, r24
    177c:	39 07       	cpc	r19, r25
    177e:	14 f0       	brlt	.+4      	; 0x1784 <vfprintf+0x2e0>
    1780:	88 24       	eor	r8, r8
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <vfprintf+0x2e2>
    1784:	82 1a       	sub	r8, r18
    1786:	4f 2c       	mov	r4, r15
    1788:	55 24       	eor	r5, r5
    178a:	c2 01       	movw	r24, r4
    178c:	89 70       	andi	r24, 0x09	; 9
    178e:	90 70       	andi	r25, 0x00	; 0
    1790:	89 2b       	or	r24, r25
    1792:	39 f0       	breq	.+14     	; 0x17a2 <vfprintf+0x2fe>
    1794:	08 c0       	rjmp	.+16     	; 0x17a6 <vfprintf+0x302>
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	b3 01       	movw	r22, r6
    179c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    17a0:	8a 94       	dec	r8
    17a2:	88 20       	and	r8, r8
    17a4:	c1 f7       	brne	.-16     	; 0x1796 <vfprintf+0x2f2>
    17a6:	11 23       	and	r17, r17
    17a8:	29 f0       	breq	.+10     	; 0x17b4 <vfprintf+0x310>
    17aa:	81 2f       	mov	r24, r17
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	b3 01       	movw	r22, r6
    17b0:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    17b4:	43 fe       	sbrs	r4, 3
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <vfprintf+0x322>
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <vfprintf+0x326>
    17ba:	80 e3       	ldi	r24, 0x30	; 48
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	b3 01       	movw	r22, r6
    17c0:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    17c4:	8a 94       	dec	r8
    17c6:	88 20       	and	r8, r8
    17c8:	c1 f7       	brne	.-16     	; 0x17ba <vfprintf+0x316>
    17ca:	f7 fe       	sbrs	r15, 7
    17cc:	46 c0       	rjmp	.+140    	; 0x185a <vfprintf+0x3b6>
    17ce:	86 01       	movw	r16, r12
    17d0:	d7 fe       	sbrs	r13, 7
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <vfprintf+0x334>
    17d4:	00 e0       	ldi	r16, 0x00	; 0
    17d6:	10 e0       	ldi	r17, 0x00	; 0
    17d8:	76 01       	movw	r14, r12
    17da:	08 94       	sec
    17dc:	e1 1c       	adc	r14, r1
    17de:	f1 1c       	adc	r15, r1
    17e0:	e0 1a       	sub	r14, r16
    17e2:	f1 0a       	sbc	r15, r17
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	4c 0f       	add	r20, r28
    17ea:	5d 1f       	adc	r21, r29
    17ec:	e4 0e       	add	r14, r20
    17ee:	f5 1e       	adc	r15, r21
    17f0:	26 01       	movw	r4, r12
    17f2:	4b 18       	sub	r4, r11
    17f4:	51 08       	sbc	r5, r1
    17f6:	89 2d       	mov	r24, r9
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	aa 24       	eor	r10, r10
    17fc:	bb 24       	eor	r11, r11
    17fe:	a8 1a       	sub	r10, r24
    1800:	b9 0a       	sbc	r11, r25
    1802:	5f ef       	ldi	r21, 0xFF	; 255
    1804:	0f 3f       	cpi	r16, 0xFF	; 255
    1806:	15 07       	cpc	r17, r21
    1808:	29 f4       	brne	.+10     	; 0x1814 <vfprintf+0x370>
    180a:	8e e2       	ldi	r24, 0x2E	; 46
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b3 01       	movw	r22, r6
    1810:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1814:	c0 16       	cp	r12, r16
    1816:	d1 06       	cpc	r13, r17
    1818:	34 f0       	brlt	.+12     	; 0x1826 <vfprintf+0x382>
    181a:	40 16       	cp	r4, r16
    181c:	51 06       	cpc	r5, r17
    181e:	1c f4       	brge	.+6      	; 0x1826 <vfprintf+0x382>
    1820:	f7 01       	movw	r30, r14
    1822:	80 81       	ld	r24, Z
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <vfprintf+0x384>
    1826:	80 e3       	ldi	r24, 0x30	; 48
    1828:	01 50       	subi	r16, 0x01	; 1
    182a:	10 40       	sbci	r17, 0x00	; 0
    182c:	08 94       	sec
    182e:	e1 1c       	adc	r14, r1
    1830:	f1 1c       	adc	r15, r1
    1832:	0a 15       	cp	r16, r10
    1834:	1b 05       	cpc	r17, r11
    1836:	2c f0       	brlt	.+10     	; 0x1842 <vfprintf+0x39e>
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	b3 01       	movw	r22, r6
    183c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1840:	e0 cf       	rjmp	.-64     	; 0x1802 <vfprintf+0x35e>
    1842:	0c 15       	cp	r16, r12
    1844:	1d 05       	cpc	r17, r13
    1846:	39 f4       	brne	.+14     	; 0x1856 <vfprintf+0x3b2>
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	96 33       	cpi	r25, 0x36	; 54
    184c:	18 f4       	brcc	.+6      	; 0x1854 <vfprintf+0x3b0>
    184e:	95 33       	cpi	r25, 0x35	; 53
    1850:	11 f4       	brne	.+4      	; 0x1856 <vfprintf+0x3b2>
    1852:	24 fe       	sbrs	r2, 4
    1854:	81 e3       	ldi	r24, 0x31	; 49
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	4b c0       	rjmp	.+150    	; 0x18f0 <vfprintf+0x44c>
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	81 33       	cpi	r24, 0x31	; 49
    185e:	09 f0       	breq	.+2      	; 0x1862 <vfprintf+0x3be>
    1860:	0f 7e       	andi	r16, 0xEF	; 239
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	b3 01       	movw	r22, r6
    1866:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    186a:	99 20       	and	r9, r9
    186c:	a1 f0       	breq	.+40     	; 0x1896 <vfprintf+0x3f2>
    186e:	8e e2       	ldi	r24, 0x2E	; 46
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	b3 01       	movw	r22, r6
    1874:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1878:	12 e0       	ldi	r17, 0x02	; 2
    187a:	e1 e0       	ldi	r30, 0x01	; 1
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	ec 0f       	add	r30, r28
    1880:	fd 1f       	adc	r31, r29
    1882:	e1 0f       	add	r30, r17
    1884:	f1 1d       	adc	r31, r1
    1886:	1f 5f       	subi	r17, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	b3 01       	movw	r22, r6
    188e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1892:	9a 94       	dec	r9
    1894:	91 f7       	brne	.-28     	; 0x187a <vfprintf+0x3d6>
    1896:	44 fc       	sbrc	r4, 4
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <vfprintf+0x3fc>
    189a:	85 e6       	ldi	r24, 0x65	; 101
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <vfprintf+0x400>
    18a0:	85 e4       	ldi	r24, 0x45	; 69
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	b3 01       	movw	r22, r6
    18a6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    18aa:	d7 fc       	sbrc	r13, 7
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <vfprintf+0x414>
    18ae:	c1 14       	cp	r12, r1
    18b0:	d1 04       	cpc	r13, r1
    18b2:	41 f4       	brne	.+16     	; 0x18c4 <vfprintf+0x420>
    18b4:	04 ff       	sbrs	r16, 4
    18b6:	06 c0       	rjmp	.+12     	; 0x18c4 <vfprintf+0x420>
    18b8:	d0 94       	com	r13
    18ba:	c1 94       	neg	r12
    18bc:	d1 08       	sbc	r13, r1
    18be:	d3 94       	inc	r13
    18c0:	8d e2       	ldi	r24, 0x2D	; 45
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <vfprintf+0x422>
    18c4:	8b e2       	ldi	r24, 0x2B	; 43
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	b3 01       	movw	r22, r6
    18ca:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    18ce:	80 e3       	ldi	r24, 0x30	; 48
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <vfprintf+0x438>
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	26 ef       	ldi	r18, 0xF6	; 246
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	c2 0e       	add	r12, r18
    18da:	d3 1e       	adc	r13, r19
    18dc:	3a e0       	ldi	r19, 0x0A	; 10
    18de:	c3 16       	cp	r12, r19
    18e0:	d1 04       	cpc	r13, r1
    18e2:	bc f7       	brge	.-18     	; 0x18d2 <vfprintf+0x42e>
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b3 01       	movw	r22, r6
    18e8:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    18ec:	c6 01       	movw	r24, r12
    18ee:	c0 96       	adiw	r24, 0x30	; 48
    18f0:	b3 01       	movw	r22, r6
    18f2:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    18f6:	cc 84       	ldd	r12, Y+12	; 0x0c
    18f8:	dd 84       	ldd	r13, Y+13	; 0x0d
    18fa:	52 c1       	rjmp	.+676    	; 0x1ba0 <vfprintf+0x6fc>
    18fc:	93 36       	cpi	r25, 0x63	; 99
    18fe:	31 f0       	breq	.+12     	; 0x190c <vfprintf+0x468>
    1900:	93 37       	cpi	r25, 0x73	; 115
    1902:	99 f0       	breq	.+38     	; 0x192a <vfprintf+0x486>
    1904:	93 35       	cpi	r25, 0x53	; 83
    1906:	09 f0       	breq	.+2      	; 0x190a <vfprintf+0x466>
    1908:	59 c0       	rjmp	.+178    	; 0x19bc <vfprintf+0x518>
    190a:	23 c0       	rjmp	.+70     	; 0x1952 <vfprintf+0x4ae>
    190c:	f6 01       	movw	r30, r12
    190e:	80 81       	ld	r24, Z
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	5e 01       	movw	r10, r28
    1914:	08 94       	sec
    1916:	a1 1c       	adc	r10, r1
    1918:	b1 1c       	adc	r11, r1
    191a:	22 e0       	ldi	r18, 0x02	; 2
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	c2 0e       	add	r12, r18
    1920:	d3 1e       	adc	r13, r19
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	e2 2e       	mov	r14, r18
    1926:	f1 2c       	mov	r15, r1
    1928:	12 c0       	rjmp	.+36     	; 0x194e <vfprintf+0x4aa>
    192a:	f6 01       	movw	r30, r12
    192c:	a0 80       	ld	r10, Z
    192e:	b1 80       	ldd	r11, Z+1	; 0x01
    1930:	16 fd       	sbrc	r17, 6
    1932:	03 c0       	rjmp	.+6      	; 0x193a <vfprintf+0x496>
    1934:	6f ef       	ldi	r22, 0xFF	; 255
    1936:	7f ef       	ldi	r23, 0xFF	; 255
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfprintf+0x49a>
    193a:	69 2d       	mov	r22, r9
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	22 e0       	ldi	r18, 0x02	; 2
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	c2 0e       	add	r12, r18
    1944:	d3 1e       	adc	r13, r19
    1946:	c5 01       	movw	r24, r10
    1948:	0e 94 45 10 	call	0x208a	; 0x208a <strnlen>
    194c:	7c 01       	movw	r14, r24
    194e:	1f 77       	andi	r17, 0x7F	; 127
    1950:	13 c0       	rjmp	.+38     	; 0x1978 <vfprintf+0x4d4>
    1952:	f6 01       	movw	r30, r12
    1954:	a0 80       	ld	r10, Z
    1956:	b1 80       	ldd	r11, Z+1	; 0x01
    1958:	16 fd       	sbrc	r17, 6
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x4be>
    195c:	6f ef       	ldi	r22, 0xFF	; 255
    195e:	7f ef       	ldi	r23, 0xFF	; 255
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x4c2>
    1962:	69 2d       	mov	r22, r9
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	22 e0       	ldi	r18, 0x02	; 2
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	c2 0e       	add	r12, r18
    196c:	d3 1e       	adc	r13, r19
    196e:	c5 01       	movw	r24, r10
    1970:	0e 94 3a 10 	call	0x2074	; 0x2074 <strnlen_P>
    1974:	7c 01       	movw	r14, r24
    1976:	10 68       	ori	r17, 0x80	; 128
    1978:	13 ff       	sbrs	r17, 3
    197a:	07 c0       	rjmp	.+14     	; 0x198a <vfprintf+0x4e6>
    197c:	1b c0       	rjmp	.+54     	; 0x19b4 <vfprintf+0x510>
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	b3 01       	movw	r22, r6
    1984:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1988:	8a 94       	dec	r8
    198a:	88 2d       	mov	r24, r8
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	e8 16       	cp	r14, r24
    1990:	f9 06       	cpc	r15, r25
    1992:	a8 f3       	brcs	.-22     	; 0x197e <vfprintf+0x4da>
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <vfprintf+0x510>
    1996:	f5 01       	movw	r30, r10
    1998:	17 fd       	sbrc	r17, 7
    199a:	85 91       	lpm	r24, Z+
    199c:	17 ff       	sbrs	r17, 7
    199e:	81 91       	ld	r24, Z+
    19a0:	5f 01       	movw	r10, r30
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	b3 01       	movw	r22, r6
    19a6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    19aa:	81 10       	cpse	r8, r1
    19ac:	8a 94       	dec	r8
    19ae:	08 94       	sec
    19b0:	e1 08       	sbc	r14, r1
    19b2:	f1 08       	sbc	r15, r1
    19b4:	e1 14       	cp	r14, r1
    19b6:	f1 04       	cpc	r15, r1
    19b8:	71 f7       	brne	.-36     	; 0x1996 <vfprintf+0x4f2>
    19ba:	f2 c0       	rjmp	.+484    	; 0x1ba0 <vfprintf+0x6fc>
    19bc:	94 36       	cpi	r25, 0x64	; 100
    19be:	11 f0       	breq	.+4      	; 0x19c4 <vfprintf+0x520>
    19c0:	99 36       	cpi	r25, 0x69	; 105
    19c2:	89 f5       	brne	.+98     	; 0x1a26 <vfprintf+0x582>
    19c4:	17 ff       	sbrs	r17, 7
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <vfprintf+0x534>
    19c8:	f6 01       	movw	r30, r12
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	42 81       	ldd	r20, Z+2	; 0x02
    19d0:	53 81       	ldd	r21, Z+3	; 0x03
    19d2:	84 e0       	ldi	r24, 0x04	; 4
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <vfprintf+0x548>
    19d8:	f6 01       	movw	r30, r12
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	9c 01       	movw	r18, r24
    19e0:	44 27       	eor	r20, r20
    19e2:	37 fd       	sbrc	r19, 7
    19e4:	40 95       	com	r20
    19e6:	54 2f       	mov	r21, r20
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	c8 0e       	add	r12, r24
    19ee:	d9 1e       	adc	r13, r25
    19f0:	9f e6       	ldi	r25, 0x6F	; 111
    19f2:	f9 2e       	mov	r15, r25
    19f4:	f1 22       	and	r15, r17
    19f6:	57 ff       	sbrs	r21, 7
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <vfprintf+0x568>
    19fa:	50 95       	com	r21
    19fc:	40 95       	com	r20
    19fe:	30 95       	com	r19
    1a00:	21 95       	neg	r18
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	4f 4f       	sbci	r20, 0xFF	; 255
    1a06:	5f 4f       	sbci	r21, 0xFF	; 255
    1a08:	90 e8       	ldi	r25, 0x80	; 128
    1a0a:	f9 2a       	or	r15, r25
    1a0c:	ca 01       	movw	r24, r20
    1a0e:	b9 01       	movw	r22, r18
    1a10:	ae 01       	movw	r20, r28
    1a12:	4f 5f       	subi	r20, 0xFF	; 255
    1a14:	5f 4f       	sbci	r21, 0xFF	; 255
    1a16:	2a e0       	ldi	r18, 0x0A	; 10
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	0e 94 a8 10 	call	0x2150	; 0x2150 <__ultoa_invert>
    1a1e:	e8 2e       	mov	r14, r24
    1a20:	e8 89       	ldd	r30, Y+16	; 0x10
    1a22:	ee 1a       	sub	r14, r30
    1a24:	41 c0       	rjmp	.+130    	; 0x1aa8 <vfprintf+0x604>
    1a26:	95 37       	cpi	r25, 0x75	; 117
    1a28:	21 f4       	brne	.+8      	; 0x1a32 <vfprintf+0x58e>
    1a2a:	1f 7e       	andi	r17, 0xEF	; 239
    1a2c:	2a e0       	ldi	r18, 0x0A	; 10
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	1c c0       	rjmp	.+56     	; 0x1a6a <vfprintf+0x5c6>
    1a32:	19 7f       	andi	r17, 0xF9	; 249
    1a34:	9f 36       	cpi	r25, 0x6F	; 111
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <vfprintf+0x5ac>
    1a38:	90 37       	cpi	r25, 0x70	; 112
    1a3a:	20 f4       	brcc	.+8      	; 0x1a44 <vfprintf+0x5a0>
    1a3c:	98 35       	cpi	r25, 0x58	; 88
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <vfprintf+0x59e>
    1a40:	b2 c0       	rjmp	.+356    	; 0x1ba6 <vfprintf+0x702>
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <vfprintf+0x5be>
    1a44:	90 37       	cpi	r25, 0x70	; 112
    1a46:	39 f0       	breq	.+14     	; 0x1a56 <vfprintf+0x5b2>
    1a48:	98 37       	cpi	r25, 0x78	; 120
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <vfprintf+0x5aa>
    1a4c:	ac c0       	rjmp	.+344    	; 0x1ba6 <vfprintf+0x702>
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <vfprintf+0x5b4>
    1a50:	28 e0       	ldi	r18, 0x08	; 8
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	0a c0       	rjmp	.+20     	; 0x1a6a <vfprintf+0x5c6>
    1a56:	10 61       	ori	r17, 0x10	; 16
    1a58:	14 fd       	sbrc	r17, 4
    1a5a:	14 60       	ori	r17, 0x04	; 4
    1a5c:	20 e1       	ldi	r18, 0x10	; 16
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <vfprintf+0x5c6>
    1a62:	14 fd       	sbrc	r17, 4
    1a64:	16 60       	ori	r17, 0x06	; 6
    1a66:	20 e1       	ldi	r18, 0x10	; 16
    1a68:	32 e0       	ldi	r19, 0x02	; 2
    1a6a:	17 ff       	sbrs	r17, 7
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <vfprintf+0x5da>
    1a6e:	f6 01       	movw	r30, r12
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	44 e0       	ldi	r20, 0x04	; 4
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	08 c0       	rjmp	.+16     	; 0x1a8e <vfprintf+0x5ea>
    1a7e:	f6 01       	movw	r30, r12
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	bc 01       	movw	r22, r24
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	42 e0       	ldi	r20, 0x02	; 2
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	c4 0e       	add	r12, r20
    1a90:	d5 1e       	adc	r13, r21
    1a92:	ae 01       	movw	r20, r28
    1a94:	4f 5f       	subi	r20, 0xFF	; 255
    1a96:	5f 4f       	sbci	r21, 0xFF	; 255
    1a98:	0e 94 a8 10 	call	0x2150	; 0x2150 <__ultoa_invert>
    1a9c:	e8 2e       	mov	r14, r24
    1a9e:	58 89       	ldd	r21, Y+16	; 0x10
    1aa0:	e5 1a       	sub	r14, r21
    1aa2:	8f e7       	ldi	r24, 0x7F	; 127
    1aa4:	f8 2e       	mov	r15, r24
    1aa6:	f1 22       	and	r15, r17
    1aa8:	f6 fe       	sbrs	r15, 6
    1aaa:	0b c0       	rjmp	.+22     	; 0x1ac2 <vfprintf+0x61e>
    1aac:	8e ef       	ldi	r24, 0xFE	; 254
    1aae:	f8 22       	and	r15, r24
    1ab0:	e9 14       	cp	r14, r9
    1ab2:	38 f4       	brcc	.+14     	; 0x1ac2 <vfprintf+0x61e>
    1ab4:	f4 fe       	sbrs	r15, 4
    1ab6:	07 c0       	rjmp	.+14     	; 0x1ac6 <vfprintf+0x622>
    1ab8:	f2 fc       	sbrc	r15, 2
    1aba:	05 c0       	rjmp	.+10     	; 0x1ac6 <vfprintf+0x622>
    1abc:	9f ee       	ldi	r25, 0xEF	; 239
    1abe:	f9 22       	and	r15, r25
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfprintf+0x622>
    1ac2:	1e 2d       	mov	r17, r14
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <vfprintf+0x624>
    1ac6:	19 2d       	mov	r17, r9
    1ac8:	f4 fe       	sbrs	r15, 4
    1aca:	0d c0       	rjmp	.+26     	; 0x1ae6 <vfprintf+0x642>
    1acc:	fe 01       	movw	r30, r28
    1ace:	ee 0d       	add	r30, r14
    1ad0:	f1 1d       	adc	r31, r1
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 33       	cpi	r24, 0x30	; 48
    1ad6:	19 f4       	brne	.+6      	; 0x1ade <vfprintf+0x63a>
    1ad8:	e9 ee       	ldi	r30, 0xE9	; 233
    1ada:	fe 22       	and	r15, r30
    1adc:	08 c0       	rjmp	.+16     	; 0x1aee <vfprintf+0x64a>
    1ade:	1f 5f       	subi	r17, 0xFF	; 255
    1ae0:	f2 fe       	sbrs	r15, 2
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <vfprintf+0x64a>
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <vfprintf+0x648>
    1ae6:	8f 2d       	mov	r24, r15
    1ae8:	86 78       	andi	r24, 0x86	; 134
    1aea:	09 f0       	breq	.+2      	; 0x1aee <vfprintf+0x64a>
    1aec:	1f 5f       	subi	r17, 0xFF	; 255
    1aee:	0f 2d       	mov	r16, r15
    1af0:	f3 fc       	sbrc	r15, 3
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <vfprintf+0x678>
    1af4:	f0 fe       	sbrs	r15, 0
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <vfprintf+0x672>
    1af8:	18 15       	cp	r17, r8
    1afa:	10 f0       	brcs	.+4      	; 0x1b00 <vfprintf+0x65c>
    1afc:	9e 2c       	mov	r9, r14
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <vfprintf+0x672>
    1b00:	9e 2c       	mov	r9, r14
    1b02:	98 0c       	add	r9, r8
    1b04:	91 1a       	sub	r9, r17
    1b06:	18 2d       	mov	r17, r8
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <vfprintf+0x672>
    1b0a:	80 e2       	ldi	r24, 0x20	; 32
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	b3 01       	movw	r22, r6
    1b10:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1b14:	1f 5f       	subi	r17, 0xFF	; 255
    1b16:	18 15       	cp	r17, r8
    1b18:	c0 f3       	brcs	.-16     	; 0x1b0a <vfprintf+0x666>
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <vfprintf+0x680>
    1b1c:	18 15       	cp	r17, r8
    1b1e:	10 f4       	brcc	.+4      	; 0x1b24 <vfprintf+0x680>
    1b20:	81 1a       	sub	r8, r17
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <vfprintf+0x682>
    1b24:	88 24       	eor	r8, r8
    1b26:	04 ff       	sbrs	r16, 4
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <vfprintf+0x6a4>
    1b2a:	80 e3       	ldi	r24, 0x30	; 48
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	b3 01       	movw	r22, r6
    1b30:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1b34:	02 ff       	sbrs	r16, 2
    1b36:	1d c0       	rjmp	.+58     	; 0x1b72 <vfprintf+0x6ce>
    1b38:	01 fd       	sbrc	r16, 1
    1b3a:	03 c0       	rjmp	.+6      	; 0x1b42 <vfprintf+0x69e>
    1b3c:	88 e7       	ldi	r24, 0x78	; 120
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e c0       	rjmp	.+28     	; 0x1b5e <vfprintf+0x6ba>
    1b42:	88 e5       	ldi	r24, 0x58	; 88
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0b c0       	rjmp	.+22     	; 0x1b5e <vfprintf+0x6ba>
    1b48:	80 2f       	mov	r24, r16
    1b4a:	86 78       	andi	r24, 0x86	; 134
    1b4c:	91 f0       	breq	.+36     	; 0x1b72 <vfprintf+0x6ce>
    1b4e:	01 ff       	sbrs	r16, 1
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <vfprintf+0x6b2>
    1b52:	8b e2       	ldi	r24, 0x2B	; 43
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <vfprintf+0x6b4>
    1b56:	80 e2       	ldi	r24, 0x20	; 32
    1b58:	f7 fc       	sbrc	r15, 7
    1b5a:	8d e2       	ldi	r24, 0x2D	; 45
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	b3 01       	movw	r22, r6
    1b60:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1b64:	06 c0       	rjmp	.+12     	; 0x1b72 <vfprintf+0x6ce>
    1b66:	80 e3       	ldi	r24, 0x30	; 48
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	b3 01       	movw	r22, r6
    1b6c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1b70:	9a 94       	dec	r9
    1b72:	e9 14       	cp	r14, r9
    1b74:	c0 f3       	brcs	.-16     	; 0x1b66 <vfprintf+0x6c2>
    1b76:	ea 94       	dec	r14
    1b78:	e1 e0       	ldi	r30, 0x01	; 1
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	ec 0f       	add	r30, r28
    1b7e:	fd 1f       	adc	r31, r29
    1b80:	ee 0d       	add	r30, r14
    1b82:	f1 1d       	adc	r31, r1
    1b84:	80 81       	ld	r24, Z
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	b3 01       	movw	r22, r6
    1b8a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1b8e:	ee 20       	and	r14, r14
    1b90:	91 f7       	brne	.-28     	; 0x1b76 <vfprintf+0x6d2>
    1b92:	06 c0       	rjmp	.+12     	; 0x1ba0 <vfprintf+0x6fc>
    1b94:	80 e2       	ldi	r24, 0x20	; 32
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	b3 01       	movw	r22, r6
    1b9a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <fputc>
    1b9e:	8a 94       	dec	r8
    1ba0:	88 20       	and	r8, r8
    1ba2:	c1 f7       	brne	.-16     	; 0x1b94 <vfprintf+0x6f0>
    1ba4:	97 cc       	rjmp	.-1746   	; 0x14d4 <vfprintf+0x30>
    1ba6:	f3 01       	movw	r30, r6
    1ba8:	66 81       	ldd	r22, Z+6	; 0x06
    1baa:	77 81       	ldd	r23, Z+7	; 0x07
    1bac:	cb 01       	movw	r24, r22
    1bae:	61 96       	adiw	r28, 0x11	; 17
    1bb0:	e2 e1       	ldi	r30, 0x12	; 18
    1bb2:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__epilogue_restores__>

00001bb6 <malloc>:
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	bc 01       	movw	r22, r24
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	10 f4       	brcc	.+4      	; 0x1bc6 <malloc+0x10>
    1bc2:	62 e0       	ldi	r22, 0x02	; 2
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	a0 91 9a 02 	lds	r26, 0x029A
    1bca:	b0 91 9b 02 	lds	r27, 0x029B
    1bce:	ed 01       	movw	r28, r26
    1bd0:	e0 e0       	ldi	r30, 0x00	; 0
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	21 c0       	rjmp	.+66     	; 0x1c1c <malloc+0x66>
    1bda:	88 81       	ld	r24, Y
    1bdc:	99 81       	ldd	r25, Y+1	; 0x01
    1bde:	86 17       	cp	r24, r22
    1be0:	97 07       	cpc	r25, r23
    1be2:	69 f4       	brne	.+26     	; 0x1bfe <malloc+0x48>
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	30 97       	sbiw	r30, 0x00	; 0
    1bea:	19 f0       	breq	.+6      	; 0x1bf2 <malloc+0x3c>
    1bec:	93 83       	std	Z+3, r25	; 0x03
    1bee:	82 83       	std	Z+2, r24	; 0x02
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <malloc+0x44>
    1bf2:	90 93 9b 02 	sts	0x029B, r25
    1bf6:	80 93 9a 02 	sts	0x029A, r24
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	34 c0       	rjmp	.+104    	; 0x1c66 <malloc+0xb0>
    1bfe:	68 17       	cp	r22, r24
    1c00:	79 07       	cpc	r23, r25
    1c02:	38 f4       	brcc	.+14     	; 0x1c12 <malloc+0x5c>
    1c04:	41 15       	cp	r20, r1
    1c06:	51 05       	cpc	r21, r1
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <malloc+0x5a>
    1c0a:	84 17       	cp	r24, r20
    1c0c:	95 07       	cpc	r25, r21
    1c0e:	08 f4       	brcc	.+2      	; 0x1c12 <malloc+0x5c>
    1c10:	ac 01       	movw	r20, r24
    1c12:	fe 01       	movw	r30, r28
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	9b 81       	ldd	r25, Y+3	; 0x03
    1c18:	9c 01       	movw	r18, r24
    1c1a:	e9 01       	movw	r28, r18
    1c1c:	20 97       	sbiw	r28, 0x00	; 0
    1c1e:	e9 f6       	brne	.-70     	; 0x1bda <malloc+0x24>
    1c20:	41 15       	cp	r20, r1
    1c22:	51 05       	cpc	r21, r1
    1c24:	a9 f1       	breq	.+106    	; 0x1c90 <malloc+0xda>
    1c26:	ca 01       	movw	r24, r20
    1c28:	86 1b       	sub	r24, r22
    1c2a:	97 0b       	sbc	r25, r23
    1c2c:	04 97       	sbiw	r24, 0x04	; 4
    1c2e:	08 f4       	brcc	.+2      	; 0x1c32 <malloc+0x7c>
    1c30:	ba 01       	movw	r22, r20
    1c32:	e0 e0       	ldi	r30, 0x00	; 0
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	2a c0       	rjmp	.+84     	; 0x1c8c <malloc+0xd6>
    1c38:	8d 91       	ld	r24, X+
    1c3a:	9c 91       	ld	r25, X
    1c3c:	11 97       	sbiw	r26, 0x01	; 1
    1c3e:	84 17       	cp	r24, r20
    1c40:	95 07       	cpc	r25, r21
    1c42:	f9 f4       	brne	.+62     	; 0x1c82 <malloc+0xcc>
    1c44:	64 17       	cp	r22, r20
    1c46:	75 07       	cpc	r23, r21
    1c48:	81 f4       	brne	.+32     	; 0x1c6a <malloc+0xb4>
    1c4a:	12 96       	adiw	r26, 0x02	; 2
    1c4c:	8d 91       	ld	r24, X+
    1c4e:	9c 91       	ld	r25, X
    1c50:	13 97       	sbiw	r26, 0x03	; 3
    1c52:	30 97       	sbiw	r30, 0x00	; 0
    1c54:	19 f0       	breq	.+6      	; 0x1c5c <malloc+0xa6>
    1c56:	93 83       	std	Z+3, r25	; 0x03
    1c58:	82 83       	std	Z+2, r24	; 0x02
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <malloc+0xae>
    1c5c:	90 93 9b 02 	sts	0x029B, r25
    1c60:	80 93 9a 02 	sts	0x029A, r24
    1c64:	fd 01       	movw	r30, r26
    1c66:	32 96       	adiw	r30, 0x02	; 2
    1c68:	4f c0       	rjmp	.+158    	; 0x1d08 <malloc+0x152>
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	86 1b       	sub	r24, r22
    1c6e:	97 0b       	sbc	r25, r23
    1c70:	fd 01       	movw	r30, r26
    1c72:	e8 0f       	add	r30, r24
    1c74:	f9 1f       	adc	r31, r25
    1c76:	61 93       	st	Z+, r22
    1c78:	71 93       	st	Z+, r23
    1c7a:	02 97       	sbiw	r24, 0x02	; 2
    1c7c:	8d 93       	st	X+, r24
    1c7e:	9c 93       	st	X, r25
    1c80:	43 c0       	rjmp	.+134    	; 0x1d08 <malloc+0x152>
    1c82:	fd 01       	movw	r30, r26
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	9c 01       	movw	r18, r24
    1c8a:	d9 01       	movw	r26, r18
    1c8c:	10 97       	sbiw	r26, 0x00	; 0
    1c8e:	a1 f6       	brne	.-88     	; 0x1c38 <malloc+0x82>
    1c90:	80 91 98 02 	lds	r24, 0x0298
    1c94:	90 91 99 02 	lds	r25, 0x0299
    1c98:	89 2b       	or	r24, r25
    1c9a:	41 f4       	brne	.+16     	; 0x1cac <malloc+0xf6>
    1c9c:	80 91 2b 02 	lds	r24, 0x022B
    1ca0:	90 91 2c 02 	lds	r25, 0x022C
    1ca4:	90 93 99 02 	sts	0x0299, r25
    1ca8:	80 93 98 02 	sts	0x0298, r24
    1cac:	40 91 2d 02 	lds	r20, 0x022D
    1cb0:	50 91 2e 02 	lds	r21, 0x022E
    1cb4:	41 15       	cp	r20, r1
    1cb6:	51 05       	cpc	r21, r1
    1cb8:	41 f4       	brne	.+16     	; 0x1cca <malloc+0x114>
    1cba:	4d b7       	in	r20, 0x3d	; 61
    1cbc:	5e b7       	in	r21, 0x3e	; 62
    1cbe:	80 91 29 02 	lds	r24, 0x0229
    1cc2:	90 91 2a 02 	lds	r25, 0x022A
    1cc6:	48 1b       	sub	r20, r24
    1cc8:	59 0b       	sbc	r21, r25
    1cca:	20 91 98 02 	lds	r18, 0x0298
    1cce:	30 91 99 02 	lds	r19, 0x0299
    1cd2:	24 17       	cp	r18, r20
    1cd4:	35 07       	cpc	r19, r21
    1cd6:	b0 f4       	brcc	.+44     	; 0x1d04 <malloc+0x14e>
    1cd8:	ca 01       	movw	r24, r20
    1cda:	82 1b       	sub	r24, r18
    1cdc:	93 0b       	sbc	r25, r19
    1cde:	86 17       	cp	r24, r22
    1ce0:	97 07       	cpc	r25, r23
    1ce2:	80 f0       	brcs	.+32     	; 0x1d04 <malloc+0x14e>
    1ce4:	ab 01       	movw	r20, r22
    1ce6:	4e 5f       	subi	r20, 0xFE	; 254
    1ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cea:	84 17       	cp	r24, r20
    1cec:	95 07       	cpc	r25, r21
    1cee:	50 f0       	brcs	.+20     	; 0x1d04 <malloc+0x14e>
    1cf0:	42 0f       	add	r20, r18
    1cf2:	53 1f       	adc	r21, r19
    1cf4:	50 93 99 02 	sts	0x0299, r21
    1cf8:	40 93 98 02 	sts	0x0298, r20
    1cfc:	f9 01       	movw	r30, r18
    1cfe:	61 93       	st	Z+, r22
    1d00:	71 93       	st	Z+, r23
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <malloc+0x152>
    1d04:	e0 e0       	ldi	r30, 0x00	; 0
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	cf 01       	movw	r24, r30
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <free>:
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <free+0xa>
    1d18:	50 c0       	rjmp	.+160    	; 0x1dba <free+0xaa>
    1d1a:	ec 01       	movw	r28, r24
    1d1c:	22 97       	sbiw	r28, 0x02	; 2
    1d1e:	1b 82       	std	Y+3, r1	; 0x03
    1d20:	1a 82       	std	Y+2, r1	; 0x02
    1d22:	a0 91 9a 02 	lds	r26, 0x029A
    1d26:	b0 91 9b 02 	lds	r27, 0x029B
    1d2a:	10 97       	sbiw	r26, 0x00	; 0
    1d2c:	09 f1       	breq	.+66     	; 0x1d70 <free+0x60>
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	ac 17       	cp	r26, r28
    1d34:	bd 07       	cpc	r27, r29
    1d36:	08 f1       	brcs	.+66     	; 0x1d7a <free+0x6a>
    1d38:	bb 83       	std	Y+3, r27	; 0x03
    1d3a:	aa 83       	std	Y+2, r26	; 0x02
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	21 91       	ld	r18, Z+
    1d40:	31 91       	ld	r19, Z+
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
    1d46:	ae 17       	cp	r26, r30
    1d48:	bf 07       	cpc	r27, r31
    1d4a:	79 f4       	brne	.+30     	; 0x1d6a <free+0x5a>
    1d4c:	8d 91       	ld	r24, X+
    1d4e:	9c 91       	ld	r25, X
    1d50:	11 97       	sbiw	r26, 0x01	; 1
    1d52:	28 0f       	add	r18, r24
    1d54:	39 1f       	adc	r19, r25
    1d56:	2e 5f       	subi	r18, 0xFE	; 254
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	39 83       	std	Y+1, r19	; 0x01
    1d5c:	28 83       	st	Y, r18
    1d5e:	12 96       	adiw	r26, 0x02	; 2
    1d60:	8d 91       	ld	r24, X+
    1d62:	9c 91       	ld	r25, X
    1d64:	13 97       	sbiw	r26, 0x03	; 3
    1d66:	9b 83       	std	Y+3, r25	; 0x03
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	41 15       	cp	r20, r1
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	71 f4       	brne	.+28     	; 0x1d8c <free+0x7c>
    1d70:	d0 93 9b 02 	sts	0x029B, r29
    1d74:	c0 93 9a 02 	sts	0x029A, r28
    1d78:	20 c0       	rjmp	.+64     	; 0x1dba <free+0xaa>
    1d7a:	12 96       	adiw	r26, 0x02	; 2
    1d7c:	8d 91       	ld	r24, X+
    1d7e:	9c 91       	ld	r25, X
    1d80:	13 97       	sbiw	r26, 0x03	; 3
    1d82:	ad 01       	movw	r20, r26
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <free+0x7c>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	d3 cf       	rjmp	.-90     	; 0x1d32 <free+0x22>
    1d8c:	fa 01       	movw	r30, r20
    1d8e:	d3 83       	std	Z+3, r29	; 0x03
    1d90:	c2 83       	std	Z+2, r28	; 0x02
    1d92:	21 91       	ld	r18, Z+
    1d94:	31 91       	ld	r19, Z+
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	ce 17       	cp	r28, r30
    1d9c:	df 07       	cpc	r29, r31
    1d9e:	69 f4       	brne	.+26     	; 0x1dba <free+0xaa>
    1da0:	88 81       	ld	r24, Y
    1da2:	99 81       	ldd	r25, Y+1	; 0x01
    1da4:	28 0f       	add	r18, r24
    1da6:	39 1f       	adc	r19, r25
    1da8:	2e 5f       	subi	r18, 0xFE	; 254
    1daa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dac:	fa 01       	movw	r30, r20
    1dae:	31 83       	std	Z+1, r19	; 0x01
    1db0:	20 83       	st	Z, r18
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	93 83       	std	Z+3, r25	; 0x03
    1db8:	82 83       	std	Z+2, r24	; 0x02
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <do_rand>:
    1dc0:	a0 e0       	ldi	r26, 0x00	; 0
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e6 ee       	ldi	r30, 0xE6	; 230
    1dc6:	fe e0       	ldi	r31, 0x0E	; 14
    1dc8:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__+0x10>
    1dcc:	ec 01       	movw	r28, r24
    1dce:	a8 80       	ld	r10, Y
    1dd0:	b9 80       	ldd	r11, Y+1	; 0x01
    1dd2:	ca 80       	ldd	r12, Y+2	; 0x02
    1dd4:	db 80       	ldd	r13, Y+3	; 0x03
    1dd6:	a1 14       	cp	r10, r1
    1dd8:	b1 04       	cpc	r11, r1
    1dda:	c1 04       	cpc	r12, r1
    1ddc:	d1 04       	cpc	r13, r1
    1dde:	41 f4       	brne	.+16     	; 0x1df0 <do_rand+0x30>
    1de0:	84 e2       	ldi	r24, 0x24	; 36
    1de2:	a8 2e       	mov	r10, r24
    1de4:	89 ed       	ldi	r24, 0xD9	; 217
    1de6:	b8 2e       	mov	r11, r24
    1de8:	8b e5       	ldi	r24, 0x5B	; 91
    1dea:	c8 2e       	mov	r12, r24
    1dec:	87 e0       	ldi	r24, 0x07	; 7
    1dee:	d8 2e       	mov	r13, r24
    1df0:	c6 01       	movw	r24, r12
    1df2:	b5 01       	movw	r22, r10
    1df4:	2d e1       	ldi	r18, 0x1D	; 29
    1df6:	33 ef       	ldi	r19, 0xF3	; 243
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divmodsi4>
    1e00:	27 ea       	ldi	r18, 0xA7	; 167
    1e02:	31 e4       	ldi	r19, 0x41	; 65
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	0e 94 cf 14 	call	0x299e	; 0x299e <__mulsi3>
    1e0c:	7b 01       	movw	r14, r22
    1e0e:	8c 01       	movw	r16, r24
    1e10:	c6 01       	movw	r24, r12
    1e12:	b5 01       	movw	r22, r10
    1e14:	2d e1       	ldi	r18, 0x1D	; 29
    1e16:	33 ef       	ldi	r19, 0xF3	; 243
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divmodsi4>
    1e20:	ca 01       	movw	r24, r20
    1e22:	b9 01       	movw	r22, r18
    1e24:	2c ee       	ldi	r18, 0xEC	; 236
    1e26:	34 ef       	ldi	r19, 0xF4	; 244
    1e28:	4f ef       	ldi	r20, 0xFF	; 255
    1e2a:	5f ef       	ldi	r21, 0xFF	; 255
    1e2c:	0e 94 cf 14 	call	0x299e	; 0x299e <__mulsi3>
    1e30:	6e 0d       	add	r22, r14
    1e32:	7f 1d       	adc	r23, r15
    1e34:	80 1f       	adc	r24, r16
    1e36:	91 1f       	adc	r25, r17
    1e38:	97 ff       	sbrs	r25, 7
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <do_rand+0x84>
    1e3c:	61 50       	subi	r22, 0x01	; 1
    1e3e:	70 40       	sbci	r23, 0x00	; 0
    1e40:	80 40       	sbci	r24, 0x00	; 0
    1e42:	90 48       	sbci	r25, 0x80	; 128
    1e44:	68 83       	st	Y, r22
    1e46:	79 83       	std	Y+1, r23	; 0x01
    1e48:	8a 83       	std	Y+2, r24	; 0x02
    1e4a:	9b 83       	std	Y+3, r25	; 0x03
    1e4c:	9b 01       	movw	r18, r22
    1e4e:	3f 77       	andi	r19, 0x7F	; 127
    1e50:	c9 01       	movw	r24, r18
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	ea e0       	ldi	r30, 0x0A	; 10
    1e58:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__+0x10>

00001e5c <rand_r>:
    1e5c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <do_rand>
    1e60:	08 95       	ret

00001e62 <rand>:
    1e62:	8f e2       	ldi	r24, 0x2F	; 47
    1e64:	92 e0       	ldi	r25, 0x02	; 2
    1e66:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <do_rand>
    1e6a:	08 95       	ret

00001e6c <srand>:
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	80 93 2f 02 	sts	0x022F, r24
    1e74:	90 93 30 02 	sts	0x0230, r25
    1e78:	a0 93 31 02 	sts	0x0231, r26
    1e7c:	b0 93 32 02 	sts	0x0232, r27
    1e80:	08 95       	ret

00001e82 <atoi>:
    1e82:	fc 01       	movw	r30, r24
    1e84:	88 27       	eor	r24, r24
    1e86:	99 27       	eor	r25, r25
    1e88:	e8 94       	clt
    1e8a:	21 91       	ld	r18, Z+
    1e8c:	20 32       	cpi	r18, 0x20	; 32
    1e8e:	e9 f3       	breq	.-6      	; 0x1e8a <atoi+0x8>
    1e90:	29 30       	cpi	r18, 0x09	; 9
    1e92:	10 f0       	brcs	.+4      	; 0x1e98 <atoi+0x16>
    1e94:	2e 30       	cpi	r18, 0x0E	; 14
    1e96:	c8 f3       	brcs	.-14     	; 0x1e8a <atoi+0x8>
    1e98:	2b 32       	cpi	r18, 0x2B	; 43
    1e9a:	41 f0       	breq	.+16     	; 0x1eac <atoi+0x2a>
    1e9c:	2d 32       	cpi	r18, 0x2D	; 45
    1e9e:	39 f4       	brne	.+14     	; 0x1eae <atoi+0x2c>
    1ea0:	68 94       	set
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <atoi+0x2a>
    1ea4:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__mulhi_const_10>
    1ea8:	82 0f       	add	r24, r18
    1eaa:	91 1d       	adc	r25, r1
    1eac:	21 91       	ld	r18, Z+
    1eae:	20 53       	subi	r18, 0x30	; 48
    1eb0:	2a 30       	cpi	r18, 0x0A	; 10
    1eb2:	c0 f3       	brcs	.-16     	; 0x1ea4 <atoi+0x22>
    1eb4:	1e f4       	brtc	.+6      	; 0x1ebc <atoi+0x3a>
    1eb6:	90 95       	com	r25
    1eb8:	81 95       	neg	r24
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	08 95       	ret

00001ebe <exit>:
    1ebe:	f8 94       	cli
    1ec0:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_exit>

00001ec4 <__ftoa_engine>:
    1ec4:	28 30       	cpi	r18, 0x08	; 8
    1ec6:	08 f0       	brcs	.+2      	; 0x1eca <__ftoa_engine+0x6>
    1ec8:	27 e0       	ldi	r18, 0x07	; 7
    1eca:	33 27       	eor	r19, r19
    1ecc:	da 01       	movw	r26, r20
    1ece:	99 0f       	add	r25, r25
    1ed0:	31 1d       	adc	r19, r1
    1ed2:	87 fd       	sbrc	r24, 7
    1ed4:	91 60       	ori	r25, 0x01	; 1
    1ed6:	00 96       	adiw	r24, 0x00	; 0
    1ed8:	61 05       	cpc	r22, r1
    1eda:	71 05       	cpc	r23, r1
    1edc:	39 f4       	brne	.+14     	; 0x1eec <__ftoa_engine+0x28>
    1ede:	32 60       	ori	r19, 0x02	; 2
    1ee0:	2e 5f       	subi	r18, 0xFE	; 254
    1ee2:	3d 93       	st	X+, r19
    1ee4:	30 e3       	ldi	r19, 0x30	; 48
    1ee6:	2a 95       	dec	r18
    1ee8:	e1 f7       	brne	.-8      	; 0x1ee2 <__ftoa_engine+0x1e>
    1eea:	08 95       	ret
    1eec:	9f 3f       	cpi	r25, 0xFF	; 255
    1eee:	30 f0       	brcs	.+12     	; 0x1efc <__ftoa_engine+0x38>
    1ef0:	80 38       	cpi	r24, 0x80	; 128
    1ef2:	71 05       	cpc	r23, r1
    1ef4:	61 05       	cpc	r22, r1
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <__ftoa_engine+0x36>
    1ef8:	3c 5f       	subi	r19, 0xFC	; 252
    1efa:	3c 5f       	subi	r19, 0xFC	; 252
    1efc:	3d 93       	st	X+, r19
    1efe:	91 30       	cpi	r25, 0x01	; 1
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <__ftoa_engine+0x40>
    1f02:	80 68       	ori	r24, 0x80	; 128
    1f04:	91 1d       	adc	r25, r1
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	1f 93       	push	r17
    1f0c:	0f 93       	push	r16
    1f0e:	ff 92       	push	r15
    1f10:	ef 92       	push	r14
    1f12:	19 2f       	mov	r17, r25
    1f14:	98 7f       	andi	r25, 0xF8	; 248
    1f16:	96 95       	lsr	r25
    1f18:	e9 2f       	mov	r30, r25
    1f1a:	96 95       	lsr	r25
    1f1c:	96 95       	lsr	r25
    1f1e:	e9 0f       	add	r30, r25
    1f20:	ff 27       	eor	r31, r31
    1f22:	e8 53       	subi	r30, 0x38	; 56
    1f24:	fe 4f       	sbci	r31, 0xFE	; 254
    1f26:	99 27       	eor	r25, r25
    1f28:	33 27       	eor	r19, r19
    1f2a:	ee 24       	eor	r14, r14
    1f2c:	ff 24       	eor	r15, r15
    1f2e:	a7 01       	movw	r20, r14
    1f30:	e7 01       	movw	r28, r14
    1f32:	05 90       	lpm	r0, Z+
    1f34:	08 94       	sec
    1f36:	07 94       	ror	r0
    1f38:	28 f4       	brcc	.+10     	; 0x1f44 <__ftoa_engine+0x80>
    1f3a:	36 0f       	add	r19, r22
    1f3c:	e7 1e       	adc	r14, r23
    1f3e:	f8 1e       	adc	r15, r24
    1f40:	49 1f       	adc	r20, r25
    1f42:	51 1d       	adc	r21, r1
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	06 94       	lsr	r0
    1f4e:	a1 f7       	brne	.-24     	; 0x1f38 <__ftoa_engine+0x74>
    1f50:	05 90       	lpm	r0, Z+
    1f52:	07 94       	ror	r0
    1f54:	28 f4       	brcc	.+10     	; 0x1f60 <__ftoa_engine+0x9c>
    1f56:	e7 0e       	add	r14, r23
    1f58:	f8 1e       	adc	r15, r24
    1f5a:	49 1f       	adc	r20, r25
    1f5c:	56 1f       	adc	r21, r22
    1f5e:	c1 1d       	adc	r28, r1
    1f60:	77 0f       	add	r23, r23
    1f62:	88 1f       	adc	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	66 1f       	adc	r22, r22
    1f68:	06 94       	lsr	r0
    1f6a:	a1 f7       	brne	.-24     	; 0x1f54 <__ftoa_engine+0x90>
    1f6c:	05 90       	lpm	r0, Z+
    1f6e:	07 94       	ror	r0
    1f70:	28 f4       	brcc	.+10     	; 0x1f7c <__ftoa_engine+0xb8>
    1f72:	f8 0e       	add	r15, r24
    1f74:	49 1f       	adc	r20, r25
    1f76:	56 1f       	adc	r21, r22
    1f78:	c7 1f       	adc	r28, r23
    1f7a:	d1 1d       	adc	r29, r1
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	66 1f       	adc	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	06 94       	lsr	r0
    1f86:	a1 f7       	brne	.-24     	; 0x1f70 <__ftoa_engine+0xac>
    1f88:	05 90       	lpm	r0, Z+
    1f8a:	07 94       	ror	r0
    1f8c:	20 f4       	brcc	.+8      	; 0x1f96 <__ftoa_engine+0xd2>
    1f8e:	49 0f       	add	r20, r25
    1f90:	56 1f       	adc	r21, r22
    1f92:	c7 1f       	adc	r28, r23
    1f94:	d8 1f       	adc	r29, r24
    1f96:	99 0f       	add	r25, r25
    1f98:	66 1f       	adc	r22, r22
    1f9a:	77 1f       	adc	r23, r23
    1f9c:	88 1f       	adc	r24, r24
    1f9e:	06 94       	lsr	r0
    1fa0:	a9 f7       	brne	.-22     	; 0x1f8c <__ftoa_engine+0xc8>
    1fa2:	84 91       	lpm	r24, Z+
    1fa4:	10 95       	com	r17
    1fa6:	17 70       	andi	r17, 0x07	; 7
    1fa8:	41 f0       	breq	.+16     	; 0x1fba <__ftoa_engine+0xf6>
    1faa:	d6 95       	lsr	r29
    1fac:	c7 95       	ror	r28
    1fae:	57 95       	ror	r21
    1fb0:	47 95       	ror	r20
    1fb2:	f7 94       	ror	r15
    1fb4:	e7 94       	ror	r14
    1fb6:	1a 95       	dec	r17
    1fb8:	c1 f7       	brne	.-16     	; 0x1faa <__ftoa_engine+0xe6>
    1fba:	ee e6       	ldi	r30, 0x6E	; 110
    1fbc:	f1 e0       	ldi	r31, 0x01	; 1
    1fbe:	68 94       	set
    1fc0:	15 90       	lpm	r1, Z+
    1fc2:	15 91       	lpm	r17, Z+
    1fc4:	35 91       	lpm	r19, Z+
    1fc6:	65 91       	lpm	r22, Z+
    1fc8:	95 91       	lpm	r25, Z+
    1fca:	05 90       	lpm	r0, Z+
    1fcc:	7f e2       	ldi	r23, 0x2F	; 47
    1fce:	73 95       	inc	r23
    1fd0:	e1 18       	sub	r14, r1
    1fd2:	f1 0a       	sbc	r15, r17
    1fd4:	43 0b       	sbc	r20, r19
    1fd6:	56 0b       	sbc	r21, r22
    1fd8:	c9 0b       	sbc	r28, r25
    1fda:	d0 09       	sbc	r29, r0
    1fdc:	c0 f7       	brcc	.-16     	; 0x1fce <__ftoa_engine+0x10a>
    1fde:	e1 0c       	add	r14, r1
    1fe0:	f1 1e       	adc	r15, r17
    1fe2:	43 1f       	adc	r20, r19
    1fe4:	56 1f       	adc	r21, r22
    1fe6:	c9 1f       	adc	r28, r25
    1fe8:	d0 1d       	adc	r29, r0
    1fea:	7e f4       	brtc	.+30     	; 0x200a <__ftoa_engine+0x146>
    1fec:	70 33       	cpi	r23, 0x30	; 48
    1fee:	11 f4       	brne	.+4      	; 0x1ff4 <__ftoa_engine+0x130>
    1ff0:	8a 95       	dec	r24
    1ff2:	e6 cf       	rjmp	.-52     	; 0x1fc0 <__ftoa_engine+0xfc>
    1ff4:	e8 94       	clt
    1ff6:	01 50       	subi	r16, 0x01	; 1
    1ff8:	30 f0       	brcs	.+12     	; 0x2006 <__ftoa_engine+0x142>
    1ffa:	08 0f       	add	r16, r24
    1ffc:	0a f4       	brpl	.+2      	; 0x2000 <__ftoa_engine+0x13c>
    1ffe:	00 27       	eor	r16, r16
    2000:	02 17       	cp	r16, r18
    2002:	08 f4       	brcc	.+2      	; 0x2006 <__ftoa_engine+0x142>
    2004:	20 2f       	mov	r18, r16
    2006:	23 95       	inc	r18
    2008:	02 2f       	mov	r16, r18
    200a:	7a 33       	cpi	r23, 0x3A	; 58
    200c:	28 f0       	brcs	.+10     	; 0x2018 <__ftoa_engine+0x154>
    200e:	79 e3       	ldi	r23, 0x39	; 57
    2010:	7d 93       	st	X+, r23
    2012:	2a 95       	dec	r18
    2014:	e9 f7       	brne	.-6      	; 0x2010 <__ftoa_engine+0x14c>
    2016:	10 c0       	rjmp	.+32     	; 0x2038 <__ftoa_engine+0x174>
    2018:	7d 93       	st	X+, r23
    201a:	2a 95       	dec	r18
    201c:	89 f6       	brne	.-94     	; 0x1fc0 <__ftoa_engine+0xfc>
    201e:	06 94       	lsr	r0
    2020:	97 95       	ror	r25
    2022:	67 95       	ror	r22
    2024:	37 95       	ror	r19
    2026:	17 95       	ror	r17
    2028:	17 94       	ror	r1
    202a:	e1 18       	sub	r14, r1
    202c:	f1 0a       	sbc	r15, r17
    202e:	43 0b       	sbc	r20, r19
    2030:	56 0b       	sbc	r21, r22
    2032:	c9 0b       	sbc	r28, r25
    2034:	d0 09       	sbc	r29, r0
    2036:	98 f0       	brcs	.+38     	; 0x205e <__ftoa_engine+0x19a>
    2038:	23 95       	inc	r18
    203a:	7e 91       	ld	r23, -X
    203c:	73 95       	inc	r23
    203e:	7a 33       	cpi	r23, 0x3A	; 58
    2040:	08 f0       	brcs	.+2      	; 0x2044 <__ftoa_engine+0x180>
    2042:	70 e3       	ldi	r23, 0x30	; 48
    2044:	7c 93       	st	X, r23
    2046:	20 13       	cpse	r18, r16
    2048:	b8 f7       	brcc	.-18     	; 0x2038 <__ftoa_engine+0x174>
    204a:	7e 91       	ld	r23, -X
    204c:	70 61       	ori	r23, 0x10	; 16
    204e:	7d 93       	st	X+, r23
    2050:	30 f0       	brcs	.+12     	; 0x205e <__ftoa_engine+0x19a>
    2052:	83 95       	inc	r24
    2054:	71 e3       	ldi	r23, 0x31	; 49
    2056:	7d 93       	st	X+, r23
    2058:	70 e3       	ldi	r23, 0x30	; 48
    205a:	2a 95       	dec	r18
    205c:	e1 f7       	brne	.-8      	; 0x2056 <__ftoa_engine+0x192>
    205e:	11 24       	eor	r1, r1
    2060:	ef 90       	pop	r14
    2062:	ff 90       	pop	r15
    2064:	0f 91       	pop	r16
    2066:	1f 91       	pop	r17
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	99 27       	eor	r25, r25
    206e:	87 fd       	sbrc	r24, 7
    2070:	90 95       	com	r25
    2072:	08 95       	ret

00002074 <strnlen_P>:
    2074:	fc 01       	movw	r30, r24
    2076:	05 90       	lpm	r0, Z+
    2078:	61 50       	subi	r22, 0x01	; 1
    207a:	70 40       	sbci	r23, 0x00	; 0
    207c:	01 10       	cpse	r0, r1
    207e:	d8 f7       	brcc	.-10     	; 0x2076 <strnlen_P+0x2>
    2080:	80 95       	com	r24
    2082:	90 95       	com	r25
    2084:	8e 0f       	add	r24, r30
    2086:	9f 1f       	adc	r25, r31
    2088:	08 95       	ret

0000208a <strnlen>:
    208a:	fc 01       	movw	r30, r24
    208c:	61 50       	subi	r22, 0x01	; 1
    208e:	70 40       	sbci	r23, 0x00	; 0
    2090:	01 90       	ld	r0, Z+
    2092:	01 10       	cpse	r0, r1
    2094:	d8 f7       	brcc	.-10     	; 0x208c <strnlen+0x2>
    2096:	80 95       	com	r24
    2098:	90 95       	com	r25
    209a:	8e 0f       	add	r24, r30
    209c:	9f 1f       	adc	r25, r31
    209e:	08 95       	ret

000020a0 <__mulhi_const_10>:
    20a0:	7a e0       	ldi	r23, 0x0A	; 10
    20a2:	97 9f       	mul	r25, r23
    20a4:	90 2d       	mov	r25, r0
    20a6:	87 9f       	mul	r24, r23
    20a8:	80 2d       	mov	r24, r0
    20aa:	91 0d       	add	r25, r1
    20ac:	11 24       	eor	r1, r1
    20ae:	08 95       	ret

000020b0 <fputc>:
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	8c 01       	movw	r16, r24
    20ba:	eb 01       	movw	r28, r22
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	81 ff       	sbrs	r24, 1
    20c0:	1b c0       	rjmp	.+54     	; 0x20f8 <fputc+0x48>
    20c2:	82 ff       	sbrs	r24, 2
    20c4:	0d c0       	rjmp	.+26     	; 0x20e0 <fputc+0x30>
    20c6:	2e 81       	ldd	r18, Y+6	; 0x06
    20c8:	3f 81       	ldd	r19, Y+7	; 0x07
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	28 17       	cp	r18, r24
    20d0:	39 07       	cpc	r19, r25
    20d2:	64 f4       	brge	.+24     	; 0x20ec <fputc+0x3c>
    20d4:	e8 81       	ld	r30, Y
    20d6:	f9 81       	ldd	r31, Y+1	; 0x01
    20d8:	01 93       	st	Z+, r16
    20da:	f9 83       	std	Y+1, r31	; 0x01
    20dc:	e8 83       	st	Y, r30
    20de:	06 c0       	rjmp	.+12     	; 0x20ec <fputc+0x3c>
    20e0:	e8 85       	ldd	r30, Y+8	; 0x08
    20e2:	f9 85       	ldd	r31, Y+9	; 0x09
    20e4:	80 2f       	mov	r24, r16
    20e6:	19 95       	eicall
    20e8:	89 2b       	or	r24, r25
    20ea:	31 f4       	brne	.+12     	; 0x20f8 <fputc+0x48>
    20ec:	8e 81       	ldd	r24, Y+6	; 0x06
    20ee:	9f 81       	ldd	r25, Y+7	; 0x07
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	9f 83       	std	Y+7, r25	; 0x07
    20f4:	8e 83       	std	Y+6, r24	; 0x06
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <fputc+0x4c>
    20f8:	0f ef       	ldi	r16, 0xFF	; 255
    20fa:	1f ef       	ldi	r17, 0xFF	; 255
    20fc:	c8 01       	movw	r24, r16
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	08 95       	ret

00002108 <sprintf>:
    2108:	ae e0       	ldi	r26, 0x0E	; 14
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	ea e8       	ldi	r30, 0x8A	; 138
    210e:	f0 e1       	ldi	r31, 0x10	; 16
    2110:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <__prologue_saves__+0x1c>
    2114:	0e 89       	ldd	r16, Y+22	; 0x16
    2116:	1f 89       	ldd	r17, Y+23	; 0x17
    2118:	86 e0       	ldi	r24, 0x06	; 6
    211a:	8c 83       	std	Y+4, r24	; 0x04
    211c:	1a 83       	std	Y+2, r17	; 0x02
    211e:	09 83       	std	Y+1, r16	; 0x01
    2120:	8f ef       	ldi	r24, 0xFF	; 255
    2122:	9f e7       	ldi	r25, 0x7F	; 127
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	9e 01       	movw	r18, r28
    212a:	26 5e       	subi	r18, 0xE6	; 230
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	ce 01       	movw	r24, r28
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	68 8d       	ldd	r22, Y+24	; 0x18
    2134:	79 8d       	ldd	r23, Y+25	; 0x19
    2136:	a9 01       	movw	r20, r18
    2138:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <vfprintf>
    213c:	2f 81       	ldd	r18, Y+7	; 0x07
    213e:	38 85       	ldd	r19, Y+8	; 0x08
    2140:	02 0f       	add	r16, r18
    2142:	13 1f       	adc	r17, r19
    2144:	f8 01       	movw	r30, r16
    2146:	10 82       	st	Z, r1
    2148:	2e 96       	adiw	r28, 0x0e	; 14
    214a:	e4 e0       	ldi	r30, 0x04	; 4
    214c:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__epilogue_restores__+0x1c>

00002150 <__ultoa_invert>:
    2150:	fa 01       	movw	r30, r20
    2152:	aa 27       	eor	r26, r26
    2154:	28 30       	cpi	r18, 0x08	; 8
    2156:	51 f1       	breq	.+84     	; 0x21ac <__ultoa_invert+0x5c>
    2158:	20 31       	cpi	r18, 0x10	; 16
    215a:	81 f1       	breq	.+96     	; 0x21bc <__ultoa_invert+0x6c>
    215c:	e8 94       	clt
    215e:	6f 93       	push	r22
    2160:	6e 7f       	andi	r22, 0xFE	; 254
    2162:	6e 5f       	subi	r22, 0xFE	; 254
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	8f 4f       	sbci	r24, 0xFF	; 255
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	af 4f       	sbci	r26, 0xFF	; 255
    216c:	b1 e0       	ldi	r27, 0x01	; 1
    216e:	3e d0       	rcall	.+124    	; 0x21ec <__ultoa_invert+0x9c>
    2170:	b4 e0       	ldi	r27, 0x04	; 4
    2172:	3c d0       	rcall	.+120    	; 0x21ec <__ultoa_invert+0x9c>
    2174:	67 0f       	add	r22, r23
    2176:	78 1f       	adc	r23, r24
    2178:	89 1f       	adc	r24, r25
    217a:	9a 1f       	adc	r25, r26
    217c:	a1 1d       	adc	r26, r1
    217e:	68 0f       	add	r22, r24
    2180:	79 1f       	adc	r23, r25
    2182:	8a 1f       	adc	r24, r26
    2184:	91 1d       	adc	r25, r1
    2186:	a1 1d       	adc	r26, r1
    2188:	6a 0f       	add	r22, r26
    218a:	71 1d       	adc	r23, r1
    218c:	81 1d       	adc	r24, r1
    218e:	91 1d       	adc	r25, r1
    2190:	a1 1d       	adc	r26, r1
    2192:	20 d0       	rcall	.+64     	; 0x21d4 <__ultoa_invert+0x84>
    2194:	09 f4       	brne	.+2      	; 0x2198 <__ultoa_invert+0x48>
    2196:	68 94       	set
    2198:	3f 91       	pop	r19
    219a:	2a e0       	ldi	r18, 0x0A	; 10
    219c:	26 9f       	mul	r18, r22
    219e:	11 24       	eor	r1, r1
    21a0:	30 19       	sub	r19, r0
    21a2:	30 5d       	subi	r19, 0xD0	; 208
    21a4:	31 93       	st	Z+, r19
    21a6:	de f6       	brtc	.-74     	; 0x215e <__ultoa_invert+0xe>
    21a8:	cf 01       	movw	r24, r30
    21aa:	08 95       	ret
    21ac:	46 2f       	mov	r20, r22
    21ae:	47 70       	andi	r20, 0x07	; 7
    21b0:	40 5d       	subi	r20, 0xD0	; 208
    21b2:	41 93       	st	Z+, r20
    21b4:	b3 e0       	ldi	r27, 0x03	; 3
    21b6:	0f d0       	rcall	.+30     	; 0x21d6 <__ultoa_invert+0x86>
    21b8:	c9 f7       	brne	.-14     	; 0x21ac <__ultoa_invert+0x5c>
    21ba:	f6 cf       	rjmp	.-20     	; 0x21a8 <__ultoa_invert+0x58>
    21bc:	46 2f       	mov	r20, r22
    21be:	4f 70       	andi	r20, 0x0F	; 15
    21c0:	40 5d       	subi	r20, 0xD0	; 208
    21c2:	4a 33       	cpi	r20, 0x3A	; 58
    21c4:	18 f0       	brcs	.+6      	; 0x21cc <__ultoa_invert+0x7c>
    21c6:	49 5d       	subi	r20, 0xD9	; 217
    21c8:	31 fd       	sbrc	r19, 1
    21ca:	40 52       	subi	r20, 0x20	; 32
    21cc:	41 93       	st	Z+, r20
    21ce:	02 d0       	rcall	.+4      	; 0x21d4 <__ultoa_invert+0x84>
    21d0:	a9 f7       	brne	.-22     	; 0x21bc <__ultoa_invert+0x6c>
    21d2:	ea cf       	rjmp	.-44     	; 0x21a8 <__ultoa_invert+0x58>
    21d4:	b4 e0       	ldi	r27, 0x04	; 4
    21d6:	a6 95       	lsr	r26
    21d8:	97 95       	ror	r25
    21da:	87 95       	ror	r24
    21dc:	77 95       	ror	r23
    21de:	67 95       	ror	r22
    21e0:	ba 95       	dec	r27
    21e2:	c9 f7       	brne	.-14     	; 0x21d6 <__ultoa_invert+0x86>
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	61 05       	cpc	r22, r1
    21e8:	71 05       	cpc	r23, r1
    21ea:	08 95       	ret
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	0a 2e       	mov	r0, r26
    21f2:	06 94       	lsr	r0
    21f4:	57 95       	ror	r21
    21f6:	47 95       	ror	r20
    21f8:	37 95       	ror	r19
    21fa:	27 95       	ror	r18
    21fc:	ba 95       	dec	r27
    21fe:	c9 f7       	brne	.-14     	; 0x21f2 <__ultoa_invert+0xa2>
    2200:	62 0f       	add	r22, r18
    2202:	73 1f       	adc	r23, r19
    2204:	84 1f       	adc	r24, r20
    2206:	95 1f       	adc	r25, r21
    2208:	a0 1d       	adc	r26, r0
    220a:	08 95       	ret

0000220c <__subsf3>:
    220c:	50 58       	subi	r21, 0x80	; 128

0000220e <__addsf3>:
    220e:	bb 27       	eor	r27, r27
    2210:	aa 27       	eor	r26, r26
    2212:	0e d0       	rcall	.+28     	; 0x2230 <__addsf3x>
    2214:	cb c1       	rjmp	.+918    	; 0x25ac <__fp_round>
    2216:	bc d1       	rcall	.+888    	; 0x2590 <__fp_pscA>
    2218:	30 f0       	brcs	.+12     	; 0x2226 <__addsf3+0x18>
    221a:	c1 d1       	rcall	.+898    	; 0x259e <__fp_pscB>
    221c:	20 f0       	brcs	.+8      	; 0x2226 <__addsf3+0x18>
    221e:	31 f4       	brne	.+12     	; 0x222c <__addsf3+0x1e>
    2220:	9f 3f       	cpi	r25, 0xFF	; 255
    2222:	11 f4       	brne	.+4      	; 0x2228 <__addsf3+0x1a>
    2224:	1e f4       	brtc	.+6      	; 0x222c <__addsf3+0x1e>
    2226:	8c c1       	rjmp	.+792    	; 0x2540 <__fp_nan>
    2228:	0e f4       	brtc	.+2      	; 0x222c <__addsf3+0x1e>
    222a:	e0 95       	com	r30
    222c:	e7 fb       	bst	r30, 7
    222e:	82 c1       	rjmp	.+772    	; 0x2534 <__fp_inf>

00002230 <__addsf3x>:
    2230:	e9 2f       	mov	r30, r25
    2232:	cd d1       	rcall	.+922    	; 0x25ce <__fp_split3>
    2234:	80 f3       	brcs	.-32     	; 0x2216 <__addsf3+0x8>
    2236:	ba 17       	cp	r27, r26
    2238:	62 07       	cpc	r22, r18
    223a:	73 07       	cpc	r23, r19
    223c:	84 07       	cpc	r24, r20
    223e:	95 07       	cpc	r25, r21
    2240:	18 f0       	brcs	.+6      	; 0x2248 <__addsf3x+0x18>
    2242:	71 f4       	brne	.+28     	; 0x2260 <__addsf3x+0x30>
    2244:	9e f5       	brtc	.+102    	; 0x22ac <__addsf3x+0x7c>
    2246:	e5 c1       	rjmp	.+970    	; 0x2612 <__fp_zero>
    2248:	0e f4       	brtc	.+2      	; 0x224c <__addsf3x+0x1c>
    224a:	e0 95       	com	r30
    224c:	0b 2e       	mov	r0, r27
    224e:	ba 2f       	mov	r27, r26
    2250:	a0 2d       	mov	r26, r0
    2252:	0b 01       	movw	r0, r22
    2254:	b9 01       	movw	r22, r18
    2256:	90 01       	movw	r18, r0
    2258:	0c 01       	movw	r0, r24
    225a:	ca 01       	movw	r24, r20
    225c:	a0 01       	movw	r20, r0
    225e:	11 24       	eor	r1, r1
    2260:	ff 27       	eor	r31, r31
    2262:	59 1b       	sub	r21, r25
    2264:	99 f0       	breq	.+38     	; 0x228c <__addsf3x+0x5c>
    2266:	59 3f       	cpi	r21, 0xF9	; 249
    2268:	50 f4       	brcc	.+20     	; 0x227e <__addsf3x+0x4e>
    226a:	50 3e       	cpi	r21, 0xE0	; 224
    226c:	68 f1       	brcs	.+90     	; 0x22c8 <__addsf3x+0x98>
    226e:	1a 16       	cp	r1, r26
    2270:	f0 40       	sbci	r31, 0x00	; 0
    2272:	a2 2f       	mov	r26, r18
    2274:	23 2f       	mov	r18, r19
    2276:	34 2f       	mov	r19, r20
    2278:	44 27       	eor	r20, r20
    227a:	58 5f       	subi	r21, 0xF8	; 248
    227c:	f3 cf       	rjmp	.-26     	; 0x2264 <__addsf3x+0x34>
    227e:	46 95       	lsr	r20
    2280:	37 95       	ror	r19
    2282:	27 95       	ror	r18
    2284:	a7 95       	ror	r26
    2286:	f0 40       	sbci	r31, 0x00	; 0
    2288:	53 95       	inc	r21
    228a:	c9 f7       	brne	.-14     	; 0x227e <__addsf3x+0x4e>
    228c:	7e f4       	brtc	.+30     	; 0x22ac <__addsf3x+0x7c>
    228e:	1f 16       	cp	r1, r31
    2290:	ba 0b       	sbc	r27, r26
    2292:	62 0b       	sbc	r22, r18
    2294:	73 0b       	sbc	r23, r19
    2296:	84 0b       	sbc	r24, r20
    2298:	ba f0       	brmi	.+46     	; 0x22c8 <__addsf3x+0x98>
    229a:	91 50       	subi	r25, 0x01	; 1
    229c:	a1 f0       	breq	.+40     	; 0x22c6 <__addsf3x+0x96>
    229e:	ff 0f       	add	r31, r31
    22a0:	bb 1f       	adc	r27, r27
    22a2:	66 1f       	adc	r22, r22
    22a4:	77 1f       	adc	r23, r23
    22a6:	88 1f       	adc	r24, r24
    22a8:	c2 f7       	brpl	.-16     	; 0x229a <__addsf3x+0x6a>
    22aa:	0e c0       	rjmp	.+28     	; 0x22c8 <__addsf3x+0x98>
    22ac:	ba 0f       	add	r27, r26
    22ae:	62 1f       	adc	r22, r18
    22b0:	73 1f       	adc	r23, r19
    22b2:	84 1f       	adc	r24, r20
    22b4:	48 f4       	brcc	.+18     	; 0x22c8 <__addsf3x+0x98>
    22b6:	87 95       	ror	r24
    22b8:	77 95       	ror	r23
    22ba:	67 95       	ror	r22
    22bc:	b7 95       	ror	r27
    22be:	f7 95       	ror	r31
    22c0:	9e 3f       	cpi	r25, 0xFE	; 254
    22c2:	08 f0       	brcs	.+2      	; 0x22c6 <__addsf3x+0x96>
    22c4:	b3 cf       	rjmp	.-154    	; 0x222c <__addsf3+0x1e>
    22c6:	93 95       	inc	r25
    22c8:	88 0f       	add	r24, r24
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <__addsf3x+0x9e>
    22cc:	99 27       	eor	r25, r25
    22ce:	ee 0f       	add	r30, r30
    22d0:	97 95       	ror	r25
    22d2:	87 95       	ror	r24
    22d4:	08 95       	ret

000022d6 <__cmpsf2>:
    22d6:	0a d1       	rcall	.+532    	; 0x24ec <__fp_cmp>
    22d8:	08 f4       	brcc	.+2      	; 0x22dc <__cmpsf2+0x6>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	08 95       	ret

000022de <__divsf3>:
    22de:	0c d0       	rcall	.+24     	; 0x22f8 <__divsf3x>
    22e0:	65 c1       	rjmp	.+714    	; 0x25ac <__fp_round>
    22e2:	5d d1       	rcall	.+698    	; 0x259e <__fp_pscB>
    22e4:	40 f0       	brcs	.+16     	; 0x22f6 <__divsf3+0x18>
    22e6:	54 d1       	rcall	.+680    	; 0x2590 <__fp_pscA>
    22e8:	30 f0       	brcs	.+12     	; 0x22f6 <__divsf3+0x18>
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <__divsf3+0x16>
    22ec:	5f 3f       	cpi	r21, 0xFF	; 255
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <__divsf3+0x18>
    22f0:	21 c1       	rjmp	.+578    	; 0x2534 <__fp_inf>
    22f2:	51 11       	cpse	r21, r1
    22f4:	8f c1       	rjmp	.+798    	; 0x2614 <__fp_szero>
    22f6:	24 c1       	rjmp	.+584    	; 0x2540 <__fp_nan>

000022f8 <__divsf3x>:
    22f8:	6a d1       	rcall	.+724    	; 0x25ce <__fp_split3>
    22fa:	98 f3       	brcs	.-26     	; 0x22e2 <__divsf3+0x4>

000022fc <__divsf3_pse>:
    22fc:	99 23       	and	r25, r25
    22fe:	c9 f3       	breq	.-14     	; 0x22f2 <__divsf3+0x14>
    2300:	55 23       	and	r21, r21
    2302:	b1 f3       	breq	.-20     	; 0x22f0 <__divsf3+0x12>
    2304:	95 1b       	sub	r25, r21
    2306:	55 0b       	sbc	r21, r21
    2308:	bb 27       	eor	r27, r27
    230a:	aa 27       	eor	r26, r26
    230c:	62 17       	cp	r22, r18
    230e:	73 07       	cpc	r23, r19
    2310:	84 07       	cpc	r24, r20
    2312:	38 f0       	brcs	.+14     	; 0x2322 <__divsf3_pse+0x26>
    2314:	9f 5f       	subi	r25, 0xFF	; 255
    2316:	5f 4f       	sbci	r21, 0xFF	; 255
    2318:	22 0f       	add	r18, r18
    231a:	33 1f       	adc	r19, r19
    231c:	44 1f       	adc	r20, r20
    231e:	aa 1f       	adc	r26, r26
    2320:	a9 f3       	breq	.-22     	; 0x230c <__divsf3_pse+0x10>
    2322:	33 d0       	rcall	.+102    	; 0x238a <__divsf3_pse+0x8e>
    2324:	0e 2e       	mov	r0, r30
    2326:	3a f0       	brmi	.+14     	; 0x2336 <__divsf3_pse+0x3a>
    2328:	e0 e8       	ldi	r30, 0x80	; 128
    232a:	30 d0       	rcall	.+96     	; 0x238c <__divsf3_pse+0x90>
    232c:	91 50       	subi	r25, 0x01	; 1
    232e:	50 40       	sbci	r21, 0x00	; 0
    2330:	e6 95       	lsr	r30
    2332:	00 1c       	adc	r0, r0
    2334:	ca f7       	brpl	.-14     	; 0x2328 <__divsf3_pse+0x2c>
    2336:	29 d0       	rcall	.+82     	; 0x238a <__divsf3_pse+0x8e>
    2338:	fe 2f       	mov	r31, r30
    233a:	27 d0       	rcall	.+78     	; 0x238a <__divsf3_pse+0x8e>
    233c:	66 0f       	add	r22, r22
    233e:	77 1f       	adc	r23, r23
    2340:	88 1f       	adc	r24, r24
    2342:	bb 1f       	adc	r27, r27
    2344:	26 17       	cp	r18, r22
    2346:	37 07       	cpc	r19, r23
    2348:	48 07       	cpc	r20, r24
    234a:	ab 07       	cpc	r26, r27
    234c:	b0 e8       	ldi	r27, 0x80	; 128
    234e:	09 f0       	breq	.+2      	; 0x2352 <__divsf3_pse+0x56>
    2350:	bb 0b       	sbc	r27, r27
    2352:	80 2d       	mov	r24, r0
    2354:	bf 01       	movw	r22, r30
    2356:	ff 27       	eor	r31, r31
    2358:	93 58       	subi	r25, 0x83	; 131
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	2a f0       	brmi	.+10     	; 0x2368 <__divsf3_pse+0x6c>
    235e:	9e 3f       	cpi	r25, 0xFE	; 254
    2360:	51 05       	cpc	r21, r1
    2362:	68 f0       	brcs	.+26     	; 0x237e <__divsf3_pse+0x82>
    2364:	e7 c0       	rjmp	.+462    	; 0x2534 <__fp_inf>
    2366:	56 c1       	rjmp	.+684    	; 0x2614 <__fp_szero>
    2368:	5f 3f       	cpi	r21, 0xFF	; 255
    236a:	ec f3       	brlt	.-6      	; 0x2366 <__divsf3_pse+0x6a>
    236c:	98 3e       	cpi	r25, 0xE8	; 232
    236e:	dc f3       	brlt	.-10     	; 0x2366 <__divsf3_pse+0x6a>
    2370:	86 95       	lsr	r24
    2372:	77 95       	ror	r23
    2374:	67 95       	ror	r22
    2376:	b7 95       	ror	r27
    2378:	f7 95       	ror	r31
    237a:	9f 5f       	subi	r25, 0xFF	; 255
    237c:	c9 f7       	brne	.-14     	; 0x2370 <__divsf3_pse+0x74>
    237e:	88 0f       	add	r24, r24
    2380:	91 1d       	adc	r25, r1
    2382:	96 95       	lsr	r25
    2384:	87 95       	ror	r24
    2386:	97 f9       	bld	r25, 7
    2388:	08 95       	ret
    238a:	e1 e0       	ldi	r30, 0x01	; 1
    238c:	66 0f       	add	r22, r22
    238e:	77 1f       	adc	r23, r23
    2390:	88 1f       	adc	r24, r24
    2392:	bb 1f       	adc	r27, r27
    2394:	62 17       	cp	r22, r18
    2396:	73 07       	cpc	r23, r19
    2398:	84 07       	cpc	r24, r20
    239a:	ba 07       	cpc	r27, r26
    239c:	20 f0       	brcs	.+8      	; 0x23a6 <__divsf3_pse+0xaa>
    239e:	62 1b       	sub	r22, r18
    23a0:	73 0b       	sbc	r23, r19
    23a2:	84 0b       	sbc	r24, r20
    23a4:	ba 0b       	sbc	r27, r26
    23a6:	ee 1f       	adc	r30, r30
    23a8:	88 f7       	brcc	.-30     	; 0x238c <__divsf3_pse+0x90>
    23aa:	e0 95       	com	r30
    23ac:	08 95       	ret
    23ae:	19 f4       	brne	.+6      	; 0x23b6 <__divsf3_pse+0xba>
    23b0:	0e f0       	brts	.+2      	; 0x23b4 <__divsf3_pse+0xb8>
    23b2:	c0 c0       	rjmp	.+384    	; 0x2534 <__fp_inf>
    23b4:	2e c1       	rjmp	.+604    	; 0x2612 <__fp_zero>
    23b6:	c4 c0       	rjmp	.+392    	; 0x2540 <__fp_nan>

000023b8 <exp>:
    23b8:	12 d1       	rcall	.+548    	; 0x25de <__fp_splitA>
    23ba:	c8 f3       	brcs	.-14     	; 0x23ae <__divsf3_pse+0xb2>
    23bc:	96 38       	cpi	r25, 0x86	; 134
    23be:	c0 f7       	brcc	.-16     	; 0x23b0 <__divsf3_pse+0xb4>
    23c0:	07 f8       	bld	r0, 7
    23c2:	0f 92       	push	r0
    23c4:	e8 94       	clt
    23c6:	2b e3       	ldi	r18, 0x3B	; 59
    23c8:	3a ea       	ldi	r19, 0xAA	; 170
    23ca:	48 eb       	ldi	r20, 0xB8	; 184
    23cc:	5f e7       	ldi	r21, 0x7F	; 127
    23ce:	ef d1       	rcall	.+990    	; 0x27ae <__mulsf3_pse>
    23d0:	0f 92       	push	r0
    23d2:	0f 92       	push	r0
    23d4:	0f 92       	push	r0
    23d6:	4d b7       	in	r20, 0x3d	; 61
    23d8:	5e b7       	in	r21, 0x3e	; 62
    23da:	0f 92       	push	r0
    23dc:	a7 d1       	rcall	.+846    	; 0x272c <modf>
    23de:	e4 ee       	ldi	r30, 0xE4	; 228
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	b1 d0       	rcall	.+354    	; 0x2546 <__fp_powser>
    23e4:	4f 91       	pop	r20
    23e6:	5f 91       	pop	r21
    23e8:	ef 91       	pop	r30
    23ea:	ff 91       	pop	r31
    23ec:	e5 95       	asr	r30
    23ee:	ee 1f       	adc	r30, r30
    23f0:	ff 1f       	adc	r31, r31
    23f2:	49 f0       	breq	.+18     	; 0x2406 <exp+0x4e>
    23f4:	fe 57       	subi	r31, 0x7E	; 126
    23f6:	e0 68       	ori	r30, 0x80	; 128
    23f8:	44 27       	eor	r20, r20
    23fa:	ee 0f       	add	r30, r30
    23fc:	44 1f       	adc	r20, r20
    23fe:	fa 95       	dec	r31
    2400:	e1 f7       	brne	.-8      	; 0x23fa <exp+0x42>
    2402:	41 95       	neg	r20
    2404:	55 0b       	sbc	r21, r21
    2406:	19 d1       	rcall	.+562    	; 0x263a <ldexp>
    2408:	0f 90       	pop	r0
    240a:	07 fe       	sbrs	r0, 7
    240c:	0d c1       	rjmp	.+538    	; 0x2628 <inverse>
    240e:	08 95       	ret

00002410 <__fixsfsi>:
    2410:	04 d0       	rcall	.+8      	; 0x241a <__fixunssfsi>
    2412:	68 94       	set
    2414:	b1 11       	cpse	r27, r1
    2416:	fe c0       	rjmp	.+508    	; 0x2614 <__fp_szero>
    2418:	08 95       	ret

0000241a <__fixunssfsi>:
    241a:	e1 d0       	rcall	.+450    	; 0x25de <__fp_splitA>
    241c:	88 f0       	brcs	.+34     	; 0x2440 <__fixunssfsi+0x26>
    241e:	9f 57       	subi	r25, 0x7F	; 127
    2420:	90 f0       	brcs	.+36     	; 0x2446 <__fixunssfsi+0x2c>
    2422:	b9 2f       	mov	r27, r25
    2424:	99 27       	eor	r25, r25
    2426:	b7 51       	subi	r27, 0x17	; 23
    2428:	a0 f0       	brcs	.+40     	; 0x2452 <__fixunssfsi+0x38>
    242a:	d1 f0       	breq	.+52     	; 0x2460 <__fixunssfsi+0x46>
    242c:	66 0f       	add	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	88 1f       	adc	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	1a f0       	brmi	.+6      	; 0x243c <__fixunssfsi+0x22>
    2436:	ba 95       	dec	r27
    2438:	c9 f7       	brne	.-14     	; 0x242c <__fixunssfsi+0x12>
    243a:	12 c0       	rjmp	.+36     	; 0x2460 <__fixunssfsi+0x46>
    243c:	b1 30       	cpi	r27, 0x01	; 1
    243e:	81 f0       	breq	.+32     	; 0x2460 <__fixunssfsi+0x46>
    2440:	e8 d0       	rcall	.+464    	; 0x2612 <__fp_zero>
    2442:	b1 e0       	ldi	r27, 0x01	; 1
    2444:	08 95       	ret
    2446:	e5 c0       	rjmp	.+458    	; 0x2612 <__fp_zero>
    2448:	67 2f       	mov	r22, r23
    244a:	78 2f       	mov	r23, r24
    244c:	88 27       	eor	r24, r24
    244e:	b8 5f       	subi	r27, 0xF8	; 248
    2450:	39 f0       	breq	.+14     	; 0x2460 <__fixunssfsi+0x46>
    2452:	b9 3f       	cpi	r27, 0xF9	; 249
    2454:	cc f3       	brlt	.-14     	; 0x2448 <__fixunssfsi+0x2e>
    2456:	86 95       	lsr	r24
    2458:	77 95       	ror	r23
    245a:	67 95       	ror	r22
    245c:	b3 95       	inc	r27
    245e:	d9 f7       	brne	.-10     	; 0x2456 <__fixunssfsi+0x3c>
    2460:	3e f4       	brtc	.+14     	; 0x2470 <__fixunssfsi+0x56>
    2462:	90 95       	com	r25
    2464:	80 95       	com	r24
    2466:	70 95       	com	r23
    2468:	61 95       	neg	r22
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	8f 4f       	sbci	r24, 0xFF	; 255
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	08 95       	ret

00002472 <__floatunsisf>:
    2472:	e8 94       	clt
    2474:	09 c0       	rjmp	.+18     	; 0x2488 <__floatsisf+0x12>

00002476 <__floatsisf>:
    2476:	97 fb       	bst	r25, 7
    2478:	3e f4       	brtc	.+14     	; 0x2488 <__floatsisf+0x12>
    247a:	90 95       	com	r25
    247c:	80 95       	com	r24
    247e:	70 95       	com	r23
    2480:	61 95       	neg	r22
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	99 23       	and	r25, r25
    248a:	a9 f0       	breq	.+42     	; 0x24b6 <__floatsisf+0x40>
    248c:	f9 2f       	mov	r31, r25
    248e:	96 e9       	ldi	r25, 0x96	; 150
    2490:	bb 27       	eor	r27, r27
    2492:	93 95       	inc	r25
    2494:	f6 95       	lsr	r31
    2496:	87 95       	ror	r24
    2498:	77 95       	ror	r23
    249a:	67 95       	ror	r22
    249c:	b7 95       	ror	r27
    249e:	f1 11       	cpse	r31, r1
    24a0:	f8 cf       	rjmp	.-16     	; 0x2492 <__floatsisf+0x1c>
    24a2:	fa f4       	brpl	.+62     	; 0x24e2 <__floatsisf+0x6c>
    24a4:	bb 0f       	add	r27, r27
    24a6:	11 f4       	brne	.+4      	; 0x24ac <__floatsisf+0x36>
    24a8:	60 ff       	sbrs	r22, 0
    24aa:	1b c0       	rjmp	.+54     	; 0x24e2 <__floatsisf+0x6c>
    24ac:	6f 5f       	subi	r22, 0xFF	; 255
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	8f 4f       	sbci	r24, 0xFF	; 255
    24b2:	9f 4f       	sbci	r25, 0xFF	; 255
    24b4:	16 c0       	rjmp	.+44     	; 0x24e2 <__floatsisf+0x6c>
    24b6:	88 23       	and	r24, r24
    24b8:	11 f0       	breq	.+4      	; 0x24be <__floatsisf+0x48>
    24ba:	96 e9       	ldi	r25, 0x96	; 150
    24bc:	11 c0       	rjmp	.+34     	; 0x24e0 <__floatsisf+0x6a>
    24be:	77 23       	and	r23, r23
    24c0:	21 f0       	breq	.+8      	; 0x24ca <__floatsisf+0x54>
    24c2:	9e e8       	ldi	r25, 0x8E	; 142
    24c4:	87 2f       	mov	r24, r23
    24c6:	76 2f       	mov	r23, r22
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <__floatsisf+0x5e>
    24ca:	66 23       	and	r22, r22
    24cc:	71 f0       	breq	.+28     	; 0x24ea <__floatsisf+0x74>
    24ce:	96 e8       	ldi	r25, 0x86	; 134
    24d0:	86 2f       	mov	r24, r22
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	2a f0       	brmi	.+10     	; 0x24e2 <__floatsisf+0x6c>
    24d8:	9a 95       	dec	r25
    24da:	66 0f       	add	r22, r22
    24dc:	77 1f       	adc	r23, r23
    24de:	88 1f       	adc	r24, r24
    24e0:	da f7       	brpl	.-10     	; 0x24d8 <__floatsisf+0x62>
    24e2:	88 0f       	add	r24, r24
    24e4:	96 95       	lsr	r25
    24e6:	87 95       	ror	r24
    24e8:	97 f9       	bld	r25, 7
    24ea:	08 95       	ret

000024ec <__fp_cmp>:
    24ec:	99 0f       	add	r25, r25
    24ee:	00 08       	sbc	r0, r0
    24f0:	55 0f       	add	r21, r21
    24f2:	aa 0b       	sbc	r26, r26
    24f4:	e0 e8       	ldi	r30, 0x80	; 128
    24f6:	fe ef       	ldi	r31, 0xFE	; 254
    24f8:	16 16       	cp	r1, r22
    24fa:	17 06       	cpc	r1, r23
    24fc:	e8 07       	cpc	r30, r24
    24fe:	f9 07       	cpc	r31, r25
    2500:	c0 f0       	brcs	.+48     	; 0x2532 <__fp_cmp+0x46>
    2502:	12 16       	cp	r1, r18
    2504:	13 06       	cpc	r1, r19
    2506:	e4 07       	cpc	r30, r20
    2508:	f5 07       	cpc	r31, r21
    250a:	98 f0       	brcs	.+38     	; 0x2532 <__fp_cmp+0x46>
    250c:	62 1b       	sub	r22, r18
    250e:	73 0b       	sbc	r23, r19
    2510:	84 0b       	sbc	r24, r20
    2512:	95 0b       	sbc	r25, r21
    2514:	39 f4       	brne	.+14     	; 0x2524 <__fp_cmp+0x38>
    2516:	0a 26       	eor	r0, r26
    2518:	61 f0       	breq	.+24     	; 0x2532 <__fp_cmp+0x46>
    251a:	23 2b       	or	r18, r19
    251c:	24 2b       	or	r18, r20
    251e:	25 2b       	or	r18, r21
    2520:	21 f4       	brne	.+8      	; 0x252a <__fp_cmp+0x3e>
    2522:	08 95       	ret
    2524:	0a 26       	eor	r0, r26
    2526:	09 f4       	brne	.+2      	; 0x252a <__fp_cmp+0x3e>
    2528:	a1 40       	sbci	r26, 0x01	; 1
    252a:	a6 95       	lsr	r26
    252c:	8f ef       	ldi	r24, 0xFF	; 255
    252e:	81 1d       	adc	r24, r1
    2530:	81 1d       	adc	r24, r1
    2532:	08 95       	ret

00002534 <__fp_inf>:
    2534:	97 f9       	bld	r25, 7
    2536:	9f 67       	ori	r25, 0x7F	; 127
    2538:	80 e8       	ldi	r24, 0x80	; 128
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	08 95       	ret

00002540 <__fp_nan>:
    2540:	9f ef       	ldi	r25, 0xFF	; 255
    2542:	80 ec       	ldi	r24, 0xC0	; 192
    2544:	08 95       	ret

00002546 <__fp_powser>:
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	1f 93       	push	r17
    254c:	0f 93       	push	r16
    254e:	ff 92       	push	r15
    2550:	ef 92       	push	r14
    2552:	df 92       	push	r13
    2554:	7b 01       	movw	r14, r22
    2556:	8c 01       	movw	r16, r24
    2558:	68 94       	set
    255a:	05 c0       	rjmp	.+10     	; 0x2566 <__fp_powser+0x20>
    255c:	da 2e       	mov	r13, r26
    255e:	ef 01       	movw	r28, r30
    2560:	24 d1       	rcall	.+584    	; 0x27aa <__mulsf3x>
    2562:	fe 01       	movw	r30, r28
    2564:	e8 94       	clt
    2566:	a5 91       	lpm	r26, Z+
    2568:	25 91       	lpm	r18, Z+
    256a:	35 91       	lpm	r19, Z+
    256c:	45 91       	lpm	r20, Z+
    256e:	55 91       	lpm	r21, Z+
    2570:	ae f3       	brts	.-22     	; 0x255c <__fp_powser+0x16>
    2572:	ef 01       	movw	r28, r30
    2574:	5d de       	rcall	.-838    	; 0x2230 <__addsf3x>
    2576:	fe 01       	movw	r30, r28
    2578:	97 01       	movw	r18, r14
    257a:	a8 01       	movw	r20, r16
    257c:	da 94       	dec	r13
    257e:	79 f7       	brne	.-34     	; 0x255e <__fp_powser+0x18>
    2580:	df 90       	pop	r13
    2582:	ef 90       	pop	r14
    2584:	ff 90       	pop	r15
    2586:	0f 91       	pop	r16
    2588:	1f 91       	pop	r17
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <__fp_pscA>:
    2590:	00 24       	eor	r0, r0
    2592:	0a 94       	dec	r0
    2594:	16 16       	cp	r1, r22
    2596:	17 06       	cpc	r1, r23
    2598:	18 06       	cpc	r1, r24
    259a:	09 06       	cpc	r0, r25
    259c:	08 95       	ret

0000259e <__fp_pscB>:
    259e:	00 24       	eor	r0, r0
    25a0:	0a 94       	dec	r0
    25a2:	12 16       	cp	r1, r18
    25a4:	13 06       	cpc	r1, r19
    25a6:	14 06       	cpc	r1, r20
    25a8:	05 06       	cpc	r0, r21
    25aa:	08 95       	ret

000025ac <__fp_round>:
    25ac:	09 2e       	mov	r0, r25
    25ae:	03 94       	inc	r0
    25b0:	00 0c       	add	r0, r0
    25b2:	11 f4       	brne	.+4      	; 0x25b8 <__fp_round+0xc>
    25b4:	88 23       	and	r24, r24
    25b6:	52 f0       	brmi	.+20     	; 0x25cc <__fp_round+0x20>
    25b8:	bb 0f       	add	r27, r27
    25ba:	40 f4       	brcc	.+16     	; 0x25cc <__fp_round+0x20>
    25bc:	bf 2b       	or	r27, r31
    25be:	11 f4       	brne	.+4      	; 0x25c4 <__fp_round+0x18>
    25c0:	60 ff       	sbrs	r22, 0
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <__fp_round+0x20>
    25c4:	6f 5f       	subi	r22, 0xFF	; 255
    25c6:	7f 4f       	sbci	r23, 0xFF	; 255
    25c8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ca:	9f 4f       	sbci	r25, 0xFF	; 255
    25cc:	08 95       	ret

000025ce <__fp_split3>:
    25ce:	57 fd       	sbrc	r21, 7
    25d0:	90 58       	subi	r25, 0x80	; 128
    25d2:	44 0f       	add	r20, r20
    25d4:	55 1f       	adc	r21, r21
    25d6:	59 f0       	breq	.+22     	; 0x25ee <__fp_splitA+0x10>
    25d8:	5f 3f       	cpi	r21, 0xFF	; 255
    25da:	71 f0       	breq	.+28     	; 0x25f8 <__fp_splitA+0x1a>
    25dc:	47 95       	ror	r20

000025de <__fp_splitA>:
    25de:	88 0f       	add	r24, r24
    25e0:	97 fb       	bst	r25, 7
    25e2:	99 1f       	adc	r25, r25
    25e4:	61 f0       	breq	.+24     	; 0x25fe <__fp_splitA+0x20>
    25e6:	9f 3f       	cpi	r25, 0xFF	; 255
    25e8:	79 f0       	breq	.+30     	; 0x2608 <__fp_splitA+0x2a>
    25ea:	87 95       	ror	r24
    25ec:	08 95       	ret
    25ee:	12 16       	cp	r1, r18
    25f0:	13 06       	cpc	r1, r19
    25f2:	14 06       	cpc	r1, r20
    25f4:	55 1f       	adc	r21, r21
    25f6:	f2 cf       	rjmp	.-28     	; 0x25dc <__fp_split3+0xe>
    25f8:	46 95       	lsr	r20
    25fa:	f1 df       	rcall	.-30     	; 0x25de <__fp_splitA>
    25fc:	08 c0       	rjmp	.+16     	; 0x260e <__fp_splitA+0x30>
    25fe:	16 16       	cp	r1, r22
    2600:	17 06       	cpc	r1, r23
    2602:	18 06       	cpc	r1, r24
    2604:	99 1f       	adc	r25, r25
    2606:	f1 cf       	rjmp	.-30     	; 0x25ea <__fp_splitA+0xc>
    2608:	86 95       	lsr	r24
    260a:	71 05       	cpc	r23, r1
    260c:	61 05       	cpc	r22, r1
    260e:	08 94       	sec
    2610:	08 95       	ret

00002612 <__fp_zero>:
    2612:	e8 94       	clt

00002614 <__fp_szero>:
    2614:	bb 27       	eor	r27, r27
    2616:	66 27       	eor	r22, r22
    2618:	77 27       	eor	r23, r23
    261a:	cb 01       	movw	r24, r22
    261c:	97 f9       	bld	r25, 7
    261e:	08 95       	ret

00002620 <__gesf2>:
    2620:	65 df       	rcall	.-310    	; 0x24ec <__fp_cmp>
    2622:	08 f4       	brcc	.+2      	; 0x2626 <__gesf2+0x6>
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	08 95       	ret

00002628 <inverse>:
    2628:	9b 01       	movw	r18, r22
    262a:	ac 01       	movw	r20, r24
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	80 e8       	ldi	r24, 0x80	; 128
    2632:	9f e3       	ldi	r25, 0x3F	; 63
    2634:	54 ce       	rjmp	.-856    	; 0x22de <__divsf3>
    2636:	7e cf       	rjmp	.-260    	; 0x2534 <__fp_inf>
    2638:	9d c1       	rjmp	.+826    	; 0x2974 <__fp_mpack>

0000263a <ldexp>:
    263a:	d1 df       	rcall	.-94     	; 0x25de <__fp_splitA>
    263c:	e8 f3       	brcs	.-6      	; 0x2638 <inverse+0x10>
    263e:	99 23       	and	r25, r25
    2640:	d9 f3       	breq	.-10     	; 0x2638 <inverse+0x10>
    2642:	94 0f       	add	r25, r20
    2644:	51 1d       	adc	r21, r1
    2646:	bb f3       	brvs	.-18     	; 0x2636 <inverse+0xe>
    2648:	91 50       	subi	r25, 0x01	; 1
    264a:	50 40       	sbci	r21, 0x00	; 0
    264c:	94 f0       	brlt	.+36     	; 0x2672 <ldexp+0x38>
    264e:	59 f0       	breq	.+22     	; 0x2666 <ldexp+0x2c>
    2650:	88 23       	and	r24, r24
    2652:	32 f0       	brmi	.+12     	; 0x2660 <ldexp+0x26>
    2654:	66 0f       	add	r22, r22
    2656:	77 1f       	adc	r23, r23
    2658:	88 1f       	adc	r24, r24
    265a:	91 50       	subi	r25, 0x01	; 1
    265c:	50 40       	sbci	r21, 0x00	; 0
    265e:	c1 f7       	brne	.-16     	; 0x2650 <ldexp+0x16>
    2660:	9e 3f       	cpi	r25, 0xFE	; 254
    2662:	51 05       	cpc	r21, r1
    2664:	44 f7       	brge	.-48     	; 0x2636 <inverse+0xe>
    2666:	88 0f       	add	r24, r24
    2668:	91 1d       	adc	r25, r1
    266a:	96 95       	lsr	r25
    266c:	87 95       	ror	r24
    266e:	97 f9       	bld	r25, 7
    2670:	08 95       	ret
    2672:	5f 3f       	cpi	r21, 0xFF	; 255
    2674:	ac f0       	brlt	.+42     	; 0x26a0 <ldexp+0x66>
    2676:	98 3e       	cpi	r25, 0xE8	; 232
    2678:	9c f0       	brlt	.+38     	; 0x26a0 <ldexp+0x66>
    267a:	bb 27       	eor	r27, r27
    267c:	86 95       	lsr	r24
    267e:	77 95       	ror	r23
    2680:	67 95       	ror	r22
    2682:	b7 95       	ror	r27
    2684:	08 f4       	brcc	.+2      	; 0x2688 <ldexp+0x4e>
    2686:	b1 60       	ori	r27, 0x01	; 1
    2688:	93 95       	inc	r25
    268a:	c1 f7       	brne	.-16     	; 0x267c <ldexp+0x42>
    268c:	bb 0f       	add	r27, r27
    268e:	58 f7       	brcc	.-42     	; 0x2666 <ldexp+0x2c>
    2690:	11 f4       	brne	.+4      	; 0x2696 <ldexp+0x5c>
    2692:	60 ff       	sbrs	r22, 0
    2694:	e8 cf       	rjmp	.-48     	; 0x2666 <ldexp+0x2c>
    2696:	6f 5f       	subi	r22, 0xFF	; 255
    2698:	7f 4f       	sbci	r23, 0xFF	; 255
    269a:	8f 4f       	sbci	r24, 0xFF	; 255
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	e3 cf       	rjmp	.-58     	; 0x2666 <ldexp+0x2c>
    26a0:	b9 cf       	rjmp	.-142    	; 0x2614 <__fp_szero>
    26a2:	0e f0       	brts	.+2      	; 0x26a6 <ldexp+0x6c>
    26a4:	67 c1       	rjmp	.+718    	; 0x2974 <__fp_mpack>
    26a6:	4c cf       	rjmp	.-360    	; 0x2540 <__fp_nan>
    26a8:	68 94       	set
    26aa:	44 cf       	rjmp	.-376    	; 0x2534 <__fp_inf>

000026ac <log>:
    26ac:	98 df       	rcall	.-208    	; 0x25de <__fp_splitA>
    26ae:	c8 f3       	brcs	.-14     	; 0x26a2 <ldexp+0x68>
    26b0:	99 23       	and	r25, r25
    26b2:	d1 f3       	breq	.-12     	; 0x26a8 <ldexp+0x6e>
    26b4:	c6 f3       	brts	.-16     	; 0x26a6 <ldexp+0x6c>
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	1f 93       	push	r17
    26bc:	0f 93       	push	r16
    26be:	ff 92       	push	r15
    26c0:	c9 2f       	mov	r28, r25
    26c2:	dd 27       	eor	r29, r29
    26c4:	88 23       	and	r24, r24
    26c6:	2a f0       	brmi	.+10     	; 0x26d2 <log+0x26>
    26c8:	21 97       	sbiw	r28, 0x01	; 1
    26ca:	66 0f       	add	r22, r22
    26cc:	77 1f       	adc	r23, r23
    26ce:	88 1f       	adc	r24, r24
    26d0:	da f7       	brpl	.-10     	; 0x26c8 <log+0x1c>
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	5f eb       	ldi	r21, 0xBF	; 191
    26da:	9f e3       	ldi	r25, 0x3F	; 63
    26dc:	88 39       	cpi	r24, 0x98	; 152
    26de:	20 f0       	brcs	.+8      	; 0x26e8 <log+0x3c>
    26e0:	80 3e       	cpi	r24, 0xE0	; 224
    26e2:	30 f0       	brcs	.+12     	; 0x26f0 <log+0x44>
    26e4:	21 96       	adiw	r28, 0x01	; 1
    26e6:	8f 77       	andi	r24, 0x7F	; 127
    26e8:	92 dd       	rcall	.-1244   	; 0x220e <__addsf3>
    26ea:	ec e0       	ldi	r30, 0x0C	; 12
    26ec:	f1 e0       	ldi	r31, 0x01	; 1
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <log+0x4a>
    26f0:	8e dd       	rcall	.-1252   	; 0x220e <__addsf3>
    26f2:	e9 e3       	ldi	r30, 0x39	; 57
    26f4:	f1 e0       	ldi	r31, 0x01	; 1
    26f6:	27 df       	rcall	.-434    	; 0x2546 <__fp_powser>
    26f8:	8b 01       	movw	r16, r22
    26fa:	be 01       	movw	r22, r28
    26fc:	ec 01       	movw	r28, r24
    26fe:	fb 2e       	mov	r15, r27
    2700:	6f 57       	subi	r22, 0x7F	; 127
    2702:	71 09       	sbc	r23, r1
    2704:	75 95       	asr	r23
    2706:	77 1f       	adc	r23, r23
    2708:	88 0b       	sbc	r24, r24
    270a:	99 0b       	sbc	r25, r25
    270c:	b4 de       	rcall	.-664    	; 0x2476 <__floatsisf>
    270e:	28 e1       	ldi	r18, 0x18	; 24
    2710:	32 e7       	ldi	r19, 0x72	; 114
    2712:	41 e3       	ldi	r20, 0x31	; 49
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	49 d0       	rcall	.+146    	; 0x27aa <__mulsf3x>
    2718:	af 2d       	mov	r26, r15
    271a:	98 01       	movw	r18, r16
    271c:	ae 01       	movw	r20, r28
    271e:	ff 90       	pop	r15
    2720:	0f 91       	pop	r16
    2722:	1f 91       	pop	r17
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	83 dd       	rcall	.-1274   	; 0x2230 <__addsf3x>
    272a:	40 cf       	rjmp	.-384    	; 0x25ac <__fp_round>

0000272c <modf>:
    272c:	fa 01       	movw	r30, r20
    272e:	dc 01       	movw	r26, r24
    2730:	aa 0f       	add	r26, r26
    2732:	bb 1f       	adc	r27, r27
    2734:	9b 01       	movw	r18, r22
    2736:	ac 01       	movw	r20, r24
    2738:	bf 57       	subi	r27, 0x7F	; 127
    273a:	28 f4       	brcc	.+10     	; 0x2746 <modf+0x1a>
    273c:	22 27       	eor	r18, r18
    273e:	33 27       	eor	r19, r19
    2740:	44 27       	eor	r20, r20
    2742:	50 78       	andi	r21, 0x80	; 128
    2744:	1f c0       	rjmp	.+62     	; 0x2784 <modf+0x58>
    2746:	b7 51       	subi	r27, 0x17	; 23
    2748:	88 f4       	brcc	.+34     	; 0x276c <modf+0x40>
    274a:	ab 2f       	mov	r26, r27
    274c:	00 24       	eor	r0, r0
    274e:	46 95       	lsr	r20
    2750:	37 95       	ror	r19
    2752:	27 95       	ror	r18
    2754:	01 1c       	adc	r0, r1
    2756:	a3 95       	inc	r26
    2758:	d2 f3       	brmi	.-12     	; 0x274e <modf+0x22>
    275a:	00 20       	and	r0, r0
    275c:	69 f0       	breq	.+26     	; 0x2778 <modf+0x4c>
    275e:	22 0f       	add	r18, r18
    2760:	33 1f       	adc	r19, r19
    2762:	44 1f       	adc	r20, r20
    2764:	b3 95       	inc	r27
    2766:	da f3       	brmi	.-10     	; 0x275e <modf+0x32>
    2768:	0d d0       	rcall	.+26     	; 0x2784 <modf+0x58>
    276a:	50 cd       	rjmp	.-1376   	; 0x220c <__subsf3>
    276c:	61 30       	cpi	r22, 0x01	; 1
    276e:	71 05       	cpc	r23, r1
    2770:	a0 e8       	ldi	r26, 0x80	; 128
    2772:	8a 07       	cpc	r24, r26
    2774:	b9 46       	sbci	r27, 0x69	; 105
    2776:	30 f4       	brcc	.+12     	; 0x2784 <modf+0x58>
    2778:	9b 01       	movw	r18, r22
    277a:	ac 01       	movw	r20, r24
    277c:	66 27       	eor	r22, r22
    277e:	77 27       	eor	r23, r23
    2780:	88 27       	eor	r24, r24
    2782:	90 78       	andi	r25, 0x80	; 128
    2784:	30 96       	adiw	r30, 0x00	; 0
    2786:	21 f0       	breq	.+8      	; 0x2790 <modf+0x64>
    2788:	20 83       	st	Z, r18
    278a:	31 83       	std	Z+1, r19	; 0x01
    278c:	42 83       	std	Z+2, r20	; 0x02
    278e:	53 83       	std	Z+3, r21	; 0x03
    2790:	08 95       	ret

00002792 <__mulsf3>:
    2792:	0b d0       	rcall	.+22     	; 0x27aa <__mulsf3x>
    2794:	0b cf       	rjmp	.-490    	; 0x25ac <__fp_round>
    2796:	fc de       	rcall	.-520    	; 0x2590 <__fp_pscA>
    2798:	28 f0       	brcs	.+10     	; 0x27a4 <__mulsf3+0x12>
    279a:	01 df       	rcall	.-510    	; 0x259e <__fp_pscB>
    279c:	18 f0       	brcs	.+6      	; 0x27a4 <__mulsf3+0x12>
    279e:	95 23       	and	r25, r21
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <__mulsf3+0x12>
    27a2:	c8 ce       	rjmp	.-624    	; 0x2534 <__fp_inf>
    27a4:	cd ce       	rjmp	.-614    	; 0x2540 <__fp_nan>
    27a6:	11 24       	eor	r1, r1
    27a8:	35 cf       	rjmp	.-406    	; 0x2614 <__fp_szero>

000027aa <__mulsf3x>:
    27aa:	11 df       	rcall	.-478    	; 0x25ce <__fp_split3>
    27ac:	a0 f3       	brcs	.-24     	; 0x2796 <__mulsf3+0x4>

000027ae <__mulsf3_pse>:
    27ae:	95 9f       	mul	r25, r21
    27b0:	d1 f3       	breq	.-12     	; 0x27a6 <__mulsf3+0x14>
    27b2:	95 0f       	add	r25, r21
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	55 1f       	adc	r21, r21
    27b8:	62 9f       	mul	r22, r18
    27ba:	f0 01       	movw	r30, r0
    27bc:	72 9f       	mul	r23, r18
    27be:	bb 27       	eor	r27, r27
    27c0:	f0 0d       	add	r31, r0
    27c2:	b1 1d       	adc	r27, r1
    27c4:	63 9f       	mul	r22, r19
    27c6:	aa 27       	eor	r26, r26
    27c8:	f0 0d       	add	r31, r0
    27ca:	b1 1d       	adc	r27, r1
    27cc:	aa 1f       	adc	r26, r26
    27ce:	64 9f       	mul	r22, r20
    27d0:	66 27       	eor	r22, r22
    27d2:	b0 0d       	add	r27, r0
    27d4:	a1 1d       	adc	r26, r1
    27d6:	66 1f       	adc	r22, r22
    27d8:	82 9f       	mul	r24, r18
    27da:	22 27       	eor	r18, r18
    27dc:	b0 0d       	add	r27, r0
    27de:	a1 1d       	adc	r26, r1
    27e0:	62 1f       	adc	r22, r18
    27e2:	73 9f       	mul	r23, r19
    27e4:	b0 0d       	add	r27, r0
    27e6:	a1 1d       	adc	r26, r1
    27e8:	62 1f       	adc	r22, r18
    27ea:	83 9f       	mul	r24, r19
    27ec:	a0 0d       	add	r26, r0
    27ee:	61 1d       	adc	r22, r1
    27f0:	22 1f       	adc	r18, r18
    27f2:	74 9f       	mul	r23, r20
    27f4:	33 27       	eor	r19, r19
    27f6:	a0 0d       	add	r26, r0
    27f8:	61 1d       	adc	r22, r1
    27fa:	23 1f       	adc	r18, r19
    27fc:	84 9f       	mul	r24, r20
    27fe:	60 0d       	add	r22, r0
    2800:	21 1d       	adc	r18, r1
    2802:	82 2f       	mov	r24, r18
    2804:	76 2f       	mov	r23, r22
    2806:	6a 2f       	mov	r22, r26
    2808:	11 24       	eor	r1, r1
    280a:	9f 57       	subi	r25, 0x7F	; 127
    280c:	50 40       	sbci	r21, 0x00	; 0
    280e:	8a f0       	brmi	.+34     	; 0x2832 <__mulsf3_pse+0x84>
    2810:	e1 f0       	breq	.+56     	; 0x284a <__mulsf3_pse+0x9c>
    2812:	88 23       	and	r24, r24
    2814:	4a f0       	brmi	.+18     	; 0x2828 <__mulsf3_pse+0x7a>
    2816:	ee 0f       	add	r30, r30
    2818:	ff 1f       	adc	r31, r31
    281a:	bb 1f       	adc	r27, r27
    281c:	66 1f       	adc	r22, r22
    281e:	77 1f       	adc	r23, r23
    2820:	88 1f       	adc	r24, r24
    2822:	91 50       	subi	r25, 0x01	; 1
    2824:	50 40       	sbci	r21, 0x00	; 0
    2826:	a9 f7       	brne	.-22     	; 0x2812 <__mulsf3_pse+0x64>
    2828:	9e 3f       	cpi	r25, 0xFE	; 254
    282a:	51 05       	cpc	r21, r1
    282c:	70 f0       	brcs	.+28     	; 0x284a <__mulsf3_pse+0x9c>
    282e:	82 ce       	rjmp	.-764    	; 0x2534 <__fp_inf>
    2830:	f1 ce       	rjmp	.-542    	; 0x2614 <__fp_szero>
    2832:	5f 3f       	cpi	r21, 0xFF	; 255
    2834:	ec f3       	brlt	.-6      	; 0x2830 <__mulsf3_pse+0x82>
    2836:	98 3e       	cpi	r25, 0xE8	; 232
    2838:	dc f3       	brlt	.-10     	; 0x2830 <__mulsf3_pse+0x82>
    283a:	86 95       	lsr	r24
    283c:	77 95       	ror	r23
    283e:	67 95       	ror	r22
    2840:	b7 95       	ror	r27
    2842:	f7 95       	ror	r31
    2844:	e7 95       	ror	r30
    2846:	9f 5f       	subi	r25, 0xFF	; 255
    2848:	c1 f7       	brne	.-16     	; 0x283a <__mulsf3_pse+0x8c>
    284a:	fe 2b       	or	r31, r30
    284c:	88 0f       	add	r24, r24
    284e:	91 1d       	adc	r25, r1
    2850:	96 95       	lsr	r25
    2852:	87 95       	ror	r24
    2854:	97 f9       	bld	r25, 7
    2856:	08 95       	ret

00002858 <pow>:
    2858:	fa 01       	movw	r30, r20
    285a:	ee 0f       	add	r30, r30
    285c:	ff 1f       	adc	r31, r31
    285e:	30 96       	adiw	r30, 0x00	; 0
    2860:	21 05       	cpc	r18, r1
    2862:	31 05       	cpc	r19, r1
    2864:	99 f1       	breq	.+102    	; 0x28cc <pow+0x74>
    2866:	61 15       	cp	r22, r1
    2868:	71 05       	cpc	r23, r1
    286a:	61 f4       	brne	.+24     	; 0x2884 <pow+0x2c>
    286c:	80 38       	cpi	r24, 0x80	; 128
    286e:	bf e3       	ldi	r27, 0x3F	; 63
    2870:	9b 07       	cpc	r25, r27
    2872:	49 f1       	breq	.+82     	; 0x28c6 <pow+0x6e>
    2874:	68 94       	set
    2876:	90 38       	cpi	r25, 0x80	; 128
    2878:	81 05       	cpc	r24, r1
    287a:	61 f0       	breq	.+24     	; 0x2894 <pow+0x3c>
    287c:	80 38       	cpi	r24, 0x80	; 128
    287e:	bf ef       	ldi	r27, 0xFF	; 255
    2880:	9b 07       	cpc	r25, r27
    2882:	41 f0       	breq	.+16     	; 0x2894 <pow+0x3c>
    2884:	99 23       	and	r25, r25
    2886:	42 f5       	brpl	.+80     	; 0x28d8 <pow+0x80>
    2888:	ff 3f       	cpi	r31, 0xFF	; 255
    288a:	e1 05       	cpc	r30, r1
    288c:	31 05       	cpc	r19, r1
    288e:	21 05       	cpc	r18, r1
    2890:	11 f1       	breq	.+68     	; 0x28d6 <pow+0x7e>
    2892:	e8 94       	clt
    2894:	08 94       	sec
    2896:	e7 95       	ror	r30
    2898:	d9 01       	movw	r26, r18
    289a:	aa 23       	and	r26, r26
    289c:	29 f4       	brne	.+10     	; 0x28a8 <pow+0x50>
    289e:	ab 2f       	mov	r26, r27
    28a0:	be 2f       	mov	r27, r30
    28a2:	f8 5f       	subi	r31, 0xF8	; 248
    28a4:	d0 f3       	brcs	.-12     	; 0x289a <pow+0x42>
    28a6:	10 c0       	rjmp	.+32     	; 0x28c8 <pow+0x70>
    28a8:	ff 5f       	subi	r31, 0xFF	; 255
    28aa:	70 f4       	brcc	.+28     	; 0x28c8 <pow+0x70>
    28ac:	a6 95       	lsr	r26
    28ae:	e0 f7       	brcc	.-8      	; 0x28a8 <pow+0x50>
    28b0:	f7 39       	cpi	r31, 0x97	; 151
    28b2:	50 f0       	brcs	.+20     	; 0x28c8 <pow+0x70>
    28b4:	19 f0       	breq	.+6      	; 0x28bc <pow+0x64>
    28b6:	ff 3a       	cpi	r31, 0xAF	; 175
    28b8:	38 f4       	brcc	.+14     	; 0x28c8 <pow+0x70>
    28ba:	9f 77       	andi	r25, 0x7F	; 127
    28bc:	9f 93       	push	r25
    28be:	0c d0       	rcall	.+24     	; 0x28d8 <pow+0x80>
    28c0:	0f 90       	pop	r0
    28c2:	07 fc       	sbrc	r0, 7
    28c4:	90 58       	subi	r25, 0x80	; 128
    28c6:	08 95       	ret
    28c8:	3e f0       	brts	.+14     	; 0x28d8 <pow+0x80>
    28ca:	3a ce       	rjmp	.-908    	; 0x2540 <__fp_nan>
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	80 e8       	ldi	r24, 0x80	; 128
    28d2:	9f e3       	ldi	r25, 0x3F	; 63
    28d4:	08 95       	ret
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	9f 77       	andi	r25, 0x7F	; 127
    28da:	5f 93       	push	r21
    28dc:	4f 93       	push	r20
    28de:	3f 93       	push	r19
    28e0:	2f 93       	push	r18
    28e2:	e4 de       	rcall	.-568    	; 0x26ac <log>
    28e4:	2f 91       	pop	r18
    28e6:	3f 91       	pop	r19
    28e8:	4f 91       	pop	r20
    28ea:	5f 91       	pop	r21
    28ec:	52 df       	rcall	.-348    	; 0x2792 <__mulsf3>
    28ee:	64 cd       	rjmp	.-1336   	; 0x23b8 <exp>
    28f0:	11 f4       	brne	.+4      	; 0x28f6 <pow+0x9e>
    28f2:	0e f4       	brtc	.+2      	; 0x28f6 <pow+0x9e>
    28f4:	25 ce       	rjmp	.-950    	; 0x2540 <__fp_nan>
    28f6:	3e c0       	rjmp	.+124    	; 0x2974 <__fp_mpack>

000028f8 <sqrt>:
    28f8:	72 de       	rcall	.-796    	; 0x25de <__fp_splitA>
    28fa:	d0 f3       	brcs	.-12     	; 0x28f0 <pow+0x98>
    28fc:	99 23       	and	r25, r25
    28fe:	d9 f3       	breq	.-10     	; 0x28f6 <pow+0x9e>
    2900:	ce f3       	brts	.-14     	; 0x28f4 <pow+0x9c>
    2902:	9f 57       	subi	r25, 0x7F	; 127
    2904:	55 0b       	sbc	r21, r21
    2906:	87 ff       	sbrs	r24, 7
    2908:	43 d0       	rcall	.+134    	; 0x2990 <__fp_norm2>
    290a:	00 24       	eor	r0, r0
    290c:	a0 e6       	ldi	r26, 0x60	; 96
    290e:	40 ea       	ldi	r20, 0xA0	; 160
    2910:	90 01       	movw	r18, r0
    2912:	80 58       	subi	r24, 0x80	; 128
    2914:	56 95       	lsr	r21
    2916:	97 95       	ror	r25
    2918:	28 f4       	brcc	.+10     	; 0x2924 <sqrt+0x2c>
    291a:	80 5c       	subi	r24, 0xC0	; 192
    291c:	66 0f       	add	r22, r22
    291e:	77 1f       	adc	r23, r23
    2920:	88 1f       	adc	r24, r24
    2922:	20 f0       	brcs	.+8      	; 0x292c <sqrt+0x34>
    2924:	26 17       	cp	r18, r22
    2926:	37 07       	cpc	r19, r23
    2928:	48 07       	cpc	r20, r24
    292a:	30 f4       	brcc	.+12     	; 0x2938 <sqrt+0x40>
    292c:	62 1b       	sub	r22, r18
    292e:	73 0b       	sbc	r23, r19
    2930:	84 0b       	sbc	r24, r20
    2932:	20 29       	or	r18, r0
    2934:	31 29       	or	r19, r1
    2936:	4a 2b       	or	r20, r26
    2938:	a6 95       	lsr	r26
    293a:	17 94       	ror	r1
    293c:	07 94       	ror	r0
    293e:	20 25       	eor	r18, r0
    2940:	31 25       	eor	r19, r1
    2942:	4a 27       	eor	r20, r26
    2944:	58 f7       	brcc	.-42     	; 0x291c <sqrt+0x24>
    2946:	66 0f       	add	r22, r22
    2948:	77 1f       	adc	r23, r23
    294a:	88 1f       	adc	r24, r24
    294c:	20 f0       	brcs	.+8      	; 0x2956 <sqrt+0x5e>
    294e:	26 17       	cp	r18, r22
    2950:	37 07       	cpc	r19, r23
    2952:	48 07       	cpc	r20, r24
    2954:	30 f4       	brcc	.+12     	; 0x2962 <sqrt+0x6a>
    2956:	62 0b       	sbc	r22, r18
    2958:	73 0b       	sbc	r23, r19
    295a:	84 0b       	sbc	r24, r20
    295c:	20 0d       	add	r18, r0
    295e:	31 1d       	adc	r19, r1
    2960:	41 1d       	adc	r20, r1
    2962:	a0 95       	com	r26
    2964:	81 f7       	brne	.-32     	; 0x2946 <sqrt+0x4e>
    2966:	b9 01       	movw	r22, r18
    2968:	84 2f       	mov	r24, r20
    296a:	91 58       	subi	r25, 0x81	; 129
    296c:	88 0f       	add	r24, r24
    296e:	96 95       	lsr	r25
    2970:	87 95       	ror	r24
    2972:	08 95       	ret

00002974 <__fp_mpack>:
    2974:	9f 3f       	cpi	r25, 0xFF	; 255
    2976:	31 f0       	breq	.+12     	; 0x2984 <__fp_mpack_finite+0xc>

00002978 <__fp_mpack_finite>:
    2978:	91 50       	subi	r25, 0x01	; 1
    297a:	20 f4       	brcc	.+8      	; 0x2984 <__fp_mpack_finite+0xc>
    297c:	87 95       	ror	r24
    297e:	77 95       	ror	r23
    2980:	67 95       	ror	r22
    2982:	b7 95       	ror	r27
    2984:	88 0f       	add	r24, r24
    2986:	91 1d       	adc	r25, r1
    2988:	96 95       	lsr	r25
    298a:	87 95       	ror	r24
    298c:	97 f9       	bld	r25, 7
    298e:	08 95       	ret

00002990 <__fp_norm2>:
    2990:	91 50       	subi	r25, 0x01	; 1
    2992:	50 40       	sbci	r21, 0x00	; 0
    2994:	66 0f       	add	r22, r22
    2996:	77 1f       	adc	r23, r23
    2998:	88 1f       	adc	r24, r24
    299a:	d2 f7       	brpl	.-12     	; 0x2990 <__fp_norm2>
    299c:	08 95       	ret

0000299e <__mulsi3>:
    299e:	62 9f       	mul	r22, r18
    29a0:	d0 01       	movw	r26, r0
    29a2:	73 9f       	mul	r23, r19
    29a4:	f0 01       	movw	r30, r0
    29a6:	82 9f       	mul	r24, r18
    29a8:	e0 0d       	add	r30, r0
    29aa:	f1 1d       	adc	r31, r1
    29ac:	64 9f       	mul	r22, r20
    29ae:	e0 0d       	add	r30, r0
    29b0:	f1 1d       	adc	r31, r1
    29b2:	92 9f       	mul	r25, r18
    29b4:	f0 0d       	add	r31, r0
    29b6:	83 9f       	mul	r24, r19
    29b8:	f0 0d       	add	r31, r0
    29ba:	74 9f       	mul	r23, r20
    29bc:	f0 0d       	add	r31, r0
    29be:	65 9f       	mul	r22, r21
    29c0:	f0 0d       	add	r31, r0
    29c2:	99 27       	eor	r25, r25
    29c4:	72 9f       	mul	r23, r18
    29c6:	b0 0d       	add	r27, r0
    29c8:	e1 1d       	adc	r30, r1
    29ca:	f9 1f       	adc	r31, r25
    29cc:	63 9f       	mul	r22, r19
    29ce:	b0 0d       	add	r27, r0
    29d0:	e1 1d       	adc	r30, r1
    29d2:	f9 1f       	adc	r31, r25
    29d4:	bd 01       	movw	r22, r26
    29d6:	cf 01       	movw	r24, r30
    29d8:	11 24       	eor	r1, r1
    29da:	08 95       	ret

000029dc <__udivmodhi4>:
    29dc:	aa 1b       	sub	r26, r26
    29de:	bb 1b       	sub	r27, r27
    29e0:	51 e1       	ldi	r21, 0x11	; 17
    29e2:	07 c0       	rjmp	.+14     	; 0x29f2 <__udivmodhi4_ep>

000029e4 <__udivmodhi4_loop>:
    29e4:	aa 1f       	adc	r26, r26
    29e6:	bb 1f       	adc	r27, r27
    29e8:	a6 17       	cp	r26, r22
    29ea:	b7 07       	cpc	r27, r23
    29ec:	10 f0       	brcs	.+4      	; 0x29f2 <__udivmodhi4_ep>
    29ee:	a6 1b       	sub	r26, r22
    29f0:	b7 0b       	sbc	r27, r23

000029f2 <__udivmodhi4_ep>:
    29f2:	88 1f       	adc	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	5a 95       	dec	r21
    29f8:	a9 f7       	brne	.-22     	; 0x29e4 <__udivmodhi4_loop>
    29fa:	80 95       	com	r24
    29fc:	90 95       	com	r25
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	08 95       	ret

00002a04 <__divmodhi4>:
    2a04:	97 fb       	bst	r25, 7
    2a06:	09 2e       	mov	r0, r25
    2a08:	07 26       	eor	r0, r23
    2a0a:	0a d0       	rcall	.+20     	; 0x2a20 <__divmodhi4_neg1>
    2a0c:	77 fd       	sbrc	r23, 7
    2a0e:	04 d0       	rcall	.+8      	; 0x2a18 <__divmodhi4_neg2>
    2a10:	e5 df       	rcall	.-54     	; 0x29dc <__udivmodhi4>
    2a12:	06 d0       	rcall	.+12     	; 0x2a20 <__divmodhi4_neg1>
    2a14:	00 20       	and	r0, r0
    2a16:	1a f4       	brpl	.+6      	; 0x2a1e <__divmodhi4_exit>

00002a18 <__divmodhi4_neg2>:
    2a18:	70 95       	com	r23
    2a1a:	61 95       	neg	r22
    2a1c:	7f 4f       	sbci	r23, 0xFF	; 255

00002a1e <__divmodhi4_exit>:
    2a1e:	08 95       	ret

00002a20 <__divmodhi4_neg1>:
    2a20:	f6 f7       	brtc	.-4      	; 0x2a1e <__divmodhi4_exit>
    2a22:	90 95       	com	r25
    2a24:	81 95       	neg	r24
    2a26:	9f 4f       	sbci	r25, 0xFF	; 255
    2a28:	08 95       	ret

00002a2a <__divmodsi4>:
    2a2a:	97 fb       	bst	r25, 7
    2a2c:	09 2e       	mov	r0, r25
    2a2e:	05 26       	eor	r0, r21
    2a30:	0e d0       	rcall	.+28     	; 0x2a4e <__divmodsi4_neg1>
    2a32:	57 fd       	sbrc	r21, 7
    2a34:	04 d0       	rcall	.+8      	; 0x2a3e <__divmodsi4_neg2>
    2a36:	4b d0       	rcall	.+150    	; 0x2ace <__udivmodsi4>
    2a38:	0a d0       	rcall	.+20     	; 0x2a4e <__divmodsi4_neg1>
    2a3a:	00 1c       	adc	r0, r0
    2a3c:	38 f4       	brcc	.+14     	; 0x2a4c <__divmodsi4_exit>

00002a3e <__divmodsi4_neg2>:
    2a3e:	50 95       	com	r21
    2a40:	40 95       	com	r20
    2a42:	30 95       	com	r19
    2a44:	21 95       	neg	r18
    2a46:	3f 4f       	sbci	r19, 0xFF	; 255
    2a48:	4f 4f       	sbci	r20, 0xFF	; 255
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255

00002a4c <__divmodsi4_exit>:
    2a4c:	08 95       	ret

00002a4e <__divmodsi4_neg1>:
    2a4e:	f6 f7       	brtc	.-4      	; 0x2a4c <__divmodsi4_exit>
    2a50:	90 95       	com	r25
    2a52:	80 95       	com	r24
    2a54:	70 95       	com	r23
    2a56:	61 95       	neg	r22
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5e:	08 95       	ret

00002a60 <__prologue_saves__>:
    2a60:	2f 92       	push	r2
    2a62:	3f 92       	push	r3
    2a64:	4f 92       	push	r4
    2a66:	5f 92       	push	r5
    2a68:	6f 92       	push	r6
    2a6a:	7f 92       	push	r7
    2a6c:	8f 92       	push	r8
    2a6e:	9f 92       	push	r9
    2a70:	af 92       	push	r10
    2a72:	bf 92       	push	r11
    2a74:	cf 92       	push	r12
    2a76:	df 92       	push	r13
    2a78:	ef 92       	push	r14
    2a7a:	ff 92       	push	r15
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	ca 1b       	sub	r28, r26
    2a8a:	db 0b       	sbc	r29, r27
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	19 94       	eijmp

00002a98 <__epilogue_restores__>:
    2a98:	2a 88       	ldd	r2, Y+18	; 0x12
    2a9a:	39 88       	ldd	r3, Y+17	; 0x11
    2a9c:	48 88       	ldd	r4, Y+16	; 0x10
    2a9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aa0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aa2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aa4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aa8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aaa:	b9 84       	ldd	r11, Y+9	; 0x09
    2aac:	c8 84       	ldd	r12, Y+8	; 0x08
    2aae:	df 80       	ldd	r13, Y+7	; 0x07
    2ab0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ab4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ab8:	aa 81       	ldd	r26, Y+2	; 0x02
    2aba:	b9 81       	ldd	r27, Y+1	; 0x01
    2abc:	ce 0f       	add	r28, r30
    2abe:	d1 1d       	adc	r29, r1
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	ed 01       	movw	r28, r26
    2acc:	08 95       	ret

00002ace <__udivmodsi4>:
    2ace:	a1 e2       	ldi	r26, 0x21	; 33
    2ad0:	1a 2e       	mov	r1, r26
    2ad2:	aa 1b       	sub	r26, r26
    2ad4:	bb 1b       	sub	r27, r27
    2ad6:	fd 01       	movw	r30, r26
    2ad8:	0d c0       	rjmp	.+26     	; 0x2af4 <__udivmodsi4_ep>

00002ada <__udivmodsi4_loop>:
    2ada:	aa 1f       	adc	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	ee 1f       	adc	r30, r30
    2ae0:	ff 1f       	adc	r31, r31
    2ae2:	a2 17       	cp	r26, r18
    2ae4:	b3 07       	cpc	r27, r19
    2ae6:	e4 07       	cpc	r30, r20
    2ae8:	f5 07       	cpc	r31, r21
    2aea:	20 f0       	brcs	.+8      	; 0x2af4 <__udivmodsi4_ep>
    2aec:	a2 1b       	sub	r26, r18
    2aee:	b3 0b       	sbc	r27, r19
    2af0:	e4 0b       	sbc	r30, r20
    2af2:	f5 0b       	sbc	r31, r21

00002af4 <__udivmodsi4_ep>:
    2af4:	66 1f       	adc	r22, r22
    2af6:	77 1f       	adc	r23, r23
    2af8:	88 1f       	adc	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	1a 94       	dec	r1
    2afe:	69 f7       	brne	.-38     	; 0x2ada <__udivmodsi4_loop>
    2b00:	60 95       	com	r22
    2b02:	70 95       	com	r23
    2b04:	80 95       	com	r24
    2b06:	90 95       	com	r25
    2b08:	9b 01       	movw	r18, r22
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	bd 01       	movw	r22, r26
    2b0e:	cf 01       	movw	r24, r30
    2b10:	08 95       	ret

00002b12 <_exit>:
    2b12:	f8 94       	cli

00002b14 <__stop_program>:
    2b14:	ff cf       	rjmp	.-2      	; 0x2b14 <__stop_program>
